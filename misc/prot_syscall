extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
extern int sched_getparam (__pid_t __pid, struct sched_param *__param) __THROW;
extern int sched_setscheduler (__pid_t __pid, int __policy,
extern int sched_getscheduler (__pid_t __pid) __THROW;
extern int sched_yield (void) __THROW;
extern int sched_get_priority_max (int __algorithm) __THROW;
extern int sched_get_priority_min (int __algorithm) __THROW;
extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) __THROW;
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
extern int kexec_load(void *, size_t, struct kexec_segment *,
extern void setpwent (void);
extern void endpwent (void);
extern struct passwd *getpwent (void);
extern struct passwd *fgetpwent (FILE *__stream);
extern int putpwent (const struct passwd *__restrict __p,
extern struct passwd *getpwuid (__uid_t __uid);
extern struct passwd *getpwnam (const char *__name);
extern int getpwent_r (struct passwd *__restrict __resultbuf,
extern int getpwuid_r (__uid_t __uid,
extern int getpwnam_r (const char *__restrict __name,
extern int fgetpwent_r (FILE *__restrict __stream,
extern int getpw (__uid_t __uid, char *__buffer);
extern nl_catd catopen (const char *__cat_name, int __flag) __nonnull ((1));
extern char *catgets (nl_catd __catalog, int __set, int __number,
extern int catclose (nl_catd __catalog) __THROW __nonnull ((1));
extern int backtrace (void **__array, int __size) __nonnull ((1));
extern char **backtrace_symbols (void *const *__array, int __size)
extern void backtrace_symbols_fd (void *const *__array, int __size, int __fd)
extern "C" {
extern NCURSES_EXPORT(WINDOW*) panel_window (const PANEL *);
extern NCURSES_EXPORT(void)    update_panels (void);
extern NCURSES_EXPORT(int)     hide_panel (PANEL *);
extern NCURSES_EXPORT(int)     show_panel (PANEL *);
extern NCURSES_EXPORT(int)     del_panel (PANEL *);
extern NCURSES_EXPORT(int)     top_panel (PANEL *);
extern NCURSES_EXPORT(int)     bottom_panel (PANEL *);
extern NCURSES_EXPORT(PANEL*)  new_panel (WINDOW *);
extern NCURSES_EXPORT(PANEL*)  panel_above (const PANEL *);
extern NCURSES_EXPORT(PANEL*)  panel_below (const PANEL *);
extern NCURSES_EXPORT(int)     set_panel_userptr (PANEL *, NCURSES_CONST void *);
extern NCURSES_EXPORT(NCURSES_CONST void*) panel_userptr (const PANEL *);
extern NCURSES_EXPORT(int)     move_panel (PANEL *, int, int);
extern NCURSES_EXPORT(int)     replace_panel (PANEL *,WINDOW *);
extern NCURSES_EXPORT(int)     panel_hidden (const PANEL *);
extern NCURSES_EXPORT(PANEL *) ground_panel(SCREEN *);
extern NCURSES_EXPORT(PANEL *) ceiling_panel(SCREEN *);
extern NCURSES_EXPORT(void)    NCURSES_SP_NAME(update_panels) (SCREEN*);
extern int login_tty (int __fd) __THROW;
extern void login (const struct utmp *__entry) __THROW;
extern int logout (const char *__ut_line) __THROW;
extern void logwtmp (const char *__ut_line, const char *__ut_name,
extern void updwtmp (const char *__wtmp_file, const struct utmp *__utmp)
extern int utmpname (const char *__file) __THROW;
extern struct utmp *getutent (void) __THROW;
extern void setutent (void) __THROW;
extern void endutent (void) __THROW;
extern struct utmp *getutid (const struct utmp *__id) __THROW;
extern struct utmp *getutline (const struct utmp *__line) __THROW;
extern struct utmp *pututline (const struct utmp *__utmp_ptr) __THROW;
extern int getutent_r (struct utmp *__buffer, struct utmp **__result) __THROW;
extern int getutid_r (const struct utmp *__id, struct utmp *__buffer,
extern int getutline_r (const struct utmp *__line,
extern "C" {
extern char *envz_entry (const char *__restrict __envz, size_t __envz_len,
extern char *envz_get (const char *__restrict __envz, size_t __envz_len,
extern error_t envz_add (char **__restrict __envz,
extern error_t envz_merge (char **__restrict __envz,
extern void envz_remove (char **__restrict __envz,
extern void envz_strip (char **__restrict __envz,
extern void insque (void *__elem, void *__prev) __THROW;
extern void remque (void *__elem) __THROW;
extern ENTRY *hsearch (ENTRY __item, ACTION __action) __THROW;
extern int hcreate (size_t __nel) __THROW;
extern void hdestroy (void) __THROW;
extern int hsearch_r (ENTRY __item, ACTION __action, ENTRY **__retval,
extern int hcreate_r (size_t __nel, struct hsearch_data *__htab) __THROW;
extern void hdestroy_r (struct hsearch_data *__htab) __THROW;
extern void *tsearch (const void *__key, void **__rootp,
extern void *tfind (const void *__key, void *const *__rootp,
extern void *tdelete (const void *__restrict __key,
extern void twalk (const void *__root, __action_fn_t __action);
extern void tdestroy (void *__root, __free_fn_t __freefct);
extern void *lfind (const void *__key, const void *__base,
extern void *lsearch (const void *__key, void *__base,
extern "C" {
extern int _pSLarray_convert_to_array (VOID_STAR cd,
extern DBusConnection *DBusPyConnection_BorrowDBusConnection(PyObject *);
extern PyObject *DBusPyNativeMainLoop_New4(_dbus_py_conn_setup_func,
extern "C" {
extern "C" {
extern struct ttyent *getttyent (void) __THROW;
extern struct ttyent *getttynam (const char *__tty) __THROW;
extern int setttyent (void) __THROW;
extern int endttyent (void) __THROW;
extern iconv_t iconv_open (const char *__tocode, const char *__fromcode);
extern size_t iconv (iconv_t __cd, char **__restrict __inbuf,
extern int iconv_close (iconv_t __cd);
extern char *setlocale (int __category, const char *__locale) __THROW;
extern struct lconv *localeconv (void) __THROW;
extern __locale_t newlocale (int __category_mask, const char *__locale,
extern __locale_t duplocale (__locale_t __dataset) __THROW;
extern void freelocale (__locale_t __dataset) __THROW;
extern __locale_t uselocale (__locale_t __dataset) __THROW;
extern "C" {
extern reg_syntax_t re_syntax_options;
extern reg_syntax_t re_set_syntax (reg_syntax_t __syntax);
extern const char *re_compile_pattern (const char *__pattern, size_t __length,
extern int re_compile_fastmap (struct re_pattern_buffer *__buffer);
extern int re_search (struct re_pattern_buffer *__buffer, const char *__string,
extern int re_search_2 (struct re_pattern_buffer *__buffer,
extern int re_match (struct re_pattern_buffer *__buffer, const char *__string,
extern int re_match_2 (struct re_pattern_buffer *__buffer,
extern void re_set_registers (struct re_pattern_buffer *__buffer,
extern char *re_comp (const char *);
extern int re_exec (const char *);
extern int regcomp (regex_t *__restrict __preg,
extern int regexec (const regex_t *__restrict __preg,
extern size_t regerror (int __errcode, const regex_t *__restrict __preg,
extern void regfree (regex_t *__preg);
extern int access (const char *__name, int __type) __THROW __nonnull ((1));
extern int euidaccess (const char *__name, int __type)
extern int eaccess (const char *__name, int __type)
extern int faccessat (int __fd, const char *__file, int __type, int __flag)
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __THROW;
extern __off64_t __REDIRECT_NTH (lseek,
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
extern int close (int __fd);
extern ssize_t read (int __fd, void *__buf, size_t __nbytes) __wur;
extern ssize_t write (int __fd, const void *__buf, size_t __n) __wur;
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
extern ssize_t __REDIRECT (pread, (int __fd, void *__buf, size_t __nbytes,
extern ssize_t __REDIRECT (pwrite, (int __fd, const void *__buf,
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
extern int pipe (int __pipedes[2]) __THROW __wur;
extern int pipe2 (int __pipedes[2], int __flags) __THROW __wur;
extern unsigned int alarm (unsigned int __seconds) __THROW;
extern unsigned int sleep (unsigned int __seconds);
extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
extern int usleep (__useconds_t __useconds);
extern int pause (void);
extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __THROW __wur;
extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
extern int fchownat (int __fd, const char *__file, __uid_t __owner,
extern int chdir (const char *__path) __THROW __nonnull ((1)) __wur;
extern int fchdir (int __fd) __THROW __wur;
extern char *getcwd (char *__buf, size_t __size) __THROW __wur;
extern char *get_current_dir_name (void) __THROW;
extern char *getwd (char *__buf)
extern int dup (int __fd) __THROW __wur;
extern int dup2 (int __fd, int __fd2) __THROW;
extern int dup3 (int __fd, int __fd2, int __flags) __THROW;
extern char **__environ;
extern char **environ;
extern int execve (const char *__path, char *const __argv[],
extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
extern int execv (const char *__path, char *const __argv[])
extern int execle (const char *__path, const char *__arg, ...)
extern int execl (const char *__path, const char *__arg, ...)
extern int execvp (const char *__file, char *const __argv[])
extern int execlp (const char *__file, const char *__arg, ...)
extern int execvpe (const char *__file, char *const __argv[],
extern int nice (int __inc) __THROW __wur;
extern void _exit (int __status) __attribute__ ((__noreturn__));
extern long int pathconf (const char *__path, int __name)
extern long int fpathconf (int __fd, int __name) __THROW;
extern long int sysconf (int __name) __THROW;
extern size_t confstr (int __name, char *__buf, size_t __len) __THROW;
extern __pid_t getpid (void) __THROW;
extern __pid_t getppid (void) __THROW;
extern __pid_t getpgrp (void) __THROW;
extern __pid_t __getpgid (__pid_t __pid) __THROW;
extern __pid_t getpgid (__pid_t __pid) __THROW;
extern int setpgid (__pid_t __pid, __pid_t __pgid) __THROW;
extern int setpgrp (void) __THROW;
extern __pid_t setsid (void) __THROW;
extern __pid_t getsid (__pid_t __pid) __THROW;
extern __uid_t getuid (void) __THROW;
extern __uid_t geteuid (void) __THROW;
extern __gid_t getgid (void) __THROW;
extern __gid_t getegid (void) __THROW;
extern int getgroups (int __size, __gid_t __list[]) __THROW __wur;
extern int group_member (__gid_t __gid) __THROW;
extern int setuid (__uid_t __uid) __THROW __wur;
extern int setreuid (__uid_t __ruid, __uid_t __euid) __THROW __wur;
extern int seteuid (__uid_t __uid) __THROW __wur;
extern int setgid (__gid_t __gid) __THROW __wur;
extern int setregid (__gid_t __rgid, __gid_t __egid) __THROW __wur;
extern int setegid (__gid_t __gid) __THROW __wur;
extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
extern __pid_t fork (void) __THROWNL;
extern __pid_t vfork (void) __THROW;
extern char *ttyname (int __fd) __THROW;
extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
extern int isatty (int __fd) __THROW;
extern int ttyslot (void) __THROW;
extern int link (const char *__from, const char *__to)
extern int linkat (int __fromfd, const char *__from, int __tofd,
extern int symlink (const char *__from, const char *__to)
extern ssize_t readlink (const char *__restrict __path,
extern int symlinkat (const char *__from, int __tofd,
extern ssize_t readlinkat (int __fd, const char *__restrict __path,
extern int unlink (const char *__name) __THROW __nonnull ((1));
extern int unlinkat (int __fd, const char *__name, int __flag)
extern int rmdir (const char *__path) __THROW __nonnull ((1));
extern __pid_t tcgetpgrp (int __fd) __THROW;
extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __THROW;
extern char *getlogin (void);
extern int getlogin_r (char *__name, size_t __name_len) __nonnull ((1));
extern int setlogin (const char *__name) __THROW __nonnull ((1));
extern int gethostname (char *__name, size_t __len) __THROW __nonnull ((1));
extern int sethostname (const char *__name, size_t __len)
extern int sethostid (long int __id) __THROW __wur;
extern int getdomainname (char *__name, size_t __len)
extern int setdomainname (const char *__name, size_t __len)
extern int vhangup (void) __THROW;
extern int revoke (const char *__file) __THROW __nonnull ((1)) __wur;
extern int profil (unsigned short int *__sample_buffer, size_t __size,
extern int acct (const char *__name) __THROW;
extern char *getusershell (void) __THROW;
extern void endusershell (void) __THROW; /* Discard cached info.  */
extern void setusershell (void) __THROW; /* Rewind and re-read the file.  */
extern int daemon (int __nochdir, int __noclose) __THROW __wur;
extern int chroot (const char *__path) __THROW __nonnull ((1)) __wur;
extern char *getpass (const char *__prompt) __nonnull ((1));
extern int fsync (int __fd);
extern int syncfs (int __fd) __THROW;
extern long int gethostid (void);
extern void sync (void) __THROW;
extern int getpagesize (void)  __THROW __attribute__ ((__const__));
extern int getdtablesize (void) __THROW;
extern int truncate (const char *__file, __off_t __length)
extern int __REDIRECT_NTH (truncate,
extern int truncate64 (const char *__file, __off64_t __length)
extern int ftruncate (int __fd, __off_t __length) __THROW __wur;
extern int __REDIRECT_NTH (ftruncate, (int __fd, __off64_t __length),
extern int ftruncate64 (int __fd, __off64_t __length) __THROW __wur;
extern int brk (void *__addr) __THROW __wur;
extern void *sbrk (intptr_t __delta) __THROW;
extern long int syscall (long int __sysno, ...) __THROW;
extern int lockf (int __fd, int __cmd, __off_t __len) __wur;
extern int __REDIRECT (lockf, (int __fd, int __cmd, __off64_t __len),
extern int lockf64 (int __fd, int __cmd, __off64_t __len) __wur;
extern int fdatasync (int __fildes);
extern char *crypt (const char *__key, const char *__salt)
extern void encrypt (char *__glibc_block, int __edflag)
extern void swab (const void *__restrict __from, void *__restrict __to,
extern char *ctermid (char *__s) __THROW;
extern "C"
extern NCURSES_EXPORT_VAR(char) PC;
extern NCURSES_EXPORT_VAR(char *) UP;
extern NCURSES_EXPORT_VAR(char *) BC;
extern NCURSES_EXPORT_VAR(NCURSES_OSPEED) ospeed; 
extern NCURSES_EXPORT(char *) tgetstr (NCURSES_CONST char *, char **);
extern NCURSES_EXPORT(char *) tgoto (const char *, int, int);
extern NCURSES_EXPORT(int) tgetent (char *, const char *);
extern NCURSES_EXPORT(int) tgetflag (NCURSES_CONST char *);
extern NCURSES_EXPORT(int) tgetnum (NCURSES_CONST char *);
extern NCURSES_EXPORT(int) tputs (const char *, int, int (*)(int));
extern enum auth_stat _authenticate (struct svc_req *__rqst,
extern bool_t xdr_authunix_parms (XDR *__xdrs, struct authunix_parms *__p)
extern int cbc_crypt (char *__key, char *__buf, unsigned __len,
extern int ecb_crypt (char *__key, char *__buf, unsigned __len,
extern void des_setparity (char *__key) __THROW;
extern bool_t pmap_set (const u_long __program, const u_long __vers,
extern bool_t pmap_unset (const u_long __program, const u_long __vers)
extern struct pmaplist *pmap_getmaps (struct sockaddr_in *__address) __THROW;
extern enum clnt_stat pmap_rmtcall (struct sockaddr_in *__addr,
extern enum clnt_stat clnt_broadcast (const u_long __prog,
extern u_short pmap_getport (struct sockaddr_in *__address,
extern fd_set *__rpc_thread_svc_fdset (void) __attribute__ ((__const__));
extern struct rpc_createerr *__rpc_thread_createerr (void)
extern struct pollfd **__rpc_thread_svc_pollfd (void)
extern int *__rpc_thread_svc_max_pollfd (void) __attribute__ ((__const__));
extern CLIENT *clntraw_create (const u_long __prog, const u_long __vers)
extern CLIENT *clnt_create (const char *__host, const u_long __prog,
extern CLIENT *clnttcp_create (struct sockaddr_in *__raddr, u_long __prog,
extern CLIENT *clntudp_create (struct sockaddr_in *__raddr, u_long __program,
extern CLIENT *clntudp_bufcreate (struct sockaddr_in *__raddr,
extern CLIENT *clntunix_create  (struct sockaddr_un *__raddr, u_long __program,
extern int callrpc (const char *__host, const u_long __prognum,
extern int _rpc_dtablesize (void) __THROW;
extern void clnt_pcreateerror (const char *__msg);	/* stderr */
extern char *clnt_spcreateerror(const char *__msg) __THROW;	/* string */
extern void clnt_perrno (enum clnt_stat __num);		/* stderr */
extern void clnt_perror (CLIENT *__clnt, const char *__msg);
extern char *clnt_sperror (CLIENT *__clnt, const char *__msg) __THROW;
extern struct rpc_createerr rpc_createerr;
extern char *clnt_sperrno (enum clnt_stat __num) __THROW;	/* string */
extern int getrpcport (const char * __host, u_long __prognum,
extern void get_myaddress (struct sockaddr_in *) __THROW;
extern bool_t svc_register (SVCXPRT *__xprt, rpcprog_t __prog,
extern void svc_unregister (rpcprog_t __prog, rpcvers_t __vers) __THROW;
extern void xprt_register (SVCXPRT *__xprt) __THROW;
extern void xprt_unregister (SVCXPRT *__xprt) __THROW;
extern bool_t	svc_sendreply (SVCXPRT *__xprt, xdrproc_t __xdr_results,
extern void	svcerr_decode (SVCXPRT *__xprt) __THROW;
extern void	svcerr_weakauth (SVCXPRT *__xprt) __THROW;
extern void	svcerr_noproc (SVCXPRT *__xprt) __THROW;
extern void	svcerr_progvers (SVCXPRT *__xprt, rpcvers_t __low_vers,
extern void	svcerr_auth (SVCXPRT *__xprt, enum auth_stat __why) __THROW;
extern void	svcerr_noprog (SVCXPRT *__xprt) __THROW;
extern void	svcerr_systemerr (SVCXPRT *__xprt) __THROW;
extern struct pollfd *svc_pollfd;
extern int svc_max_pollfd;
extern fd_set svc_fdset;
extern void svc_getreq (int __rdfds) __THROW;
extern void svc_getreq_common (const int __fd) __THROW;
extern void svc_getreqset (fd_set *__readfds) __THROW;
extern void svc_getreq_poll (struct pollfd *, const int) __THROW;
extern void svc_exit (void) __THROW;
extern void svc_run (void) __THROW;
extern SVCXPRT *svcraw_create (void) __THROW;
extern SVCXPRT *svcudp_create (int __sock) __THROW;
extern SVCXPRT *svcudp_bufcreate (int __sock, u_int __sendsz, u_int __recvsz)
extern SVCXPRT *svctcp_create (int __sock, u_int __sendsize, u_int __recvsize)
extern SVCXPRT *svcfd_create (int __sock, u_int __sendsize, u_int __recvsize)
extern SVCXPRT *svcunix_create (int __sock, u_int __sendsize, u_int __recvsize,
extern bool_t	xdr_callmsg (XDR *__xdrs, struct rpc_msg *__cmsg) __THROW;
extern bool_t	xdr_callhdr (XDR *__xdrs, struct rpc_msg *__cmsg) __THROW;
extern bool_t	xdr_replymsg (XDR *__xdrs, struct rpc_msg *__rmsg) __THROW;
extern void	_seterr_reply (struct rpc_msg *__msg, struct rpc_err *__error)
extern void setrpcent (int __stayopen) __THROW;
extern void endrpcent (void) __THROW;
extern struct rpcent *getrpcbyname (const char *__name) __THROW;
extern struct rpcent *getrpcbynumber (int __number) __THROW;
extern struct rpcent *getrpcent (void) __THROW;
extern int getrpcbyname_r (const char *__name, struct rpcent *__result_buf,
extern int getrpcbynumber_r (int __number, struct rpcent *__result_buf,
extern int getrpcent_r (struct rpcent *__result_buf, char *__buffer,
extern bool_t xdr_void (void) __THROW;
extern bool_t xdr_short (XDR *__xdrs, short *__sp) __THROW;
extern bool_t xdr_u_short (XDR *__xdrs, u_short *__usp) __THROW;
extern bool_t xdr_int (XDR *__xdrs, int *__ip) __THROW;
extern bool_t xdr_u_int (XDR *__xdrs, u_int *__up) __THROW;
extern bool_t xdr_long (XDR *__xdrs, long *__lp) __THROW;
extern bool_t xdr_u_long (XDR *__xdrs, u_long *__ulp) __THROW;
extern bool_t xdr_hyper (XDR *__xdrs, quad_t *__llp) __THROW;
extern bool_t xdr_u_hyper (XDR *__xdrs, u_quad_t *__ullp) __THROW;
extern bool_t xdr_longlong_t (XDR *__xdrs, quad_t *__llp) __THROW;
extern bool_t xdr_u_longlong_t (XDR *__xdrs, u_quad_t *__ullp) __THROW;
extern bool_t xdr_int8_t (XDR *__xdrs, int8_t *__ip) __THROW;
extern bool_t xdr_uint8_t (XDR *__xdrs, uint8_t *__up) __THROW;
extern bool_t xdr_int16_t (XDR *__xdrs, int16_t *__ip) __THROW;
extern bool_t xdr_uint16_t (XDR *__xdrs, uint16_t *__up) __THROW;
extern bool_t xdr_int32_t (XDR *__xdrs, int32_t *__ip) __THROW;
extern bool_t xdr_uint32_t (XDR *__xdrs, uint32_t *__up) __THROW;
extern bool_t xdr_int64_t (XDR *__xdrs, int64_t *__ip) __THROW;
extern bool_t xdr_uint64_t (XDR *__xdrs, uint64_t *__up) __THROW;
extern bool_t xdr_quad_t (XDR *__xdrs, quad_t *__ip) __THROW;
extern bool_t xdr_u_quad_t (XDR *__xdrs, u_quad_t *__up) __THROW;
extern bool_t xdr_bool (XDR *__xdrs, bool_t *__bp) __THROW;
extern bool_t xdr_enum (XDR *__xdrs, enum_t *__ep) __THROW;
extern bool_t xdr_array (XDR * _xdrs, caddr_t *__addrp, u_int *__sizep,
extern bool_t xdr_bytes (XDR *__xdrs, char **__cpp, u_int *__sizep,
extern bool_t xdr_opaque (XDR *__xdrs, caddr_t __cp, u_int __cnt) __THROW;
extern bool_t xdr_string (XDR *__xdrs, char **__cpp, u_int __maxsize) __THROW;
extern bool_t xdr_union (XDR *__xdrs, enum_t *__dscmp, char *__unp,
extern bool_t xdr_char (XDR *__xdrs, char *__cp) __THROW;
extern bool_t xdr_u_char (XDR *__xdrs, u_char *__cp) __THROW;
extern bool_t xdr_vector (XDR *__xdrs, char *__basep, u_int __nelem,
extern bool_t xdr_float (XDR *__xdrs, float *__fp) __THROW;
extern bool_t xdr_double (XDR *__xdrs, double *__dp) __THROW;
extern bool_t xdr_reference (XDR *__xdrs, caddr_t *__xpp, u_int __size,
extern bool_t xdr_pointer (XDR *__xdrs, char **__objpp,
extern bool_t xdr_wrapstring (XDR *__xdrs, char **__cpp) __THROW;
extern u_long xdr_sizeof (xdrproc_t, void *) __THROW;
extern bool_t xdr_netobj (XDR *__xdrs, struct netobj *__np) __THROW;
extern void xdrmem_create (XDR *__xdrs, const caddr_t __addr,
extern void xdrstdio_create (XDR *__xdrs, FILE *__file, enum xdr_op __xop)
extern void xdrrec_create (XDR *__xdrs, u_int __sendsize,
extern bool_t xdrrec_endofrecord (XDR *__xdrs, bool_t __sendnow) __THROW;
extern bool_t xdrrec_skiprecord (XDR *__xdrs) __THROW;
extern bool_t xdrrec_eof (XDR *__xdrs) __THROW;
extern void xdr_free (xdrproc_t __proc, char *__objp) __THROW;
extern "C" bool_t xdr_keystatus(XDR *, keystatus*);
extern  bool_t xdr_keystatus(XDR *, keystatus*);
extern "C" bool_t xdr_keybuf(XDR *, keybuf);
extern  bool_t xdr_keybuf(XDR *, keybuf);
extern "C" bool_t xdr_netnamestr(XDR *, netnamestr*);
extern  bool_t xdr_netnamestr(XDR *, netnamestr*);
extern "C" bool_t xdr_cryptkeyarg(XDR *, cryptkeyarg*);
extern  bool_t xdr_cryptkeyarg(XDR *, cryptkeyarg*);
extern "C" bool_t xdr_cryptkeyarg2(XDR *, cryptkeyarg2*);
extern  bool_t xdr_cryptkeyarg2(XDR *, cryptkeyarg2*);
extern "C" bool_t xdr_cryptkeyres(XDR *, cryptkeyres*);
extern  bool_t xdr_cryptkeyres(XDR *, cryptkeyres*);
extern "C" bool_t xdr_unixcred(XDR *, unixcred*);
extern  bool_t xdr_unixcred(XDR *, unixcred*);
extern "C" bool_t xdr_getcredres(XDR *, getcredres*);
extern  bool_t xdr_getcredres(XDR *, getcredres*);
extern "C" bool_t xdr_key_netstarg(XDR *, key_netstarg*);
extern  bool_t xdr_key_netstarg(XDR *, key_netstarg*);
extern "C" bool_t xdr_key_netstres(XDR *, key_netstres*);
extern  bool_t xdr_key_netstres(XDR *, key_netstres*);
extern "C" keystatus * key_set_1(opaque *, CLIENT *);
extern "C" keystatus * key_set_1_svc(opaque *, struct svc_req *);
extern "C" cryptkeyres * key_encrypt_1(cryptkeyarg *, CLIENT *);
extern "C" cryptkeyres * key_encrypt_1_svc(cryptkeyarg *, struct svc_req *);
extern "C" cryptkeyres * key_decrypt_1(cryptkeyarg *, CLIENT *);
extern "C" cryptkeyres * key_decrypt_1_svc(cryptkeyarg *, struct svc_req *);
extern "C" des_block * key_gen_1(void *, CLIENT *);
extern "C" des_block * key_gen_1_svc(void *, struct svc_req *);
extern "C" getcredres * key_getcred_1(netnamestr *, CLIENT *);
extern "C" getcredres * key_getcred_1_svc(netnamestr *, struct svc_req *);
extern  keystatus * key_set_1(opaque *, CLIENT *);
extern  keystatus * key_set_1_svc(opaque *, struct svc_req *);
extern  cryptkeyres * key_encrypt_1(cryptkeyarg *, CLIENT *);
extern  cryptkeyres * key_encrypt_1_svc(cryptkeyarg *, struct svc_req *);
extern  cryptkeyres * key_decrypt_1(cryptkeyarg *, CLIENT *);
extern  cryptkeyres * key_decrypt_1_svc(cryptkeyarg *, struct svc_req *);
extern  des_block * key_gen_1(void *, CLIENT *);
extern  des_block * key_gen_1_svc(void *, struct svc_req *);
extern  getcredres * key_getcred_1(netnamestr *, CLIENT *);
extern  getcredres * key_getcred_1_svc(netnamestr *, struct svc_req *);
extern  keystatus * key_set_1();
extern  keystatus * key_set_1_svc();
extern  cryptkeyres * key_encrypt_1();
extern  cryptkeyres * key_encrypt_1_svc();
extern  cryptkeyres * key_decrypt_1();
extern  cryptkeyres * key_decrypt_1_svc();
extern  des_block * key_gen_1();
extern  des_block * key_gen_1_svc();
extern  getcredres * key_getcred_1();
extern  getcredres * key_getcred_1_svc();
extern "C" keystatus * key_set_2(opaque *, CLIENT *);
extern "C" keystatus * key_set_2_svc(opaque *, struct svc_req *);
extern "C" cryptkeyres * key_encrypt_2(cryptkeyarg *, CLIENT *);
extern "C" cryptkeyres * key_encrypt_2_svc(cryptkeyarg *, struct svc_req *);
extern "C" cryptkeyres * key_decrypt_2(cryptkeyarg *, CLIENT *);
extern "C" cryptkeyres * key_decrypt_2_svc(cryptkeyarg *, struct svc_req *);
extern "C" des_block * key_gen_2(void *, CLIENT *);
extern "C" des_block * key_gen_2_svc(void *, struct svc_req *);
extern "C" getcredres * key_getcred_2(netnamestr *, CLIENT *);
extern "C" getcredres * key_getcred_2_svc(netnamestr *, struct svc_req *);
extern "C" cryptkeyres * key_encrypt_pk_2(cryptkeyarg2 *, CLIENT *);
extern "C" cryptkeyres * key_encrypt_pk_2_svc(cryptkeyarg2 *, struct svc_req *);
extern "C" cryptkeyres * key_decrypt_pk_2(cryptkeyarg2 *, CLIENT *);
extern "C" cryptkeyres * key_decrypt_pk_2_svc(cryptkeyarg2 *, struct svc_req *);
extern "C" keystatus * key_net_put_2(key_netstarg *, CLIENT *);
extern "C" keystatus * key_net_put_2_svc(key_netstarg *, struct svc_req *);
extern "C" key_netstres * key_net_get_2(void *, CLIENT *);
extern "C" key_netstres * key_net_get_2_svc(void *, struct svc_req *);
extern "C" cryptkeyres * key_get_conv_2(opaque *, CLIENT *);
extern "C" cryptkeyres * key_get_conv_2_svc(opaque *, struct svc_req *);
extern  keystatus * key_set_2(opaque *, CLIENT *);
extern  keystatus * key_set_2_svc(opaque *, struct svc_req *);
extern  cryptkeyres * key_encrypt_2(cryptkeyarg *, CLIENT *);
extern  cryptkeyres * key_encrypt_2_svc(cryptkeyarg *, struct svc_req *);
extern  cryptkeyres * key_decrypt_2(cryptkeyarg *, CLIENT *);
extern  cryptkeyres * key_decrypt_2_svc(cryptkeyarg *, struct svc_req *);
extern  des_block * key_gen_2(void *, CLIENT *);
extern  des_block * key_gen_2_svc(void *, struct svc_req *);
extern  getcredres * key_getcred_2(netnamestr *, CLIENT *);
extern  getcredres * key_getcred_2_svc(netnamestr *, struct svc_req *);
extern  cryptkeyres * key_encrypt_pk_2(cryptkeyarg2 *, CLIENT *);
extern  cryptkeyres * key_encrypt_pk_2_svc(cryptkeyarg2 *, struct svc_req *);
extern  cryptkeyres * key_decrypt_pk_2(cryptkeyarg2 *, CLIENT *);
extern  cryptkeyres * key_decrypt_pk_2_svc(cryptkeyarg2 *, struct svc_req *);
extern  keystatus * key_net_put_2(key_netstarg *, CLIENT *);
extern  keystatus * key_net_put_2_svc(key_netstarg *, struct svc_req *);
extern  key_netstres * key_net_get_2(void *, CLIENT *);
extern  key_netstres * key_net_get_2_svc(void *, struct svc_req *);
extern  cryptkeyres * key_get_conv_2(opaque *, CLIENT *);
extern  cryptkeyres * key_get_conv_2_svc(opaque *, struct svc_req *);
extern  keystatus * key_set_2();
extern  keystatus * key_set_2_svc();
extern  cryptkeyres * key_encrypt_2();
extern  cryptkeyres * key_encrypt_2_svc();
extern  cryptkeyres * key_decrypt_2();
extern  cryptkeyres * key_decrypt_2_svc();
extern  des_block * key_gen_2();
extern  des_block * key_gen_2_svc();
extern  getcredres * key_getcred_2();
extern  getcredres * key_getcred_2_svc();
extern  cryptkeyres * key_encrypt_pk_2();
extern  cryptkeyres * key_encrypt_pk_2_svc();
extern  cryptkeyres * key_decrypt_pk_2();
extern  cryptkeyres * key_decrypt_pk_2_svc();
extern  keystatus * key_net_put_2();
extern  keystatus * key_net_put_2_svc();
extern  key_netstres * key_net_get_2();
extern  key_netstres * key_net_get_2_svc();
extern  cryptkeyres * key_get_conv_2();
extern  cryptkeyres * key_get_conv_2_svc();
extern bool_t xdr_pmap (XDR *__xdrs, struct pmap *__regs) __THROW;
extern bool_t xdr_pmaplist (XDR *__xdrs, struct pmaplist **__rp) __THROW;
extern bool_t xdr_des_block (XDR *__xdrs, des_block *__blkp) __THROW;
extern struct opaque_auth _null_auth;
extern AUTH *authunix_create (char *__machname, __uid_t __uid, __gid_t __gid,
extern AUTH *authunix_create_default (void);
extern AUTH *authnone_create (void) __THROW;
extern AUTH *authdes_create (const char *__servername, u_int __window,
extern AUTH *authdes_pk_create (const char *, netobj *, u_int,
extern int getnetname (char *) __THROW;
extern int host2netname (char *, const char *, const char *) __THROW;
extern int user2netname (char *, const uid_t, const char *) __THROW;
extern int netname2user (const char *, uid_t *, gid_t *, int *, gid_t *)
extern int netname2host (const char *, char *, const int) __THROW;
extern int key_decryptsession (char *, des_block *);
extern int key_decryptsession_pk (char *, netobj *, des_block *);
extern int key_encryptsession (char *, des_block *);
extern int key_encryptsession_pk (char *, netobj *, des_block *);
extern int key_gendes (des_block *);
extern int key_setsecret (char *);
extern int key_secretkey_is_set (void);
extern int key_get_conv (char *, des_block *);
extern bool_t xdr_opaque_auth (XDR *, struct opaque_auth *) __THROW;
extern int authdes_getucred (const struct authdes_cred * __adc,
extern int getpublickey (const char *__name, char *__key) __THROW;
extern int getsecretkey (const char *__name, char *__key,
extern int rtime (struct sockaddr_in *__addrp, struct rpc_timeval *__timep,
extern bool_t xdr_rmtcall_args (XDR *__xdrs, struct rmtcallargs *__crp)
extern bool_t xdr_rmtcallres (XDR *__xdrs, struct rmtcallres *__crp) __THROW;
extern void *alloca (size_t __size) __THROW;
extern "C"
extern "C" {
extern  getquota_rslt * rquotaproc_getquota_1(getquota_args *, CLIENT *);
extern  getquota_rslt * rquotaproc_getquota_1_svc(getquota_args *, struct svc_req *);
extern  getquota_rslt * rquotaproc_getactivequota_1(getquota_args *, CLIENT *);
extern  getquota_rslt * rquotaproc_getactivequota_1_svc(getquota_args *, struct svc_req *);
extern int rquotaprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);
extern  getquota_rslt * rquotaproc_getquota_1();
extern  getquota_rslt * rquotaproc_getquota_1_svc();
extern  getquota_rslt * rquotaproc_getactivequota_1();
extern  getquota_rslt * rquotaproc_getactivequota_1_svc();
extern int rquotaprog_1_freeresult ();
extern  bool_t xdr_getquota_args (XDR *, getquota_args*);
extern  bool_t xdr_rquota (XDR *, rquota*);
extern  bool_t xdr_gqr_status (XDR *, gqr_status*);
extern  bool_t xdr_getquota_rslt (XDR *, getquota_rslt*);
extern bool_t xdr_getquota_args ();
extern bool_t xdr_rquota ();
extern bool_t xdr_gqr_status ();
extern bool_t xdr_getquota_rslt ();
extern "C" {
extern  int * yppasswdproc_update_1(yppasswd *, CLIENT *);
extern  int * yppasswdproc_update_1_svc(yppasswd *, struct svc_req *);
extern int yppasswdprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);
extern  int * yppasswdproc_update_1();
extern  int * yppasswdproc_update_1_svc();
extern int yppasswdprog_1_freeresult ();
extern  bool_t xdr_passwd (XDR *, passwd*);
extern  bool_t xdr_yppasswd (XDR *, yppasswd*);
extern bool_t xdr_passwd ();
extern bool_t xdr_yppasswd ();
extern "C" {
extern  statstime * rstatproc_stats_3(void *, CLIENT *);
extern  statstime * rstatproc_stats_3_svc(void *, struct svc_req *);
extern  u_int * rstatproc_havedisk_3(void *, CLIENT *);
extern  u_int * rstatproc_havedisk_3_svc(void *, struct svc_req *);
extern int rstatprog_3_freeresult (SVCXPRT *, xdrproc_t, caddr_t);
extern  statstime * rstatproc_stats_3();
extern  statstime * rstatproc_stats_3_svc();
extern  u_int * rstatproc_havedisk_3();
extern  u_int * rstatproc_havedisk_3_svc();
extern int rstatprog_3_freeresult ();
extern  statsswtch * rstatproc_stats_2(void *, CLIENT *);
extern  statsswtch * rstatproc_stats_2_svc(void *, struct svc_req *);
extern  u_int * rstatproc_havedisk_2(void *, CLIENT *);
extern  u_int * rstatproc_havedisk_2_svc(void *, struct svc_req *);
extern int rstatprog_2_freeresult (SVCXPRT *, xdrproc_t, caddr_t);
extern  statsswtch * rstatproc_stats_2();
extern  statsswtch * rstatproc_stats_2_svc();
extern  u_int * rstatproc_havedisk_2();
extern  u_int * rstatproc_havedisk_2_svc();
extern int rstatprog_2_freeresult ();
extern  stats * rstatproc_stats_1(void *, CLIENT *);
extern  stats * rstatproc_stats_1_svc(void *, struct svc_req *);
extern  u_int * rstatproc_havedisk_1(void *, CLIENT *);
extern  u_int * rstatproc_havedisk_1_svc(void *, struct svc_req *);
extern int rstatprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);
extern  stats * rstatproc_stats_1();
extern  stats * rstatproc_stats_1_svc();
extern  u_int * rstatproc_havedisk_1();
extern  u_int * rstatproc_havedisk_1_svc();
extern int rstatprog_1_freeresult ();
extern  bool_t xdr_rstat_timeval (XDR *, rstat_timeval*);
extern  bool_t xdr_statstime (XDR *, statstime*);
extern  bool_t xdr_statsswtch (XDR *, statsswtch*);
extern  bool_t xdr_stats (XDR *, stats*);
extern bool_t xdr_rstat_timeval ();
extern bool_t xdr_statstime ();
extern bool_t xdr_statsswtch ();
extern bool_t xdr_stats ();
extern "C" {
extern  void * nfsproc_null_2(void *, CLIENT *);
extern  void * nfsproc_null_2_svc(void *, struct svc_req *);
extern  attrstat * nfsproc_getattr_2(nfs_fh *, CLIENT *);
extern  attrstat * nfsproc_getattr_2_svc(nfs_fh *, struct svc_req *);
extern  attrstat * nfsproc_setattr_2(sattrargs *, CLIENT *);
extern  attrstat * nfsproc_setattr_2_svc(sattrargs *, struct svc_req *);
extern  void * nfsproc_root_2(void *, CLIENT *);
extern  void * nfsproc_root_2_svc(void *, struct svc_req *);
extern  diropres * nfsproc_lookup_2(diropargs *, CLIENT *);
extern  diropres * nfsproc_lookup_2_svc(diropargs *, struct svc_req *);
extern  readlinkres * nfsproc_readlink_2(nfs_fh *, CLIENT *);
extern  readlinkres * nfsproc_readlink_2_svc(nfs_fh *, struct svc_req *);
extern  readres * nfsproc_read_2(readargs *, CLIENT *);
extern  readres * nfsproc_read_2_svc(readargs *, struct svc_req *);
extern  void * nfsproc_writecache_2(void *, CLIENT *);
extern  void * nfsproc_writecache_2_svc(void *, struct svc_req *);
extern  attrstat * nfsproc_write_2(writeargs *, CLIENT *);
extern  attrstat * nfsproc_write_2_svc(writeargs *, struct svc_req *);
extern  diropres * nfsproc_create_2(createargs *, CLIENT *);
extern  diropres * nfsproc_create_2_svc(createargs *, struct svc_req *);
extern  nfsstat * nfsproc_remove_2(diropargs *, CLIENT *);
extern  nfsstat * nfsproc_remove_2_svc(diropargs *, struct svc_req *);
extern  nfsstat * nfsproc_rename_2(renameargs *, CLIENT *);
extern  nfsstat * nfsproc_rename_2_svc(renameargs *, struct svc_req *);
extern  nfsstat * nfsproc_link_2(linkargs *, CLIENT *);
extern  nfsstat * nfsproc_link_2_svc(linkargs *, struct svc_req *);
extern  nfsstat * nfsproc_symlink_2(symlinkargs *, CLIENT *);
extern  nfsstat * nfsproc_symlink_2_svc(symlinkargs *, struct svc_req *);
extern  diropres * nfsproc_mkdir_2(createargs *, CLIENT *);
extern  diropres * nfsproc_mkdir_2_svc(createargs *, struct svc_req *);
extern  nfsstat * nfsproc_rmdir_2(diropargs *, CLIENT *);
extern  nfsstat * nfsproc_rmdir_2_svc(diropargs *, struct svc_req *);
extern  readdirres * nfsproc_readdir_2(readdirargs *, CLIENT *);
extern  readdirres * nfsproc_readdir_2_svc(readdirargs *, struct svc_req *);
extern  statfsres * nfsproc_statfs_2(nfs_fh *, CLIENT *);
extern  statfsres * nfsproc_statfs_2_svc(nfs_fh *, struct svc_req *);
extern int nfs_program_2_freeresult (SVCXPRT *, xdrproc_t, caddr_t);
extern  void * nfsproc_null_2();
extern  void * nfsproc_null_2_svc();
extern  attrstat * nfsproc_getattr_2();
extern  attrstat * nfsproc_getattr_2_svc();
extern  attrstat * nfsproc_setattr_2();
extern  attrstat * nfsproc_setattr_2_svc();
extern  void * nfsproc_root_2();
extern  void * nfsproc_root_2_svc();
extern  diropres * nfsproc_lookup_2();
extern  diropres * nfsproc_lookup_2_svc();
extern  readlinkres * nfsproc_readlink_2();
extern  readlinkres * nfsproc_readlink_2_svc();
extern  readres * nfsproc_read_2();
extern  readres * nfsproc_read_2_svc();
extern  void * nfsproc_writecache_2();
extern  void * nfsproc_writecache_2_svc();
extern  attrstat * nfsproc_write_2();
extern  attrstat * nfsproc_write_2_svc();
extern  diropres * nfsproc_create_2();
extern  diropres * nfsproc_create_2_svc();
extern  nfsstat * nfsproc_remove_2();
extern  nfsstat * nfsproc_remove_2_svc();
extern  nfsstat * nfsproc_rename_2();
extern  nfsstat * nfsproc_rename_2_svc();
extern  nfsstat * nfsproc_link_2();
extern  nfsstat * nfsproc_link_2_svc();
extern  nfsstat * nfsproc_symlink_2();
extern  nfsstat * nfsproc_symlink_2_svc();
extern  diropres * nfsproc_mkdir_2();
extern  diropres * nfsproc_mkdir_2_svc();
extern  nfsstat * nfsproc_rmdir_2();
extern  nfsstat * nfsproc_rmdir_2_svc();
extern  readdirres * nfsproc_readdir_2();
extern  readdirres * nfsproc_readdir_2_svc();
extern  statfsres * nfsproc_statfs_2();
extern  statfsres * nfsproc_statfs_2_svc();
extern int nfs_program_2_freeresult ();
extern  bool_t xdr_nfsstat (XDR *, nfsstat*);
extern  bool_t xdr_ftype (XDR *, ftype*);
extern  bool_t xdr_nfs_fh (XDR *, nfs_fh*);
extern  bool_t xdr_nfstime (XDR *, nfstime*);
extern  bool_t xdr_fattr (XDR *, fattr*);
extern  bool_t xdr_sattr (XDR *, sattr*);
extern  bool_t xdr_filename (XDR *, filename*);
extern  bool_t xdr_nfspath (XDR *, nfspath*);
extern  bool_t xdr_attrstat (XDR *, attrstat*);
extern  bool_t xdr_sattrargs (XDR *, sattrargs*);
extern  bool_t xdr_diropargs (XDR *, diropargs*);
extern  bool_t xdr_diropokres (XDR *, diropokres*);
extern  bool_t xdr_diropres (XDR *, diropres*);
extern  bool_t xdr_readlinkres (XDR *, readlinkres*);
extern  bool_t xdr_readargs (XDR *, readargs*);
extern  bool_t xdr_readokres (XDR *, readokres*);
extern  bool_t xdr_readres (XDR *, readres*);
extern  bool_t xdr_writeargs (XDR *, writeargs*);
extern  bool_t xdr_createargs (XDR *, createargs*);
extern  bool_t xdr_renameargs (XDR *, renameargs*);
extern  bool_t xdr_linkargs (XDR *, linkargs*);
extern  bool_t xdr_symlinkargs (XDR *, symlinkargs*);
extern  bool_t xdr_nfscookie (XDR *, nfscookie);
extern  bool_t xdr_readdirargs (XDR *, readdirargs*);
extern  bool_t xdr_entry (XDR *, entry*);
extern  bool_t xdr_dirlist (XDR *, dirlist*);
extern  bool_t xdr_readdirres (XDR *, readdirres*);
extern  bool_t xdr_statfsokres (XDR *, statfsokres*);
extern  bool_t xdr_statfsres (XDR *, statfsres*);
extern bool_t xdr_nfsstat ();
extern bool_t xdr_ftype ();
extern bool_t xdr_nfs_fh ();
extern bool_t xdr_nfstime ();
extern bool_t xdr_fattr ();
extern bool_t xdr_sattr ();
extern bool_t xdr_filename ();
extern bool_t xdr_nfspath ();
extern bool_t xdr_attrstat ();
extern bool_t xdr_sattrargs ();
extern bool_t xdr_diropargs ();
extern bool_t xdr_diropokres ();
extern bool_t xdr_diropres ();
extern bool_t xdr_readlinkres ();
extern bool_t xdr_readargs ();
extern bool_t xdr_readokres ();
extern bool_t xdr_readres ();
extern bool_t xdr_writeargs ();
extern bool_t xdr_createargs ();
extern bool_t xdr_renameargs ();
extern bool_t xdr_linkargs ();
extern bool_t xdr_symlinkargs ();
extern bool_t xdr_nfscookie ();
extern bool_t xdr_readdirargs ();
extern bool_t xdr_entry ();
extern bool_t xdr_dirlist ();
extern bool_t xdr_readdirres ();
extern bool_t xdr_statfsokres ();
extern bool_t xdr_statfsres ();
extern "C" {
extern "C" {
extern bool_t xdr_utmparr (XDR *xdrs, struct utmparr *objp) __THROW;
extern bool_t xdr_utmpidlearr (XDR *xdrs, struct utmpidlearr *objp) __THROW;
extern  int * rusersproc_num_3(void *, CLIENT *);
extern  int * rusersproc_num_3_svc(void *, struct svc_req *);
extern  utmp_array * rusersproc_names_3(void *, CLIENT *);
extern  utmp_array * rusersproc_names_3_svc(void *, struct svc_req *);
extern  utmp_array * rusersproc_allnames_3(void *, CLIENT *);
extern  utmp_array * rusersproc_allnames_3_svc(void *, struct svc_req *);
extern int rusersprog_3_freeresult (SVCXPRT *, xdrproc_t, caddr_t);
extern  int * rusersproc_num_3();
extern  int * rusersproc_num_3_svc();
extern  utmp_array * rusersproc_names_3();
extern  utmp_array * rusersproc_names_3_svc();
extern  utmp_array * rusersproc_allnames_3();
extern  utmp_array * rusersproc_allnames_3_svc();
extern int rusersprog_3_freeresult ();
extern  bool_t xdr_rusers_utmp (XDR *, rusers_utmp*);
extern  bool_t xdr_utmp_array (XDR *, utmp_array*);
extern bool_t xdr_rusers_utmp ();
extern bool_t xdr_utmp_array ();
extern "C" {
extern  void * mountproc_null_1(void *, CLIENT *);
extern  void * mountproc_null_1_svc(void *, struct svc_req *);
extern  fhstatus * mountproc_mnt_1(dirpath *, CLIENT *);
extern  fhstatus * mountproc_mnt_1_svc(dirpath *, struct svc_req *);
extern  mountlist * mountproc_dump_1(void *, CLIENT *);
extern  mountlist * mountproc_dump_1_svc(void *, struct svc_req *);
extern  void * mountproc_umnt_1(dirpath *, CLIENT *);
extern  void * mountproc_umnt_1_svc(dirpath *, struct svc_req *);
extern  void * mountproc_umntall_1(void *, CLIENT *);
extern  void * mountproc_umntall_1_svc(void *, struct svc_req *);
extern  exports * mountproc_export_1(void *, CLIENT *);
extern  exports * mountproc_export_1_svc(void *, struct svc_req *);
extern  exports * mountproc_exportall_1(void *, CLIENT *);
extern  exports * mountproc_exportall_1_svc(void *, struct svc_req *);
extern int mountprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);
extern  void * mountproc_null_1();
extern  void * mountproc_null_1_svc();
extern  fhstatus * mountproc_mnt_1();
extern  fhstatus * mountproc_mnt_1_svc();
extern  mountlist * mountproc_dump_1();
extern  mountlist * mountproc_dump_1_svc();
extern  void * mountproc_umnt_1();
extern  void * mountproc_umnt_1_svc();
extern  void * mountproc_umntall_1();
extern  void * mountproc_umntall_1_svc();
extern  exports * mountproc_export_1();
extern  exports * mountproc_export_1_svc();
extern  exports * mountproc_exportall_1();
extern  exports * mountproc_exportall_1_svc();
extern int mountprog_1_freeresult ();
extern  bool_t xdr_fhandle (XDR *, fhandle);
extern  bool_t xdr_fhstatus (XDR *, fhstatus*);
extern  bool_t xdr_dirpath (XDR *, dirpath*);
extern  bool_t xdr_name (XDR *, name*);
extern  bool_t xdr_mountlist (XDR *, mountlist*);
extern  bool_t xdr_mountbody (XDR *, mountbody*);
extern  bool_t xdr_groups (XDR *, groups*);
extern  bool_t xdr_groupnode (XDR *, groupnode*);
extern  bool_t xdr_exports (XDR *, exports*);
extern  bool_t xdr_exportnode (XDR *, exportnode*);
extern bool_t xdr_fhandle ();
extern bool_t xdr_fhstatus ();
extern bool_t xdr_dirpath ();
extern bool_t xdr_name ();
extern bool_t xdr_mountlist ();
extern bool_t xdr_mountbody ();
extern bool_t xdr_groups ();
extern bool_t xdr_groupnode ();
extern bool_t xdr_exports ();
extern bool_t xdr_exportnode ();
extern int yp_bind (const char *) __THROW;
extern void yp_unbind (const char *) __THROW;
extern int yp_get_default_domain (char **) __THROW;
extern int yp_match (const char *, const char *, const char *,
extern int yp_first (const char *, const char *, char **,
extern int yp_next (const char *, const char *, const char *,
extern int yp_master (const char *, const char *, char **) __THROW;
extern int yp_order (const char *, const char *, unsigned int *) __THROW;
extern int yp_all (const char *, const char *,
extern const char *yperr_string (const int) __THROW;
extern const char *ypbinderr_string (const int) __THROW;
extern int ypprot_err (const int) __THROW;
extern int yp_update (char *, char *, unsigned int,  char *,
extern int yp_maplist (const char *, struct ypmaplist **) __THROW;
extern int __yp_check (char **) __THROW;
extern "C" {
extern  void * sprayproc_spray_1(sprayarr *, CLIENT *);
extern  void * sprayproc_spray_1_svc(sprayarr *, struct svc_req *);
extern  spraycumul * sprayproc_get_1(void *, CLIENT *);
extern  spraycumul * sprayproc_get_1_svc(void *, struct svc_req *);
extern  void * sprayproc_clear_1(void *, CLIENT *);
extern  void * sprayproc_clear_1_svc(void *, struct svc_req *);
extern int sprayprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);
extern  void * sprayproc_spray_1();
extern  void * sprayproc_spray_1_svc();
extern  spraycumul * sprayproc_get_1();
extern  spraycumul * sprayproc_get_1_svc();
extern  void * sprayproc_clear_1();
extern  void * sprayproc_clear_1_svc();
extern int sprayprog_1_freeresult ();
extern  bool_t xdr_spraytimeval (XDR *, spraytimeval*);
extern  bool_t xdr_spraycumul (XDR *, spraycumul*);
extern  bool_t xdr_sprayarr (XDR *, sprayarr*);
extern bool_t xdr_spraytimeval ();
extern bool_t xdr_spraycumul ();
extern bool_t xdr_sprayarr ();
extern  void *ypproc_null_2 (void *, CLIENT *);
extern  void *ypproc_null_2_svc (void *, struct svc_req *);
extern  bool_t *ypproc_domain_2 (domainname *, CLIENT *);
extern  bool_t *ypproc_domain_2_svc (domainname *, struct svc_req *);
extern  bool_t *ypproc_domain_nonack_2 (domainname *, CLIENT *);
extern  bool_t *ypproc_domain_nonack_2_svc (domainname *, struct svc_req *);
extern  ypresp_val *ypproc_match_2 (ypreq_key *, CLIENT *);
extern  ypresp_val *ypproc_match_2_svc (ypreq_key *, struct svc_req *);
extern  ypresp_key_val *ypproc_first_2 (ypreq_key *, CLIENT *);
extern  ypresp_key_val *ypproc_first_2_svc (ypreq_key *, struct svc_req *);
extern  ypresp_key_val *ypproc_next_2 (ypreq_key *, CLIENT *);
extern  ypresp_key_val *ypproc_next_2_svc (ypreq_key *, struct svc_req *);
extern  ypresp_xfr *ypproc_xfr_2 (ypreq_xfr *, CLIENT *);
extern  ypresp_xfr *ypproc_xfr_2_svc (ypreq_xfr *, struct svc_req *);
extern  void *ypproc_clear_2 (void *, CLIENT *);
extern  void *ypproc_clear_2_svc (void *, struct svc_req *);
extern  ypresp_all *ypproc_all_2 (ypreq_nokey *, CLIENT *);
extern  ypresp_all *ypproc_all_2_svc (ypreq_nokey *, struct svc_req *);
extern  ypresp_master *ypproc_master_2 (ypreq_nokey *, CLIENT *);
extern  ypresp_master *ypproc_master_2_svc (ypreq_nokey *, struct svc_req *);
extern  ypresp_order *ypproc_order_2 (ypreq_nokey *, CLIENT *);
extern  ypresp_order *ypproc_order_2_svc (ypreq_nokey *, struct svc_req *);
extern  ypresp_maplist *ypproc_maplist_2 (domainname *, CLIENT *);
extern  ypresp_maplist *ypproc_maplist_2_svc (domainname *, struct svc_req *);
extern int ypprog_2_freeresult (SVCXPRT *, xdrproc_t, caddr_t);
extern  void *yppushproc_null_1 (void *, CLIENT *);
extern  void *yppushproc_null_1_svc (void *, struct svc_req *);
extern  void *yppushproc_xfrresp_1 (yppushresp_xfr *, CLIENT *);
extern  void *yppushproc_xfrresp_1_svc (yppushresp_xfr *, struct svc_req *);
extern int yppush_xfrrespprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);
extern  void *ypbindproc_null_2 (void *, CLIENT *);
extern  void *ypbindproc_null_2_svc (void *, struct svc_req *);
extern  ypbind_resp *ypbindproc_domain_2 (domainname *, CLIENT *);
extern  ypbind_resp *ypbindproc_domain_2_svc (domainname *, struct svc_req *);
extern  void *ypbindproc_setdom_2 (ypbind_setdom *, CLIENT *);
extern  void *ypbindproc_setdom_2_svc (ypbind_setdom *, struct svc_req *);
extern int ypbindprog_2_freeresult (SVCXPRT *, xdrproc_t, caddr_t);
extern  bool_t xdr_ypstat (XDR *, ypstat*);
extern  bool_t xdr_ypxfrstat (XDR *, ypxfrstat*);
extern  bool_t xdr_domainname (XDR *, domainname*);
extern  bool_t xdr_mapname (XDR *, mapname*);
extern  bool_t xdr_peername (XDR *, peername*);
extern  bool_t xdr_keydat (XDR *, keydat*);
extern  bool_t xdr_valdat (XDR *, valdat*);
extern  bool_t xdr_ypmap_parms (XDR *, ypmap_parms*);
extern  bool_t xdr_ypreq_key (XDR *, ypreq_key*);
extern  bool_t xdr_ypreq_nokey (XDR *, ypreq_nokey*);
extern  bool_t xdr_ypreq_xfr (XDR *, ypreq_xfr*);
extern  bool_t xdr_ypresp_val (XDR *, ypresp_val*);
extern  bool_t xdr_ypresp_key_val (XDR *, ypresp_key_val*);
extern  bool_t xdr_ypresp_master (XDR *, ypresp_master*);
extern  bool_t xdr_ypresp_order (XDR *, ypresp_order*);
extern  bool_t xdr_ypresp_all (XDR *, ypresp_all*);
extern  bool_t xdr_ypresp_xfr (XDR *, ypresp_xfr*);
extern  bool_t xdr_ypmaplist (XDR *, ypmaplist*);
extern  bool_t xdr_ypresp_maplist (XDR *, ypresp_maplist*);
extern  bool_t xdr_yppush_status (XDR *, yppush_status*);
extern  bool_t xdr_yppushresp_xfr (XDR *, yppushresp_xfr*);
extern  bool_t xdr_ypbind_resptype (XDR *, ypbind_resptype*);
extern  bool_t xdr_ypbind_binding (XDR *, ypbind_binding*);
extern  bool_t xdr_ypbind_resp (XDR *, ypbind_resp*);
extern  bool_t xdr_ypbind_setdom (XDR *, ypbind_setdom*);
extern  bool_t * cbproc_receive_1 (cback_data *, CLIENT *) __THROW;
extern  bool_t * cbproc_receive_1_svc (cback_data *, struct svc_req *) __THROW;
extern  void * cbproc_finish_1 (void *, CLIENT *) __THROW;
extern  void * cbproc_finish_1_svc (void *, struct svc_req *) __THROW;
extern  void * cbproc_error_1 (nis_error *, CLIENT *) __THROW;
extern  void * cbproc_error_1_svc (nis_error *, struct svc_req *) __THROW;
extern int cb_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t) __THROW;
extern  bool_t xdr_obj_p (XDR *, obj_p*) __THROW;
extern  bool_t xdr_cback_data (XDR *, cback_data*) __THROW;
extern  nis_result * nis_lookup_3 (ns_request *, CLIENT *) __THROW;
extern  nis_result * nis_lookup_3_svc (ns_request *, struct svc_req *) __THROW;
extern  nis_result * nis_add_3 (ns_request *, CLIENT *) __THROW;
extern  nis_result * nis_add_3_svc (ns_request *, struct svc_req *) __THROW;
extern  nis_result * nis_modify_3 (ns_request *, CLIENT *) __THROW;
extern  nis_result * nis_modify_3_svc (ns_request *, struct svc_req *) __THROW;
extern  nis_result * nis_remove_3 (ns_request *, CLIENT *) __THROW;
extern  nis_result * nis_remove_3_svc (ns_request *, struct svc_req *) __THROW;
extern  nis_result * nis_iblist_3 (ib_request *, CLIENT *) __THROW;
extern  nis_result * nis_iblist_3_svc (ib_request *, struct svc_req *) __THROW;
extern  nis_result * nis_ibadd_3 (ib_request *, CLIENT *) __THROW;
extern  nis_result * nis_ibadd_3_svc (ib_request *, struct svc_req *) __THROW;
extern  nis_result * nis_ibmodify_3 (ib_request *, CLIENT *) __THROW;
extern  nis_result * nis_ibmodify_3_svc (ib_request *, struct svc_req *)
extern  nis_result * nis_ibremove_3 (ib_request *, CLIENT *) __THROW;
extern  nis_result * nis_ibremove_3_svc (ib_request *, struct svc_req *)
extern  nis_result * nis_ibfirst_3 (ib_request *, CLIENT *) __THROW;
extern  nis_result * nis_ibfirst_3_svc (ib_request *, struct svc_req *)
extern  nis_result * nis_ibnext_3 (ib_request *, CLIENT *) __THROW;
extern  nis_result * nis_ibnext_3_svc (ib_request *, struct svc_req *) __THROW;
extern  fd_result * nis_finddirectory_3 (fd_args *, CLIENT *) __THROW;
extern  fd_result * nis_finddirectory_3_svc (fd_args *,
extern  nis_taglist * nis_status_3 (nis_taglist *, CLIENT *) __THROW;
extern  nis_taglist * nis_status_3_svc (nis_taglist *, struct svc_req *)
extern  log_result * nis_dumplog_3 (dump_args *, CLIENT *) __THROW;
extern  log_result * nis_dumplog_3_svc (dump_args *, struct svc_req *) __THROW;
extern  log_result * nis_dump_3 (dump_args *, CLIENT *) __THROW;
extern  log_result * nis_dump_3_svc (dump_args *, struct svc_req *) __THROW;
extern  bool_t * nis_callback_3 (netobj *, CLIENT *) __THROW;
extern  bool_t * nis_callback_3_svc (netobj *, struct svc_req *) __THROW;
extern  uint32_t * nis_cptime_3 (nis_name *, CLIENT *) __THROW;
extern  uint32_t * nis_cptime_3_svc (nis_name *, struct svc_req *) __THROW;
extern  cp_result * nis_checkpoint_3 (nis_name *, CLIENT *) __THROW;
extern  cp_result * nis_checkpoint_3_svc (nis_name *, struct svc_req *)
extern  void * nis_ping_3 (ping_args *, CLIENT *) __THROW;
extern  void * nis_ping_3_svc (ping_args *, struct svc_req *) __THROW;
extern  nis_taglist * nis_servstate_3 (nis_taglist *, CLIENT *) __THROW;
extern  nis_taglist * nis_servstate_3_svc (nis_taglist *,
extern  nis_error * nis_mkdir_3 (nis_name *, CLIENT *) __THROW;
extern  nis_error * nis_mkdir_3_svc (nis_name *, struct svc_req *) __THROW;
extern  nis_error * nis_rmdir_3 (nis_name *, CLIENT *) __THROW;
extern  nis_error * nis_rmdir_3_svc (nis_name *, struct svc_req *) __THROW;
extern  nis_error * nis_updkeys_3 (nis_name *, CLIENT *) __THROW;
extern  nis_error * nis_updkeys_3_svc (nis_name *, struct svc_req *) __THROW;
extern  bool_t xdr_yp_buf (XDR *, yp_buf*);
extern  bool_t xdr_ypupdate_args (XDR *, ypupdate_args*);
extern  bool_t xdr_ypdelete_args (XDR *, ypdelete_args*);
extern  u_int * ypu_change_1 (ypupdate_args *, CLIENT *);
extern  u_int * ypu_change_1_svc (ypupdate_args *, struct svc_req *);
extern  u_int * ypu_insert_1 (ypupdate_args *, CLIENT *);
extern  u_int * ypu_insert_1_svc (ypupdate_args *, struct svc_req *);
extern  u_int * ypu_delete_1 (ypdelete_args *, CLIENT *);
extern  u_int * ypu_delete_1_svc (ypdelete_args *, struct svc_req *);
extern  u_int * ypu_store_1 (ypupdate_args *, CLIENT *);
extern  u_int * ypu_store_1_svc (ypupdate_args *, struct svc_req *);
extern "C" {
extern "C" {
extern  rex_result * rexproc_start_1(rex_start *, CLIENT *);
extern  rex_result * rexproc_start_1_svc(rex_start *, struct svc_req *);
extern  rex_result * rexproc_wait_1(void *, CLIENT *);
extern  rex_result * rexproc_wait_1_svc(void *, struct svc_req *);
extern  void * rexproc_modes_1(rex_ttymode *, CLIENT *);
extern  void * rexproc_modes_1_svc(rex_ttymode *, struct svc_req *);
extern  void * rexproc_winch_1(rex_ttysize *, CLIENT *);
extern  void * rexproc_winch_1_svc(rex_ttysize *, struct svc_req *);
extern  void * rexproc_signal_1(int *, CLIENT *);
extern  void * rexproc_signal_1_svc(int *, struct svc_req *);
extern int rexprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);
extern  rex_result * rexproc_start_1();
extern  rex_result * rexproc_start_1_svc();
extern  rex_result * rexproc_wait_1();
extern  rex_result * rexproc_wait_1_svc();
extern  void * rexproc_modes_1();
extern  void * rexproc_modes_1_svc();
extern  void * rexproc_winch_1();
extern  void * rexproc_winch_1_svc();
extern  void * rexproc_signal_1();
extern  void * rexproc_signal_1_svc();
extern int rexprog_1_freeresult ();
extern  bool_t xdr_rexstring (XDR *, rexstring*);
extern  bool_t xdr_rex_start (XDR *, rex_start*);
extern  bool_t xdr_rex_result (XDR *, rex_result*);
extern  bool_t xdr_sgttyb (XDR *, sgttyb*);
extern  bool_t xdr_tchars (XDR *, tchars*);
extern  bool_t xdr_ltchars (XDR *, ltchars*);
extern  bool_t xdr_rex_ttysize (XDR *, rex_ttysize*);
extern  bool_t xdr_rex_ttymode (XDR *, rex_ttymode*);
extern bool_t xdr_rexstring ();
extern bool_t xdr_rex_start ();
extern bool_t xdr_rex_result ();
extern bool_t xdr_sgttyb ();
extern bool_t xdr_tchars ();
extern bool_t xdr_ltchars ();
extern bool_t xdr_rex_ttysize ();
extern bool_t xdr_rex_ttymode ();
extern "C" {
extern  keystatus * key_set_1(char *, CLIENT *);
extern  keystatus * key_set_1_svc(char *, struct svc_req *);
extern  cryptkeyres * key_encrypt_1(cryptkeyarg *, CLIENT *);
extern  cryptkeyres * key_encrypt_1_svc(cryptkeyarg *, struct svc_req *);
extern  cryptkeyres * key_decrypt_1(cryptkeyarg *, CLIENT *);
extern  cryptkeyres * key_decrypt_1_svc(cryptkeyarg *, struct svc_req *);
extern  des_block * key_gen_1(void *, CLIENT *);
extern  des_block * key_gen_1_svc(void *, struct svc_req *);
extern  getcredres * key_getcred_1(netnamestr *, CLIENT *);
extern  getcredres * key_getcred_1_svc(netnamestr *, struct svc_req *);
extern int key_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);
extern  keystatus * key_set_1();
extern  keystatus * key_set_1_svc();
extern  cryptkeyres * key_encrypt_1();
extern  cryptkeyres * key_encrypt_1_svc();
extern  cryptkeyres * key_decrypt_1();
extern  cryptkeyres * key_decrypt_1_svc();
extern  des_block * key_gen_1();
extern  des_block * key_gen_1_svc();
extern  getcredres * key_getcred_1();
extern  getcredres * key_getcred_1_svc();
extern int key_prog_1_freeresult ();
extern  keystatus * key_set_2(char *, CLIENT *);
extern  keystatus * key_set_2_svc(char *, struct svc_req *);
extern  cryptkeyres * key_encrypt_2(cryptkeyarg *, CLIENT *);
extern  cryptkeyres * key_encrypt_2_svc(cryptkeyarg *, struct svc_req *);
extern  cryptkeyres * key_decrypt_2(cryptkeyarg *, CLIENT *);
extern  cryptkeyres * key_decrypt_2_svc(cryptkeyarg *, struct svc_req *);
extern  des_block * key_gen_2(void *, CLIENT *);
extern  des_block * key_gen_2_svc(void *, struct svc_req *);
extern  getcredres * key_getcred_2(netnamestr *, CLIENT *);
extern  getcredres * key_getcred_2_svc(netnamestr *, struct svc_req *);
extern  cryptkeyres * key_encrypt_pk_2(cryptkeyarg2 *, CLIENT *);
extern  cryptkeyres * key_encrypt_pk_2_svc(cryptkeyarg2 *, struct svc_req *);
extern  cryptkeyres * key_decrypt_pk_2(cryptkeyarg2 *, CLIENT *);
extern  cryptkeyres * key_decrypt_pk_2_svc(cryptkeyarg2 *, struct svc_req *);
extern  keystatus * key_net_put_2(key_netstarg *, CLIENT *);
extern  keystatus * key_net_put_2_svc(key_netstarg *, struct svc_req *);
extern  key_netstres * key_net_get_2(void *, CLIENT *);
extern  key_netstres * key_net_get_2_svc(void *, struct svc_req *);
extern  cryptkeyres * key_get_conv_2(char *, CLIENT *);
extern  cryptkeyres * key_get_conv_2_svc(char *, struct svc_req *);
extern int key_prog_2_freeresult (SVCXPRT *, xdrproc_t, caddr_t);
extern  keystatus * key_set_2();
extern  keystatus * key_set_2_svc();
extern  cryptkeyres * key_encrypt_2();
extern  cryptkeyres * key_encrypt_2_svc();
extern  cryptkeyres * key_decrypt_2();
extern  cryptkeyres * key_decrypt_2_svc();
extern  des_block * key_gen_2();
extern  des_block * key_gen_2_svc();
extern  getcredres * key_getcred_2();
extern  getcredres * key_getcred_2_svc();
extern  cryptkeyres * key_encrypt_pk_2();
extern  cryptkeyres * key_encrypt_pk_2_svc();
extern  cryptkeyres * key_decrypt_pk_2();
extern  cryptkeyres * key_decrypt_pk_2_svc();
extern  keystatus * key_net_put_2();
extern  keystatus * key_net_put_2_svc();
extern  key_netstres * key_net_get_2();
extern  key_netstres * key_net_get_2_svc();
extern  cryptkeyres * key_get_conv_2();
extern  cryptkeyres * key_get_conv_2_svc();
extern int key_prog_2_freeresult ();
extern  bool_t xdr_keystatus (XDR *, keystatus*);
extern  bool_t xdr_keybuf (XDR *, keybuf);
extern  bool_t xdr_netnamestr (XDR *, netnamestr*);
extern  bool_t xdr_cryptkeyarg (XDR *, cryptkeyarg*);
extern  bool_t xdr_cryptkeyarg2 (XDR *, cryptkeyarg2*);
extern  bool_t xdr_cryptkeyres (XDR *, cryptkeyres*);
extern  bool_t xdr_unixcred (XDR *, unixcred*);
extern  bool_t xdr_getcredres (XDR *, getcredres*);
extern  bool_t xdr_key_netstarg (XDR *, key_netstarg*);
extern  bool_t xdr_key_netstres (XDR *, key_netstres*);
extern bool_t xdr_keystatus ();
extern bool_t xdr_keybuf ();
extern bool_t xdr_netnamestr ();
extern bool_t xdr_cryptkeyarg ();
extern bool_t xdr_cryptkeyarg2 ();
extern bool_t xdr_cryptkeyres ();
extern bool_t xdr_unixcred ();
extern bool_t xdr_getcredres ();
extern bool_t xdr_key_netstarg ();
extern bool_t xdr_key_netstres ();
extern "C" {
extern  klm_testrply * klm_test_1(struct klm_testargs *, CLIENT *);
extern  klm_testrply * klm_test_1_svc(struct klm_testargs *, struct svc_req *);
extern  klm_stat * klm_lock_1(struct klm_lockargs *, CLIENT *);
extern  klm_stat * klm_lock_1_svc(struct klm_lockargs *, struct svc_req *);
extern  klm_stat * klm_cancel_1(struct klm_lockargs *, CLIENT *);
extern  klm_stat * klm_cancel_1_svc(struct klm_lockargs *, struct svc_req *);
extern  klm_stat * klm_unlock_1(struct klm_unlockargs *, CLIENT *);
extern  klm_stat * klm_unlock_1_svc(struct klm_unlockargs *, struct svc_req *);
extern int klm_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);
extern  klm_testrply * klm_test_1();
extern  klm_testrply * klm_test_1_svc();
extern  klm_stat * klm_lock_1();
extern  klm_stat * klm_lock_1_svc();
extern  klm_stat * klm_cancel_1();
extern  klm_stat * klm_cancel_1_svc();
extern  klm_stat * klm_unlock_1();
extern  klm_stat * klm_unlock_1_svc();
extern int klm_prog_1_freeresult ();
extern  bool_t xdr_klm_stats (XDR *, klm_stats*);
extern  bool_t xdr_klm_lock (XDR *, klm_lock*);
extern  bool_t xdr_klm_holder (XDR *, klm_holder*);
extern  bool_t xdr_klm_stat (XDR *, klm_stat*);
extern  bool_t xdr_klm_testrply (XDR *, klm_testrply*);
extern  bool_t xdr_klm_lockargs (XDR *, klm_lockargs*);
extern  bool_t xdr_klm_testargs (XDR *, klm_testargs*);
extern  bool_t xdr_klm_unlockargs (XDR *, klm_unlockargs*);
extern bool_t xdr_klm_stats ();
extern bool_t xdr_klm_lock ();
extern bool_t xdr_klm_holder ();
extern bool_t xdr_klm_stat ();
extern bool_t xdr_klm_testrply ();
extern bool_t xdr_klm_lockargs ();
extern bool_t xdr_klm_testargs ();
extern bool_t xdr_klm_unlockargs ();
extern "C" {
extern  bp_whoami_res * bootparamproc_whoami_1(bp_whoami_arg *, CLIENT *);
extern  bp_whoami_res * bootparamproc_whoami_1_svc(bp_whoami_arg *, struct svc_req *);
extern  bp_getfile_res * bootparamproc_getfile_1(bp_getfile_arg *, CLIENT *);
extern  bp_getfile_res * bootparamproc_getfile_1_svc(bp_getfile_arg *, struct svc_req *);
extern int bootparamprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);
extern  bp_whoami_res * bootparamproc_whoami_1();
extern  bp_whoami_res * bootparamproc_whoami_1_svc();
extern  bp_getfile_res * bootparamproc_getfile_1();
extern  bp_getfile_res * bootparamproc_getfile_1_svc();
extern int bootparamprog_1_freeresult ();
extern  bool_t xdr_bp_machine_name_t (XDR *, bp_machine_name_t*);
extern  bool_t xdr_bp_path_t (XDR *, bp_path_t*);
extern  bool_t xdr_bp_fileid_t (XDR *, bp_fileid_t*);
extern  bool_t xdr_ip_addr_t (XDR *, ip_addr_t*);
extern  bool_t xdr_bp_address (XDR *, bp_address*);
extern  bool_t xdr_bp_whoami_arg (XDR *, bp_whoami_arg*);
extern  bool_t xdr_bp_whoami_res (XDR *, bp_whoami_res*);
extern  bool_t xdr_bp_getfile_arg (XDR *, bp_getfile_arg*);
extern  bool_t xdr_bp_getfile_res (XDR *, bp_getfile_res*);
extern bool_t xdr_bp_machine_name_t ();
extern bool_t xdr_bp_path_t ();
extern bool_t xdr_bp_fileid_t ();
extern bool_t xdr_ip_addr_t ();
extern bool_t xdr_bp_address ();
extern bool_t xdr_bp_whoami_arg ();
extern bool_t xdr_bp_whoami_res ();
extern bool_t xdr_bp_getfile_arg ();
extern bool_t xdr_bp_getfile_res ();
extern "C" {
extern  struct sm_stat_res * sm_stat_1(struct sm_name *, CLIENT *);
extern  struct sm_stat_res * sm_stat_1_svc(struct sm_name *, struct svc_req *);
extern  struct sm_stat_res * sm_mon_1(struct mon *, CLIENT *);
extern  struct sm_stat_res * sm_mon_1_svc(struct mon *, struct svc_req *);
extern  struct sm_stat * sm_unmon_1(struct mon_id *, CLIENT *);
extern  struct sm_stat * sm_unmon_1_svc(struct mon_id *, struct svc_req *);
extern  struct sm_stat * sm_unmon_all_1(struct my_id *, CLIENT *);
extern  struct sm_stat * sm_unmon_all_1_svc(struct my_id *, struct svc_req *);
extern  void * sm_simu_crash_1(void *, CLIENT *);
extern  void * sm_simu_crash_1_svc(void *, struct svc_req *);
extern int sm_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);
extern  struct sm_stat_res * sm_stat_1();
extern  struct sm_stat_res * sm_stat_1_svc();
extern  struct sm_stat_res * sm_mon_1();
extern  struct sm_stat_res * sm_mon_1_svc();
extern  struct sm_stat * sm_unmon_1();
extern  struct sm_stat * sm_unmon_1_svc();
extern  struct sm_stat * sm_unmon_all_1();
extern  struct sm_stat * sm_unmon_all_1_svc();
extern  void * sm_simu_crash_1();
extern  void * sm_simu_crash_1_svc();
extern int sm_prog_1_freeresult ();
extern  bool_t xdr_sm_name (XDR *, sm_name*);
extern  bool_t xdr_my_id (XDR *, my_id*);
extern  bool_t xdr_mon_id (XDR *, mon_id*);
extern  bool_t xdr_mon (XDR *, mon*);
extern  bool_t xdr_sm_stat (XDR *, sm_stat*);
extern  bool_t xdr_res (XDR *, res*);
extern  bool_t xdr_sm_stat_res (XDR *, sm_stat_res*);
extern  bool_t xdr_status (XDR *, status*);
extern bool_t xdr_sm_name ();
extern bool_t xdr_my_id ();
extern bool_t xdr_mon_id ();
extern bool_t xdr_mon ();
extern bool_t xdr_sm_stat ();
extern bool_t xdr_res ();
extern bool_t xdr_sm_stat_res ();
extern bool_t xdr_status ();
extern "C" {
extern  nlm_testres * nlm_test_1(struct nlm_testargs *, CLIENT *);
extern  nlm_testres * nlm_test_1_svc(struct nlm_testargs *, struct svc_req *);
extern  nlm_res * nlm_lock_1(struct nlm_lockargs *, CLIENT *);
extern  nlm_res * nlm_lock_1_svc(struct nlm_lockargs *, struct svc_req *);
extern  nlm_res * nlm_cancel_1(struct nlm_cancargs *, CLIENT *);
extern  nlm_res * nlm_cancel_1_svc(struct nlm_cancargs *, struct svc_req *);
extern  nlm_res * nlm_unlock_1(struct nlm_unlockargs *, CLIENT *);
extern  nlm_res * nlm_unlock_1_svc(struct nlm_unlockargs *, struct svc_req *);
extern  nlm_res * nlm_granted_1(struct nlm_testargs *, CLIENT *);
extern  nlm_res * nlm_granted_1_svc(struct nlm_testargs *, struct svc_req *);
extern  void * nlm_test_msg_1(struct nlm_testargs *, CLIENT *);
extern  void * nlm_test_msg_1_svc(struct nlm_testargs *, struct svc_req *);
extern  void * nlm_lock_msg_1(struct nlm_lockargs *, CLIENT *);
extern  void * nlm_lock_msg_1_svc(struct nlm_lockargs *, struct svc_req *);
extern  void * nlm_cancel_msg_1(struct nlm_cancargs *, CLIENT *);
extern  void * nlm_cancel_msg_1_svc(struct nlm_cancargs *, struct svc_req *);
extern  void * nlm_unlock_msg_1(struct nlm_unlockargs *, CLIENT *);
extern  void * nlm_unlock_msg_1_svc(struct nlm_unlockargs *, struct svc_req *);
extern  void * nlm_granted_msg_1(struct nlm_testargs *, CLIENT *);
extern  void * nlm_granted_msg_1_svc(struct nlm_testargs *, struct svc_req *);
extern  void * nlm_test_res_1(nlm_testres *, CLIENT *);
extern  void * nlm_test_res_1_svc(nlm_testres *, struct svc_req *);
extern  void * nlm_lock_res_1(nlm_res *, CLIENT *);
extern  void * nlm_lock_res_1_svc(nlm_res *, struct svc_req *);
extern  void * nlm_cancel_res_1(nlm_res *, CLIENT *);
extern  void * nlm_cancel_res_1_svc(nlm_res *, struct svc_req *);
extern  void * nlm_unlock_res_1(nlm_res *, CLIENT *);
extern  void * nlm_unlock_res_1_svc(nlm_res *, struct svc_req *);
extern  void * nlm_granted_res_1(nlm_res *, CLIENT *);
extern  void * nlm_granted_res_1_svc(nlm_res *, struct svc_req *);
extern int nlm_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);
extern  nlm_testres * nlm_test_1();
extern  nlm_testres * nlm_test_1_svc();
extern  nlm_res * nlm_lock_1();
extern  nlm_res * nlm_lock_1_svc();
extern  nlm_res * nlm_cancel_1();
extern  nlm_res * nlm_cancel_1_svc();
extern  nlm_res * nlm_unlock_1();
extern  nlm_res * nlm_unlock_1_svc();
extern  nlm_res * nlm_granted_1();
extern  nlm_res * nlm_granted_1_svc();
extern  void * nlm_test_msg_1();
extern  void * nlm_test_msg_1_svc();
extern  void * nlm_lock_msg_1();
extern  void * nlm_lock_msg_1_svc();
extern  void * nlm_cancel_msg_1();
extern  void * nlm_cancel_msg_1_svc();
extern  void * nlm_unlock_msg_1();
extern  void * nlm_unlock_msg_1_svc();
extern  void * nlm_granted_msg_1();
extern  void * nlm_granted_msg_1_svc();
extern  void * nlm_test_res_1();
extern  void * nlm_test_res_1_svc();
extern  void * nlm_lock_res_1();
extern  void * nlm_lock_res_1_svc();
extern  void * nlm_cancel_res_1();
extern  void * nlm_cancel_res_1_svc();
extern  void * nlm_unlock_res_1();
extern  void * nlm_unlock_res_1_svc();
extern  void * nlm_granted_res_1();
extern  void * nlm_granted_res_1_svc();
extern int nlm_prog_1_freeresult ();
extern  nlm_shareres * nlm_share_3(nlm_shareargs *, CLIENT *);
extern  nlm_shareres * nlm_share_3_svc(nlm_shareargs *, struct svc_req *);
extern  nlm_shareres * nlm_unshare_3(nlm_shareargs *, CLIENT *);
extern  nlm_shareres * nlm_unshare_3_svc(nlm_shareargs *, struct svc_req *);
extern  nlm_res * nlm_nm_lock_3(nlm_lockargs *, CLIENT *);
extern  nlm_res * nlm_nm_lock_3_svc(nlm_lockargs *, struct svc_req *);
extern  void * nlm_free_all_3(nlm_notify *, CLIENT *);
extern  void * nlm_free_all_3_svc(nlm_notify *, struct svc_req *);
extern int nlm_prog_3_freeresult (SVCXPRT *, xdrproc_t, caddr_t);
extern  nlm_shareres * nlm_share_3();
extern  nlm_shareres * nlm_share_3_svc();
extern  nlm_shareres * nlm_unshare_3();
extern  nlm_shareres * nlm_unshare_3_svc();
extern  nlm_res * nlm_nm_lock_3();
extern  nlm_res * nlm_nm_lock_3_svc();
extern  void * nlm_free_all_3();
extern  void * nlm_free_all_3_svc();
extern int nlm_prog_3_freeresult ();
extern  bool_t xdr_nlm_stats (XDR *, nlm_stats*);
extern  bool_t xdr_nlm_holder (XDR *, nlm_holder*);
extern  bool_t xdr_nlm_testrply (XDR *, nlm_testrply*);
extern  bool_t xdr_nlm_stat (XDR *, nlm_stat*);
extern  bool_t xdr_nlm_res (XDR *, nlm_res*);
extern  bool_t xdr_nlm_testres (XDR *, nlm_testres*);
extern  bool_t xdr_nlm_lock (XDR *, nlm_lock*);
extern  bool_t xdr_nlm_lockargs (XDR *, nlm_lockargs*);
extern  bool_t xdr_nlm_cancargs (XDR *, nlm_cancargs*);
extern  bool_t xdr_nlm_testargs (XDR *, nlm_testargs*);
extern  bool_t xdr_nlm_unlockargs (XDR *, nlm_unlockargs*);
extern  bool_t xdr_fsh_mode (XDR *, fsh_mode*);
extern  bool_t xdr_fsh_access (XDR *, fsh_access*);
extern  bool_t xdr_nlm_share (XDR *, nlm_share*);
extern  bool_t xdr_nlm_shareargs (XDR *, nlm_shareargs*);
extern  bool_t xdr_nlm_shareres (XDR *, nlm_shareres*);
extern  bool_t xdr_nlm_notify (XDR *, nlm_notify*);
extern bool_t xdr_nlm_stats ();
extern bool_t xdr_nlm_holder ();
extern bool_t xdr_nlm_testrply ();
extern bool_t xdr_nlm_stat ();
extern bool_t xdr_nlm_res ();
extern bool_t xdr_nlm_testres ();
extern bool_t xdr_nlm_lock ();
extern bool_t xdr_nlm_lockargs ();
extern bool_t xdr_nlm_cancargs ();
extern bool_t xdr_nlm_testargs ();
extern bool_t xdr_nlm_unlockargs ();
extern bool_t xdr_fsh_mode ();
extern bool_t xdr_fsh_access ();
extern bool_t xdr_nlm_share ();
extern bool_t xdr_nlm_shareargs ();
extern bool_t xdr_nlm_shareres ();
extern bool_t xdr_nlm_notify ();
extern bool_t xdr_ypreq_key (XDR *__xdrs, struct ypreq_key * __objp);
extern bool_t xdr_ypreq_nokey (XDR *__xdrs, struct ypreq_nokey * __objp);
extern bool_t xdr_ypreq_xfr (XDR *__xdrs, struct ypreq_xfr * __objp);
extern bool_t xdr_ypresp_val (XDR *__xdrs, struct ypresp_val * __objp);
extern bool_t xdr_ypresp_key_val (XDR *__xdrs, struct ypresp_key_val * __objp);
extern bool_t xdr_ypbind_resp (XDR *__xdrs, struct ypbind_resp * __objp);
extern bool_t xdr_ypbind_setdom (XDR *__xdrs, struct ypbind_setdom * __objp);
extern bool_t xdr_ypmap_parms (XDR *__xdrs, struct ypmap_parms * __objp);
extern bool_t xdr_yppushresp_xfr (XDR *__xdrs, struct yppushresp_xfr * __objp);
extern bool_t xdr_ypresp_order (XDR *__xdrs, struct ypresp_order  * __objp);
extern bool_t xdr_ypresp_master (XDR *__xdrs, struct ypresp_master * __objp);
extern bool_t xdr_ypall (XDR *__xdrs, struct ypall_callback * __objp);
extern bool_t xdr_ypresp_maplist (XDR *__xdrs, struct ypresp_maplist * __objp);
extern bool_t xdr_ypbind_binding (XDR *__xdrs, struct ypbind_binding * __objp);
extern bool_t xdr_ypbind_resptype (XDR *__xdrs, enum ypbind_resptype * __objp);
extern bool_t xdr_ypstat (XDR *__xdrs, enum ypbind_resptype * __objp);
extern bool_t xdr_ypresp_all (XDR *__xdrs, struct ypresp_all  * __objp);
extern bool_t xdr_domainname (XDR *__xdrs, char ** __objp);
extern nis_result *nis_lookup (const_nis_name name, unsigned int flags)
extern nis_result *nis_add (const_nis_name name, const nis_object *obj)
extern nis_result *nis_remove (const_nis_name name,
extern nis_result *nis_modify (const_nis_name name,
extern nis_result *nis_list (const_nis_name __name, unsigned int __flags,
extern nis_result *nis_add_entry (const_nis_name __table_name,
extern nis_result *nis_modify_entry (const_nis_name __name,
extern nis_result *nis_remove_entry (const_nis_name __table_name,
extern nis_result *nis_first_entry (const_nis_name __table_name) __THROW;
extern nis_result *nis_next_entry (const_nis_name __table_name,
extern nis_error nis_mkdir (const_nis_name __dirname,
extern nis_error nis_rmdir (const_nis_name __dirname,
extern nis_error nis_servstate (const nis_server *__machine,
extern nis_error nis_stats (const nis_server *__machine,
extern void nis_freetags (nis_tag *__tags, int __numtags) __THROW;
extern nis_server **nis_getservlist (const_nis_name __dirname) __THROW;
extern void nis_freeservlist (nis_server **__machines) __THROW;
extern nis_name nis_leaf_of (const_nis_name __name) __THROW;
extern nis_name nis_leaf_of_r (const_nis_name __name, char *__buffer,
extern nis_name nis_name_of (const_nis_name __name) __THROW;
extern nis_name nis_name_of_r (const_nis_name __name, char *__buffer,
extern nis_name nis_domain_of (const_nis_name __name) __THROW;
extern nis_name nis_domain_of_r (const_nis_name __name, char *__buffer,
extern nis_name *nis_getnames (const_nis_name __name) __THROW;
extern void nis_freenames (nis_name *__namelist) __THROW;
extern name_pos nis_dir_cmp (const_nis_name __n1, const_nis_name __n2) __THROW;
extern nis_object *nis_clone_object (const nis_object *__src,
extern void nis_destroy_object (nis_object *__obj) __THROW;
extern void nis_print_object (const nis_object *__obj) __THROW;
extern nis_name nis_local_group (void) __THROW;
extern nis_name nis_local_directory (void) __THROW;
extern nis_name nis_local_principal (void) __THROW;
extern nis_name nis_local_host (void) __THROW;
extern const char *nis_sperrno (const nis_error __status) __THROW;
extern void nis_perror (const nis_error __status, const char *__label) __THROW;
extern void nis_lerror (const nis_error __status, const char *__label) __THROW;
extern char *nis_sperror (const nis_error status, const char *__label) __THROW;
extern char *nis_sperror_r (const nis_error __status, const char *__label,
extern bool_t nis_ismember (const_nis_name __principal,
extern nis_error nis_addmember (const_nis_name __member,
extern nis_error nis_removemember (const_nis_name __member,
extern nis_error nis_creategroup (const_nis_name __group,
extern nis_error nis_destroygroup (const_nis_name __group) __THROW;
extern void nis_print_group_entry (const_nis_name __group) __THROW;
extern nis_error nis_verifygroup (const_nis_name __group) __THROW;
extern void nis_ping (const_nis_name __dirname, uint32_t __utime,
extern nis_result *nis_checkpoint (const_nis_name __dirname) __THROW;
extern void nis_print_result (const nis_result *__result) __THROW;
extern void nis_print_rights (unsigned int __rights) __THROW;
extern void nis_print_directory (const directory_obj *__dirobj) __THROW;
extern void nis_print_group (const group_obj *__grpobj) __THROW;
extern void nis_print_table (const table_obj *__tblobj) __THROW;
extern void nis_print_link (const link_obj *__lnkobj) __THROW;
extern void nis_print_entry (const entry_obj *__enobj) __THROW;
extern directory_obj *readColdStartFile (void) __THROW;
extern bool_t writeColdStartFile (const directory_obj *__dirobj) __THROW;
extern nis_object *nis_read_obj (const char *__obj) __THROW;
extern bool_t nis_write_obj (const char *__file, const nis_object *__obj) __THROW;
extern directory_obj *nis_clone_directory (const directory_obj *__src,
extern nis_result *nis_clone_result (const nis_result *__src,
extern void nis_freeresult (nis_result *__result) __THROW;
extern void nis_free_request (ib_request *__req) __THROW;
extern void nis_free_directory (directory_obj *__dirobj) __THROW;
extern void nis_free_object (nis_object *__obj) __THROW;
extern nis_name __nis_default_owner (char *) __THROW;
extern nis_name __nis_default_group (char *) __THROW;
extern uint32_t __nis_default_ttl (char *) __THROW;
extern unsigned int __nis_default_access (char *, unsigned int) __THROW;
extern fd_result *__nis_finddirectory (directory_obj *, const_nis_name) __THROW;
extern void __free_fdresult (fd_result *) __THROW;
extern uint32_t __nis_hash (const void *__keyarg, size_t __len) __THROW;
extern int __nis_lock_cache (void) __THROW;
extern int __nis_unlock_cache (void) __THROW;
extern nis_error __nisbind_create (dir_binding *, const nis_server *,
extern nis_error __nisbind_connect (dir_binding *) __THROW;
extern nis_error __nisbind_next (dir_binding *) __THROW;
extern void __nisbind_destroy (dir_binding *) __THROW;
extern nis_error __nisfind_server (const_nis_name, int, directory_obj **,
extern int SLcurses_wclrtobot (SLcurses_Window_Type *);
extern int SLcurses_wscrl (SLcurses_Window_Type *, int);
extern int SLcurses_wrefresh (SLcurses_Window_Type *);
extern int SLcurses_delwin (SLcurses_Window_Type *);
extern int SLcurses_wprintw (SLcurses_Window_Type *, char *, ...);
extern SLcurses_Window_Type *SLcurses_newwin (unsigned int, unsigned int,
extern SLcurses_Window_Type *SLcurses_subwin (SLcurses_Window_Type *,
extern int SLcurses_wnoutrefresh (SLcurses_Window_Type *);
extern int SLcurses_wclrtoeol (SLcurses_Window_Type *);
extern int SLcurses_wmove (SLcurses_Window_Type *, unsigned int, unsigned int);
extern int SLcurses_waddch (SLcurses_Window_Type *, SLtt_Char_Type);
extern int SLcurses_waddnstr (SLcurses_Window_Type *, char *, int);
extern int SLcurses_wclear (SLcurses_Window_Type *w);
extern int SLcurses_printw (char *, ...);
extern int SLcurses_mvwscanw (SLcurses_Window_Type *, unsigned int, unsigned int,
extern int SLcurses_wscanw (SLcurses_Window_Type *, char *, ...);
extern int SLcurses_scanw (char *, ...);
extern SLcurses_Window_Type *SLcurses_Stdscr;
extern int SLcurses_mvprintw (int, int, char *, ...);
extern int SLcurses_mvwprintw (SLcurses_Window_Type *, int, int, char *, ...);
extern int SLcurses_has_colors(void);
extern int SLcurses_nil (void);
extern int SLcurses_wgetch (SLcurses_Window_Type *);
extern int SLcurses_getch (void);
extern int SLcurses_wattrset (SLcurses_Window_Type *, SLtt_Char_Type);
extern int SLcurses_wattron (SLcurses_Window_Type *, SLtt_Char_Type);
extern int SLcurses_wattroff (SLcurses_Window_Type *, SLtt_Char_Type);
extern int SLcurses_start_color (void);
extern int SLcurses_nodelay (SLcurses_Window_Type *, int);
extern SLcurses_Window_Type *SLcurses_initscr (void);
extern int SLcurses_cbreak (void);
extern int SLcurses_raw (void);
extern int SLcurses_endwin (void);
extern int SLcurses_Is_Endwin;
extern SLtt_Char_Type SLcurses_Acs_Map [128];
extern int SLcurses_Num_Colors;
extern int SLcurses_wdelch (SLcurses_Window_Type *);
extern int SLcurses_winsch (SLcurses_Window_Type *, int);
extern int SLcurses_Esc_Delay;/* ESC expire time in milliseconds (ncurses compatible) */
extern int SLcurses_clearok (SLcurses_Window_Type *, int);
extern long int ulimit (int __cmd, ...) __THROW;
extern "C" {
extern int errno;
extern "C" {
extern "C" {
extern "C" {
extern Q_CORE_EXPORT const qreal qt_sine_table[QT_SINE_TABLE_SIZE];
extern "C"
extern "C" int taskLock();
extern "C" int taskUnlock();
extern "C" {
extern "C" {
extern "C" {
extern int gtty (int __fd, struct sgttyb *__params) __THROW;
extern int stty (int __fd, const struct sgttyb *__params) __THROW;
extern struct AtomicOps_x86CPUFeatureStruct AtomicOps_Internalx86CPUFeatures;
extern void setspent (void);
extern void endspent (void);
extern struct spwd *getspent (void);
extern struct spwd *getspnam (const char *__name);
extern struct spwd *sgetspent (const char *__string);
extern struct spwd *fgetspent (FILE *__stream);
extern int putspent (const struct spwd *__p, FILE *__stream);
extern int getspent_r (struct spwd *__result_buf, char *__buffer,
extern int getspnam_r (const char *__name, struct spwd *__result_buf,
extern int sgetspent_r (const char *__string, struct spwd *__result_buf,
extern int fgetspent_r (FILE *__stream, struct spwd *__result_buf,
extern int lckpwdf (void) __THROW;
extern int ulckpwdf (void) __THROW;
extern int ftw (const char *__dir, __ftw_func_t __func, int __descriptors)
extern int __REDIRECT (ftw, (const char *__dir, __ftw_func_t __func,
extern int ftw64 (const char *__dir, __ftw64_func_t __func,
extern int nftw (const char *__dir, __nftw_func_t __func, int __descriptors,
extern int __REDIRECT (nftw, (const char *__dir, __nftw_func_t __func,
extern int nftw64 (const char *__dir, __nftw64_func_t __func,
extern char *ether_ntoa (const struct ether_addr *__addr) __THROW;
extern char *ether_ntoa_r (const struct ether_addr *__addr, char *__buf)
extern struct ether_addr *ether_aton (const char *__asc) __THROW;
extern struct ether_addr *ether_aton_r (const char *__asc,
extern int ether_ntohost (char *__hostname, const struct ether_addr *__addr)
extern int ether_hostton (const char *__hostname, struct ether_addr *__addr)
extern int ether_line (const char *__line, struct ether_addr *__addr,
extern const struct in6_addr in6addr_any;        /* :: */
extern const struct in6_addr in6addr_loopback;   /* ::1 */
extern uint32_t ntohl (uint32_t __netlong) __THROW __attribute__ ((__const__));
extern uint16_t ntohs (uint16_t __netshort)
extern uint32_t htonl (uint32_t __hostlong)
extern uint16_t htons (uint16_t __hostshort)
extern int bindresvport (int __sockfd, struct sockaddr_in *__sock_in) __THROW;
extern int bindresvport6 (int __sockfd, struct sockaddr_in6 *__sock_in)
extern int inet6_option_space (int __nbytes)
extern int inet6_option_init (void *__bp, struct cmsghdr **__cmsgp,
extern int inet6_option_append (struct cmsghdr *__cmsg,
extern uint8_t *inet6_option_alloc (struct cmsghdr *__cmsg, int __datalen,
extern int inet6_option_next (const struct cmsghdr *__cmsg,
extern int inet6_option_find (const struct cmsghdr *__cmsg,
extern int inet6_opt_init (void *__extbuf, socklen_t __extlen) __THROW;
extern int inet6_opt_append (void *__extbuf, socklen_t __extlen, int __offset,
extern int inet6_opt_finish (void *__extbuf, socklen_t __extlen, int __offset)
extern int inet6_opt_set_val (void *__databuf, int __offset, void *__val,
extern int inet6_opt_next (void *__extbuf, socklen_t __extlen, int __offset,
extern int inet6_opt_find (void *__extbuf, socklen_t __extlen, int __offset,
extern int inet6_opt_get_val (void *__databuf, int __offset, void *__val,
extern socklen_t inet6_rth_space (int __type, int __segments) __THROW;
extern void *inet6_rth_init (void *__bp, socklen_t __bp_len, int __type,
extern int inet6_rth_add (void *__bp, const struct in6_addr *__addr) __THROW;
extern int inet6_rth_reverse (const void *__in, void *__out) __THROW;
extern int inet6_rth_segments (const void *__bp) __THROW;
extern struct in6_addr *inet6_rth_getaddr (const void *__bp, int __index)
extern int getipv4sourcefilter (int __s, struct in_addr __interface_addr,
extern int setipv4sourcefilter (int __s, struct in_addr __interface_addr,
extern int getsourcefilter (int __s, uint32_t __interface_addr,
extern int setsourcefilter (int __s, uint32_t __interface_addr,
extern "C" {
extern int feclearexcept (int __excepts) __THROW;
extern int fegetexceptflag (fexcept_t *__flagp, int __excepts) __THROW;
extern int feraiseexcept (int __excepts) __THROW;
extern int fesetexceptflag (const fexcept_t *__flagp, int __excepts) __THROW;
extern int fetestexcept (int __excepts) __THROW;
extern int fegetround (void) __THROW;
extern int fesetround (int __rounding_direction) __THROW;
extern int fegetenv (fenv_t *__envp) __THROW;
extern int feholdexcept (fenv_t *__envp) __THROW;
extern int fesetenv (const fenv_t *__envp) __THROW;
extern int feupdateenv (const fenv_t *__envp) __THROW;
extern int feenableexcept (int __excepts) __THROW;
extern int fedisableexcept (int __excepts) __THROW;
extern int fegetexcept (void) __THROW;
extern "C" {
extern int drmIoctl(int fd, unsigned long request, void *arg);
extern void *drmGetHashTable(void);
extern drmHashEntry *drmGetEntry(int fd);
extern int           drmAvailable(void);
extern int           drmOpen(const char *name, const char *busid);
extern int           drmOpenWithType(const char *name, const char *busid,
extern int           drmOpenControl(int minor);
extern int           drmOpenRender(int minor);
extern int           drmClose(int fd);
extern drmVersionPtr drmGetVersion(int fd);
extern drmVersionPtr drmGetLibVersion(int fd);
extern int           drmGetCap(int fd, uint64_t capability, uint64_t *value);
extern void          drmFreeVersion(drmVersionPtr);
extern int           drmGetMagic(int fd, drm_magic_t * magic);
extern char          *drmGetBusid(int fd);
extern int           drmGetInterruptFromBusID(int fd, int busnum, int devnum,
extern int           drmGetMap(int fd, int idx, drm_handle_t *offset,
extern int           drmGetClient(int fd, int idx, int *auth, int *pid,
extern int           drmGetStats(int fd, drmStatsT *stats);
extern int           drmSetInterfaceVersion(int fd, drmSetVersion *version);
extern int           drmCommandNone(int fd, unsigned long drmCommandIndex);
extern int           drmCommandRead(int fd, unsigned long drmCommandIndex,
extern int           drmCommandWrite(int fd, unsigned long drmCommandIndex,
extern int           drmCommandWriteRead(int fd, unsigned long drmCommandIndex,
extern void          drmFreeBusid(const char *busid);
extern int           drmSetBusid(int fd, const char *busid);
extern int           drmAuthMagic(int fd, drm_magic_t magic);
extern int           drmAddMap(int fd,
extern int	     drmRmMap(int fd, drm_handle_t handle);
extern int	     drmAddContextPrivateMapping(int fd, drm_context_t ctx_id,
extern int           drmAddBufs(int fd, int count, int size,
extern int           drmMarkBufs(int fd, double low, double high);
extern int           drmCreateContext(int fd, drm_context_t * handle);
extern int           drmSetContextFlags(int fd, drm_context_t context,
extern int           drmGetContextFlags(int fd, drm_context_t context,
extern int           drmAddContextTag(int fd, drm_context_t context, void *tag);
extern int           drmDelContextTag(int fd, drm_context_t context);
extern void          *drmGetContextTag(int fd, drm_context_t context);
extern drm_context_t * drmGetReservedContextList(int fd, int *count);
extern void          drmFreeReservedContextList(drm_context_t *);
extern int           drmSwitchToContext(int fd, drm_context_t context);
extern int           drmDestroyContext(int fd, drm_context_t handle);
extern int           drmCreateDrawable(int fd, drm_drawable_t * handle);
extern int           drmDestroyDrawable(int fd, drm_drawable_t handle);
extern int           drmUpdateDrawableInfo(int fd, drm_drawable_t handle,
extern int           drmCtlInstHandler(int fd, int irq);
extern int           drmCtlUninstHandler(int fd);
extern int           drmSetClientCap(int fd, uint64_t capability,
extern int           drmMap(int fd,
extern int           drmUnmap(drmAddress address, drmSize size);
extern drmBufInfoPtr drmGetBufInfo(int fd);
extern drmBufMapPtr  drmMapBufs(int fd);
extern int           drmUnmapBufs(drmBufMapPtr bufs);
extern int           drmDMA(int fd, drmDMAReqPtr request);
extern int           drmFreeBufs(int fd, int count, int *list);
extern int           drmGetLock(int fd,
extern int           drmUnlock(int fd, drm_context_t context);
extern int           drmFinish(int fd, int context, drmLockFlags flags);
extern int	     drmGetContextPrivateMapping(int fd, drm_context_t ctx_id, 
extern int           drmAgpAcquire(int fd);
extern int           drmAgpRelease(int fd);
extern int           drmAgpEnable(int fd, unsigned long mode);
extern int           drmAgpAlloc(int fd, unsigned long size,
extern int           drmAgpFree(int fd, drm_handle_t handle);
extern int 	     drmAgpBind(int fd, drm_handle_t handle,
extern int           drmAgpUnbind(int fd, drm_handle_t handle);
extern int           drmAgpVersionMajor(int fd);
extern int           drmAgpVersionMinor(int fd);
extern unsigned long drmAgpGetMode(int fd);
extern unsigned long drmAgpBase(int fd); /* Physical location */
extern unsigned long drmAgpSize(int fd); /* Bytes */
extern unsigned long drmAgpMemoryUsed(int fd);
extern unsigned long drmAgpMemoryAvail(int fd);
extern unsigned int  drmAgpVendorId(int fd);
extern unsigned int  drmAgpDeviceId(int fd);
extern int           drmScatterGatherAlloc(int fd, unsigned long size,
extern int           drmScatterGatherFree(int fd, drm_handle_t handle);
extern int           drmWaitVBlank(int fd, drmVBlankPtr vbl);
extern void          drmSetServerInfo(drmServerInfoPtr info);
extern int           drmError(int err, const char *label);
extern void          *drmMalloc(int size);
extern void          drmFree(void *pt);
extern void *drmHashCreate(void);
extern int  drmHashDestroy(void *t);
extern int  drmHashLookup(void *t, unsigned long key, void **value);
extern int  drmHashInsert(void *t, unsigned long key, void *value);
extern int  drmHashDelete(void *t, unsigned long key);
extern int  drmHashFirst(void *t, unsigned long *key, void **value);
extern int  drmHashNext(void *t, unsigned long *key, void **value);
extern void          *drmRandomCreate(unsigned long seed);
extern int           drmRandomDestroy(void *state);
extern unsigned long drmRandom(void *state);
extern double        drmRandomDouble(void *state);
extern void *drmSLCreate(void);
extern int  drmSLDestroy(void *l);
extern int  drmSLLookup(void *l, unsigned long key, void **value);
extern int  drmSLInsert(void *l, unsigned long key, void *value);
extern int  drmSLDelete(void *l, unsigned long key);
extern int  drmSLNext(void *l, unsigned long *key, void **value);
extern int  drmSLFirst(void *l, unsigned long *key, void **value);
extern void drmSLDump(void *l);
extern int  drmSLLookupNeighbors(void *l, unsigned long key,
extern int drmOpenOnce(void *unused, const char *BusID, int *newlyopened);
extern int drmOpenOnceWithType(const char *BusID, int *newlyopened, int type);
extern void drmCloseOnce(int fd);
extern void drmMsg(const char *format, ...) DRM_PRINTFLIKE(1, 2);
extern int drmSetMaster(int fd);
extern int drmDropMaster(int fd);
extern int drmHandleEvent(int fd, drmEventContextPtr evctx);
extern char *drmGetDeviceNameFromFd(int fd);
extern int drmGetNodeTypeFromFd(int fd);
extern int drmPrimeHandleToFD(int fd, uint32_t handle, uint32_t flags, int *prime_fd);
extern int drmPrimeFDToHandle(int fd, int prime_fd, uint32_t *handle);
extern char *drmGetPrimaryDeviceNameFromFd(int fd);
extern char *drmGetRenderDeviceNameFromFd(int fd);
extern int pthread_create (pthread_t *__restrict __newthread,
extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));
extern int pthread_join (pthread_t __th, void **__thread_return);
extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) __THROW;
extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
extern int pthread_detach (pthread_t __th) __THROW;
extern pthread_t pthread_self (void) __THROW __attribute__ ((__const__));
extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
extern int pthread_attr_init (pthread_attr_t *__attr) __THROW __nonnull ((1));
extern int pthread_attr_destroy (pthread_attr_t *__attr)
extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
extern int pthread_getattr_default_np (pthread_attr_t *__attr)
extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
extern int pthread_getschedparam (pthread_t __target_thread,
extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
extern int pthread_getconcurrency (void) __THROW;
extern int pthread_setconcurrency (int __level) __THROW;
extern int pthread_yield (void) __THROW;
extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
extern int pthread_once (pthread_once_t *__once_control,
extern int pthread_setcancelstate (int __state, int *__oldstate);
extern int pthread_setcanceltype (int __type, int *__oldtype);
extern int pthread_cancel (pthread_t __th);
extern void pthread_testcancel (void);
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
extern void __pthread_register_cancel_defer (__pthread_unwind_buf_t *__buf)
extern void __pthread_unregister_cancel_restore (__pthread_unwind_buf_t *__buf)
extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) __THROWNL;
extern int pthread_mutex_init (pthread_mutex_t *__mutex,
extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,
extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
extern int pthread_cond_destroy (pthread_cond_t *__cond)
extern int pthread_cond_signal (pthread_cond_t *__cond)
extern int pthread_cond_broadcast (pthread_cond_t *__cond)
extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
extern int pthread_condattr_init (pthread_condattr_t *__attr)
extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
extern int pthread_condattr_getpshared (const pthread_condattr_t *
extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
extern int pthread_condattr_getclock (const pthread_condattr_t *
extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
extern int pthread_spin_lock (pthread_spinlock_t *__lock)
extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
extern int pthread_key_create (pthread_key_t *__key,
extern int pthread_key_delete (pthread_key_t __key) __THROW;
extern void *pthread_getspecific (pthread_key_t __key) __THROW;
extern int pthread_setspecific (pthread_key_t __key,
extern int pthread_getcpuclockid (pthread_t __thread_id,
extern int pthread_atfork (void (*__prepare) (void),
extern "C" {
extern error_t __argz_create (char *const __argv[], char **__restrict __argz,
extern error_t argz_create (char *const __argv[], char **__restrict __argz,
extern error_t __argz_create_sep (const char *__restrict __string,
extern error_t argz_create_sep (const char *__restrict __string,
extern size_t __argz_count (const char *__argz, size_t __len)
extern size_t argz_count (const char *__argz, size_t __len)
extern void __argz_extract (const char *__restrict __argz, size_t __len,
extern void argz_extract (const char *__restrict __argz, size_t __len,
extern void __argz_stringify (char *__argz, size_t __len, int __sep) __THROW;
extern void argz_stringify (char *__argz, size_t __len, int __sep) __THROW;
extern error_t __argz_append (char **__restrict __argz,
extern error_t argz_append (char **__restrict __argz,
extern error_t __argz_add (char **__restrict __argz,
extern error_t argz_add (char **__restrict __argz,
extern error_t __argz_add_sep (char **__restrict __argz,
extern error_t argz_add_sep (char **__restrict __argz,
extern void __argz_delete (char **__restrict __argz,
extern void argz_delete (char **__restrict __argz,
extern error_t __argz_insert (char **__restrict __argz,
extern error_t argz_insert (char **__restrict __argz,
extern error_t __argz_replace (char **__restrict __argz,
extern error_t argz_replace (char **__restrict __argz,
extern char *__argz_next (const char *__restrict __argz, size_t __argz_len,
extern char *argz_next (const char *__restrict __argz, size_t __argz_len,
extern "C" {
extern int fnmatch (const char *__pattern, const char *__name, int __flags);
extern const unsigned short int **__ctype_b_loc (void)
extern const __int32_t **__ctype_tolower_loc (void)
extern const __int32_t **__ctype_toupper_loc (void)
extern int tolower (int __c) __THROW;
extern int toupper (int __c) __THROW;
extern int isctype (int __c, int __mask) __THROW;
extern int isascii (int __c) __THROW;
extern int toascii (int __c) __THROW;
extern int __tolower_l (int __c, __locale_t __l) __THROW;
extern int tolower_l (int __c, __locale_t __l) __THROW;
extern int __toupper_l (int __c, __locale_t __l) __THROW;
extern int toupper_l (int __c, __locale_t __l) __THROW;
extern "C++" {
extern "C++" {
extern "Java"
extern "Java"
extern "Java"
extern "Java"
extern "Java"
extern "Java"
extern "Java"
extern "Java"
extern "Java"
extern "Java"
extern "Java"
extern "C"
extern ssize_t strfmon (char *__restrict __s, size_t __maxsize,
extern ssize_t strfmon_l (char *__restrict __s, size_t __maxsize,
extern void error (int __status, int __errnum, const char *__format, ...)
extern void error_at_line (int __status, int __errnum, const char *__fname,
extern void (*error_print_progname) (void);
extern unsigned int error_message_count;
extern int error_one_per_line;
extern "C" {
extern int errno;
extern char *program_invocation_name, *program_invocation_short_name;
extern int fcntl (int __fd, int __cmd, ...);
extern int open (const char *__file, int __oflag, ...) __nonnull ((1));
extern int __REDIRECT (open, (const char *__file, int __oflag, ...), open64)
extern int open64 (const char *__file, int __oflag, ...) __nonnull ((1));
extern int openat (int __fd, const char *__file, int __oflag, ...)
extern int __REDIRECT (openat, (int __fd, const char *__file, int __oflag,
extern int openat64 (int __fd, const char *__file, int __oflag, ...)
extern int creat (const char *__file, mode_t __mode) __nonnull ((1));
extern int __REDIRECT (creat, (const char *__file, mode_t __mode),
extern int creat64 (const char *__file, mode_t __mode) __nonnull ((1));
extern int lockf (int __fd, int __cmd, off_t __len);
extern int __REDIRECT (lockf, (int __fd, int __cmd, __off64_t __len), lockf64);
extern int lockf64 (int __fd, int __cmd, off64_t __len);
extern int posix_fadvise (int __fd, off_t __offset, off_t __len,
extern int __REDIRECT_NTH (posix_fadvise, (int __fd, __off64_t __offset,
extern int posix_fadvise64 (int __fd, off64_t __offset, off64_t __len,
extern int posix_fallocate (int __fd, off_t __offset, off_t __len);
extern int __REDIRECT (posix_fallocate, (int __fd, __off64_t __offset,
extern int posix_fallocate64 (int __fd, off64_t __offset, off64_t __len);
extern int isastream (int __fildes) __THROW;
extern int getmsg (int __fildes, struct strbuf *__restrict __ctlptr,
extern int getpmsg (int __fildes, struct strbuf *__restrict __ctlptr,
extern int ioctl (int __fd, unsigned long int __request, ...) __THROW;
extern int putmsg (int __fildes, const struct strbuf *__ctlptr,
extern int putpmsg (int __fildes, const struct strbuf *__ctlptr,
extern int fattach (int __fildes, const char *__path) __THROW;
extern int fdetach (const char *__path) __THROW;
extern int utime (const char *__file,
extern "C" {
extern NCURSES_EXPORT_VAR(ENTRY *) _nc_head;
extern NCURSES_EXPORT_VAR(ENTRY *) _nc_tail;
extern NCURSES_EXPORT(ENTRY *) _nc_copy_entry (ENTRY *oldp);
extern NCURSES_EXPORT(char *) _nc_save_str (const char *const);
extern NCURSES_EXPORT(void) _nc_init_entry (TERMTYPE *const);
extern NCURSES_EXPORT(void) _nc_merge_entry (TERMTYPE *const, TERMTYPE *const);
extern NCURSES_EXPORT(void) _nc_wrap_entry (ENTRY *const, bool);
extern NCURSES_EXPORT(void) _nc_align_termtype (TERMTYPE *, TERMTYPE *);
extern NCURSES_EXPORT(void) _nc_copy_termtype (TERMTYPE *, const TERMTYPE *);
extern NCURSES_EXPORT(void) _nc_free_termtype (TERMTYPE *);
extern NCURSES_EXPORT(void) _nc_init_acs (void);	/* corresponds to traditional 'init_acs()' */
extern NCURSES_EXPORT(char *) _nc_trim_sgr0 (TERMTYPE *);
extern NCURSES_EXPORT_VAR(bool) _nc_user_definable;
extern NCURSES_EXPORT_VAR(bool) _nc_disable_period;
extern NCURSES_EXPORT(int) _nc_parse_entry (ENTRY *, int, bool);
extern NCURSES_EXPORT(int) _nc_capcmp (const char *, const char *);
extern NCURSES_EXPORT(void) _nc_set_writedir (char *);
extern NCURSES_EXPORT(void) _nc_write_entry (TERMTYPE *const);
extern NCURSES_EXPORT(void) _nc_read_entry_source (FILE*, char*, int, bool, bool (*)(ENTRY*));
extern NCURSES_EXPORT(bool) _nc_entry_match (char *, char *);
extern NCURSES_EXPORT(int) _nc_resolve_uses (bool); /* obs 20040705 */
extern NCURSES_EXPORT(int) _nc_resolve_uses2 (bool, bool);
extern NCURSES_EXPORT(void) _nc_free_entries (ENTRY *);
extern NCURSES_IMPEXP void NCURSES_API (*_nc_check_termtype)(TERMTYPE *); /* obs 20040705 */
extern NCURSES_IMPEXP void NCURSES_API (*_nc_check_termtype2)(TERMTYPE *, bool);
extern NCURSES_EXPORT(void) _nc_trace_xnames (TERMTYPE *);
extern "C" {
extern NCURSES_EXPORT_VAR(chtype) acs_map[];
extern NCURSES_EXPORT(int) wgetch_events (WINDOW *, _nc_eventlist *);	/* experimental */
extern NCURSES_EXPORT(int) wgetnstr_events (WINDOW *,char *,int,_nc_eventlist *);/* experimental */
extern NCURSES_EXPORT(int) addch (const chtype);			/* generated */
extern NCURSES_EXPORT(int) addchnstr (const chtype *, int);		/* generated */
extern NCURSES_EXPORT(int) addchstr (const chtype *);			/* generated */
extern NCURSES_EXPORT(int) addnstr (const char *, int);			/* generated */
extern NCURSES_EXPORT(int) addstr (const char *);			/* generated */
extern NCURSES_EXPORT(int) attroff (NCURSES_ATTR_T);			/* generated */
extern NCURSES_EXPORT(int) attron (NCURSES_ATTR_T);			/* generated */
extern NCURSES_EXPORT(int) attrset (NCURSES_ATTR_T);			/* generated */
extern NCURSES_EXPORT(int) attr_get (attr_t *, short *, void *);	/* generated */
extern NCURSES_EXPORT(int) attr_off (attr_t, void *);			/* generated */
extern NCURSES_EXPORT(int) attr_on (attr_t, void *);			/* generated */
extern NCURSES_EXPORT(int) attr_set (attr_t, short, void *);		/* generated */
extern NCURSES_EXPORT(int) baudrate (void);				/* implemented */
extern NCURSES_EXPORT(int) beep  (void);				/* implemented */
extern NCURSES_EXPORT(int) bkgd (chtype);				/* generated */
extern NCURSES_EXPORT(void) bkgdset (chtype);				/* generated */
extern NCURSES_EXPORT(int) border (chtype,chtype,chtype,chtype,chtype,chtype,chtype,chtype);	/* generated */
extern NCURSES_EXPORT(int) box (WINDOW *, chtype, chtype);		/* generated */
extern NCURSES_EXPORT(bool) can_change_color (void);			/* implemented */
extern NCURSES_EXPORT(int) cbreak (void);				/* implemented */
extern NCURSES_EXPORT(int) chgat (int, attr_t, short, const void *);	/* generated */
extern NCURSES_EXPORT(int) clear (void);				/* generated */
extern NCURSES_EXPORT(int) clearok (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(int) clrtobot (void);				/* generated */
extern NCURSES_EXPORT(int) clrtoeol (void);				/* generated */
extern NCURSES_EXPORT(int) color_content (short,short*,short*,short*);	/* implemented */
extern NCURSES_EXPORT(int) color_set (short,void*);			/* generated */
extern NCURSES_EXPORT(int) COLOR_PAIR (int);				/* generated */
extern NCURSES_EXPORT(int) copywin (const WINDOW*,WINDOW*,int,int,int,int,int,int,int);	/* implemented */
extern NCURSES_EXPORT(int) curs_set (int);				/* implemented */
extern NCURSES_EXPORT(int) def_prog_mode (void);			/* implemented */
extern NCURSES_EXPORT(int) def_shell_mode (void);			/* implemented */
extern NCURSES_EXPORT(int) delay_output (int);				/* implemented */
extern NCURSES_EXPORT(int) delch (void);				/* generated */
extern NCURSES_EXPORT(void) delscreen (SCREEN *);			/* implemented */
extern NCURSES_EXPORT(int) delwin (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(int) deleteln (void);				/* generated */
extern NCURSES_EXPORT(WINDOW *) derwin (WINDOW *,int,int,int,int);	/* implemented */
extern NCURSES_EXPORT(int) doupdate (void);				/* implemented */
extern NCURSES_EXPORT(WINDOW *) dupwin (WINDOW *);			/* implemented */
extern NCURSES_EXPORT(int) echo (void);					/* implemented */
extern NCURSES_EXPORT(int) echochar (const chtype);			/* generated */
extern NCURSES_EXPORT(int) erase (void);				/* generated */
extern NCURSES_EXPORT(int) endwin (void);				/* implemented */
extern NCURSES_EXPORT(char) erasechar (void);				/* implemented */
extern NCURSES_EXPORT(void) filter (void);				/* implemented */
extern NCURSES_EXPORT(int) flash (void);				/* implemented */
extern NCURSES_EXPORT(int) flushinp (void);				/* implemented */
extern NCURSES_EXPORT(chtype) getbkgd (WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getch (void);				/* generated */
extern NCURSES_EXPORT(int) getnstr (char *, int);			/* generated */
extern NCURSES_EXPORT(int) getstr (char *);				/* generated */
extern NCURSES_EXPORT(WINDOW *) getwin (FILE *);			/* implemented */
extern NCURSES_EXPORT(int) halfdelay (int);				/* implemented */
extern NCURSES_EXPORT(bool) has_colors (void);				/* implemented */
extern NCURSES_EXPORT(bool) has_ic (void);				/* implemented */
extern NCURSES_EXPORT(bool) has_il (void);				/* implemented */
extern NCURSES_EXPORT(int) hline (chtype, int);				/* generated */
extern NCURSES_EXPORT(void) idcok (WINDOW *, bool);			/* implemented */
extern NCURSES_EXPORT(int) idlok (WINDOW *, bool);			/* implemented */
extern NCURSES_EXPORT(void) immedok (WINDOW *, bool);			/* implemented */
extern NCURSES_EXPORT(chtype) inch (void);				/* generated */
extern NCURSES_EXPORT(int) inchnstr (chtype *, int);			/* generated */
extern NCURSES_EXPORT(int) inchstr (chtype *);				/* generated */
extern NCURSES_EXPORT(WINDOW *) initscr (void);				/* implemented */
extern NCURSES_EXPORT(int) init_color (short,short,short,short);	/* implemented */
extern NCURSES_EXPORT(int) init_pair (short,short,short);		/* implemented */
extern NCURSES_EXPORT(int) innstr (char *, int);			/* generated */
extern NCURSES_EXPORT(int) insch (chtype);				/* generated */
extern NCURSES_EXPORT(int) insdelln (int);				/* generated */
extern NCURSES_EXPORT(int) insertln (void);				/* generated */
extern NCURSES_EXPORT(int) insnstr (const char *, int);			/* generated */
extern NCURSES_EXPORT(int) insstr (const char *);			/* generated */
extern NCURSES_EXPORT(int) instr (char *);				/* generated */
extern NCURSES_EXPORT(int) intrflush (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(bool) isendwin (void);				/* implemented */
extern NCURSES_EXPORT(bool) is_linetouched (WINDOW *,int);		/* implemented */
extern NCURSES_EXPORT(bool) is_wintouched (WINDOW *);			/* implemented */
extern NCURSES_EXPORT(NCURSES_CONST char *) keyname (int);		/* implemented */
extern NCURSES_EXPORT(int) keypad (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(char) killchar (void);				/* implemented */
extern NCURSES_EXPORT(int) leaveok (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(char *) longname (void);				/* implemented */
extern NCURSES_EXPORT(int) meta (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(int) move (int, int);				/* generated */
extern NCURSES_EXPORT(int) mvaddch (int, int, const chtype);		/* generated */
extern NCURSES_EXPORT(int) mvaddchnstr (int, int, const chtype *, int);	/* generated */
extern NCURSES_EXPORT(int) mvaddchstr (int, int, const chtype *);	/* generated */
extern NCURSES_EXPORT(int) mvaddnstr (int, int, const char *, int);	/* generated */
extern NCURSES_EXPORT(int) mvaddstr (int, int, const char *);		/* generated */
extern NCURSES_EXPORT(int) mvchgat (int, int, int, attr_t, short, const void *);	/* generated */
extern NCURSES_EXPORT(int) mvcur (int,int,int,int);			/* implemented */
extern NCURSES_EXPORT(int) mvdelch (int, int);				/* generated */
extern NCURSES_EXPORT(int) mvderwin (WINDOW *, int, int);		/* implemented */
extern NCURSES_EXPORT(int) mvgetch (int, int);				/* generated */
extern NCURSES_EXPORT(int) mvgetnstr (int, int, char *, int);		/* generated */
extern NCURSES_EXPORT(int) mvgetstr (int, int, char *);			/* generated */
extern NCURSES_EXPORT(int) mvhline (int, int, chtype, int);		/* generated */
extern NCURSES_EXPORT(chtype) mvinch (int, int);			/* generated */
extern NCURSES_EXPORT(int) mvinchnstr (int, int, chtype *, int);	/* generated */
extern NCURSES_EXPORT(int) mvinchstr (int, int, chtype *);		/* generated */
extern NCURSES_EXPORT(int) mvinnstr (int, int, char *, int);		/* generated */
extern NCURSES_EXPORT(int) mvinsch (int, int, chtype);			/* generated */
extern NCURSES_EXPORT(int) mvinsnstr (int, int, const char *, int);	/* generated */
extern NCURSES_EXPORT(int) mvinsstr (int, int, const char *);		/* generated */
extern NCURSES_EXPORT(int) mvinstr (int, int, char *);			/* generated */
extern NCURSES_EXPORT(int) mvprintw (int,int, const char *,...)		/* implemented */
extern NCURSES_EXPORT(int) mvscanw (int,int, NCURSES_CONST char *,...)	/* implemented */
extern NCURSES_EXPORT(int) mvvline (int, int, chtype, int);		/* generated */
extern NCURSES_EXPORT(int) mvwaddch (WINDOW *, int, int, const chtype);	/* generated */
extern NCURSES_EXPORT(int) mvwaddchnstr (WINDOW *, int, int, const chtype *, int);/* generated */
extern NCURSES_EXPORT(int) mvwaddchstr (WINDOW *, int, int, const chtype *);	/* generated */
extern NCURSES_EXPORT(int) mvwaddnstr (WINDOW *, int, int, const char *, int);	/* generated */
extern NCURSES_EXPORT(int) mvwaddstr (WINDOW *, int, int, const char *);	/* generated */
extern NCURSES_EXPORT(int) mvwchgat (WINDOW *, int, int, int, attr_t, short, const void *);/* generated */
extern NCURSES_EXPORT(int) mvwdelch (WINDOW *, int, int);		/* generated */
extern NCURSES_EXPORT(int) mvwgetch (WINDOW *, int, int);		/* generated */
extern NCURSES_EXPORT(int) mvwgetnstr (WINDOW *, int, int, char *, int);	/* generated */
extern NCURSES_EXPORT(int) mvwgetstr (WINDOW *, int, int, char *);	/* generated */
extern NCURSES_EXPORT(int) mvwhline (WINDOW *, int, int, chtype, int);	/* generated */
extern NCURSES_EXPORT(int) mvwin (WINDOW *,int,int);			/* implemented */
extern NCURSES_EXPORT(chtype) mvwinch (WINDOW *, int, int);			/* generated */
extern NCURSES_EXPORT(int) mvwinchnstr (WINDOW *, int, int, chtype *, int);	/* generated */
extern NCURSES_EXPORT(int) mvwinchstr (WINDOW *, int, int, chtype *);		/* generated */
extern NCURSES_EXPORT(int) mvwinnstr (WINDOW *, int, int, char *, int);		/* generated */
extern NCURSES_EXPORT(int) mvwinsch (WINDOW *, int, int, chtype);		/* generated */
extern NCURSES_EXPORT(int) mvwinsnstr (WINDOW *, int, int, const char *, int);	/* generated */
extern NCURSES_EXPORT(int) mvwinsstr (WINDOW *, int, int, const char *);	/* generated */
extern NCURSES_EXPORT(int) mvwinstr (WINDOW *, int, int, char *);		/* generated */
extern NCURSES_EXPORT(int) mvwprintw (WINDOW*,int,int, const char *,...)	/* implemented */
extern NCURSES_EXPORT(int) mvwscanw (WINDOW *,int,int, NCURSES_CONST char *,...)	/* implemented */
extern NCURSES_EXPORT(int) mvwvline (WINDOW *,int, int, chtype, int);	/* generated */
extern NCURSES_EXPORT(int) napms (int);					/* implemented */
extern NCURSES_EXPORT(WINDOW *) newpad (int,int);		       	/* implemented */
extern NCURSES_EXPORT(SCREEN *) newterm (NCURSES_CONST char *,FILE *,FILE *);	/* implemented */
extern NCURSES_EXPORT(WINDOW *) newwin (int,int,int,int);	       	/* implemented */
extern NCURSES_EXPORT(int) nl (void);					/* implemented */
extern NCURSES_EXPORT(int) nocbreak (void);				/* implemented */
extern NCURSES_EXPORT(int) nodelay (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(int) noecho (void);				/* implemented */
extern NCURSES_EXPORT(int) nonl (void);					/* implemented */
extern NCURSES_EXPORT(void) noqiflush (void);				/* implemented */
extern NCURSES_EXPORT(int) noraw (void);				/* implemented */
extern NCURSES_EXPORT(int) notimeout (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(int) overlay (const WINDOW*,WINDOW *);		/* implemented */
extern NCURSES_EXPORT(int) overwrite (const WINDOW*,WINDOW *);		/* implemented */
extern NCURSES_EXPORT(int) pair_content (short,short*,short*);		/* implemented */
extern NCURSES_EXPORT(int) PAIR_NUMBER (int);				/* generated */
extern NCURSES_EXPORT(int) pechochar (WINDOW *, const chtype);		/* implemented */
extern NCURSES_EXPORT(int) pnoutrefresh (WINDOW*,int,int,int,int,int,int);/* implemented */
extern NCURSES_EXPORT(int) prefresh (WINDOW *,int,int,int,int,int,int);	/* implemented */
extern NCURSES_EXPORT(int) printw (const char *,...)			/* implemented */
extern NCURSES_EXPORT(int) putwin (WINDOW *, FILE *);			/* implemented */
extern NCURSES_EXPORT(void) qiflush (void);				/* implemented */
extern NCURSES_EXPORT(int) raw (void);					/* implemented */
extern NCURSES_EXPORT(int) redrawwin (WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) refresh (void);				/* generated */
extern NCURSES_EXPORT(int) resetty (void);				/* implemented */
extern NCURSES_EXPORT(int) reset_prog_mode (void);			/* implemented */
extern NCURSES_EXPORT(int) reset_shell_mode (void);			/* implemented */
extern NCURSES_EXPORT(int) ripoffline (int, int (*)(WINDOW *, int));	/* implemented */
extern NCURSES_EXPORT(int) savetty (void);				/* implemented */
extern NCURSES_EXPORT(int) scanw (NCURSES_CONST char *,...)		/* implemented */
extern NCURSES_EXPORT(int) scr_dump (const char *);			/* implemented */
extern NCURSES_EXPORT(int) scr_init (const char *);			/* implemented */
extern NCURSES_EXPORT(int) scrl (int);					/* generated */
extern NCURSES_EXPORT(int) scroll (WINDOW *);				/* generated */
extern NCURSES_EXPORT(int) scrollok (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(int) scr_restore (const char *);			/* implemented */
extern NCURSES_EXPORT(int) scr_set (const char *);			/* implemented */
extern NCURSES_EXPORT(int) setscrreg (int,int);				/* generated */
extern NCURSES_EXPORT(SCREEN *) set_term (SCREEN *);			/* implemented */
extern NCURSES_EXPORT(int) slk_attroff (const chtype);			/* implemented */
extern NCURSES_EXPORT(int) slk_attr_off (const attr_t, void *);		/* generated:WIDEC */
extern NCURSES_EXPORT(int) slk_attron (const chtype);			/* implemented */
extern NCURSES_EXPORT(int) slk_attr_on (attr_t,void*);			/* generated:WIDEC */
extern NCURSES_EXPORT(int) slk_attrset (const chtype);			/* implemented */
extern NCURSES_EXPORT(attr_t) slk_attr (void);				/* implemented */
extern NCURSES_EXPORT(int) slk_attr_set (const attr_t,short,void*);	/* implemented */
extern NCURSES_EXPORT(int) slk_clear (void);				/* implemented */
extern NCURSES_EXPORT(int) slk_color (short);				/* implemented */
extern NCURSES_EXPORT(int) slk_init (int);				/* implemented */
extern NCURSES_EXPORT(char *) slk_label (int);				/* implemented */
extern NCURSES_EXPORT(int) slk_noutrefresh (void);			/* implemented */
extern NCURSES_EXPORT(int) slk_refresh (void);				/* implemented */
extern NCURSES_EXPORT(int) slk_restore (void);				/* implemented */
extern NCURSES_EXPORT(int) slk_set (int,const char *,int);		/* implemented */
extern NCURSES_EXPORT(int) slk_touch (void);	      	       		/* implemented */
extern NCURSES_EXPORT(int) standout (void);				/* generated */
extern NCURSES_EXPORT(int) standend (void);				/* generated */
extern NCURSES_EXPORT(int) start_color (void);				/* implemented */
extern NCURSES_EXPORT(WINDOW *) subpad (WINDOW *, int, int, int, int);	/* implemented */
extern NCURSES_EXPORT(WINDOW *) subwin (WINDOW *, int, int, int, int);	/* implemented */
extern NCURSES_EXPORT(int) syncok (WINDOW *, bool);			/* implemented */
extern NCURSES_EXPORT(chtype) termattrs (void);				/* implemented */
extern NCURSES_EXPORT(char *) termname (void);				/* implemented */
extern NCURSES_EXPORT(void) timeout (int);				/* generated */
extern NCURSES_EXPORT(int) touchline (WINDOW *, int, int);		/* generated */
extern NCURSES_EXPORT(int) touchwin (WINDOW *);				/* generated */
extern NCURSES_EXPORT(int) typeahead (int);				/* implemented */
extern NCURSES_EXPORT(int) ungetch (int);				/* implemented */
extern NCURSES_EXPORT(int) untouchwin (WINDOW *);			/* generated */
extern NCURSES_EXPORT(void) use_env (bool);				/* implemented */
extern NCURSES_EXPORT(void) use_tioctl (bool);				/* implemented */
extern NCURSES_EXPORT(int) vidattr (chtype);				/* implemented */
extern NCURSES_EXPORT(int) vidputs (chtype, NCURSES_OUTC);		/* implemented */
extern NCURSES_EXPORT(int) vline (chtype, int);				/* generated */
extern NCURSES_EXPORT(int) vwprintw (WINDOW *, const char *,va_list);	/* implemented */
extern NCURSES_EXPORT(int) vw_printw (WINDOW *, const char *,va_list);	/* generated */
extern NCURSES_EXPORT(int) vwscanw (WINDOW *, NCURSES_CONST char *,va_list);	/* implemented */
extern NCURSES_EXPORT(int) vw_scanw (WINDOW *, NCURSES_CONST char *,va_list);	/* generated */
extern NCURSES_EXPORT(int) waddch (WINDOW *, const chtype);		/* implemented */
extern NCURSES_EXPORT(int) waddchnstr (WINDOW *,const chtype *,int);	/* implemented */
extern NCURSES_EXPORT(int) waddchstr (WINDOW *,const chtype *);		/* generated */
extern NCURSES_EXPORT(int) waddnstr (WINDOW *,const char *,int);	/* implemented */
extern NCURSES_EXPORT(int) waddstr (WINDOW *,const char *);		/* generated */
extern NCURSES_EXPORT(int) wattron (WINDOW *, int);			/* generated */
extern NCURSES_EXPORT(int) wattroff (WINDOW *, int);			/* generated */
extern NCURSES_EXPORT(int) wattrset (WINDOW *, int);			/* generated */
extern NCURSES_EXPORT(int) wattr_get (WINDOW *, attr_t *, short *, void *);	/* generated */
extern NCURSES_EXPORT(int) wattr_on (WINDOW *, attr_t, void *);		/* implemented */
extern NCURSES_EXPORT(int) wattr_off (WINDOW *, attr_t, void *);	/* implemented */
extern NCURSES_EXPORT(int) wattr_set (WINDOW *, attr_t, short, void *);	/* generated */
extern NCURSES_EXPORT(int) wbkgd (WINDOW *, chtype);			/* implemented */
extern NCURSES_EXPORT(void) wbkgdset (WINDOW *,chtype);			/* implemented */
extern NCURSES_EXPORT(int) wborder (WINDOW *,chtype,chtype,chtype,chtype,chtype,chtype,chtype,chtype);	/* implemented */
extern NCURSES_EXPORT(int) wchgat (WINDOW *, int, attr_t, short, const void *);/* implemented */
extern NCURSES_EXPORT(int) wclear (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(int) wclrtobot (WINDOW *);			/* implemented */
extern NCURSES_EXPORT(int) wclrtoeol (WINDOW *);			/* implemented */
extern NCURSES_EXPORT(int) wcolor_set (WINDOW*,short,void*);		/* implemented */
extern NCURSES_EXPORT(void) wcursyncup (WINDOW *);			/* implemented */
extern NCURSES_EXPORT(int) wdelch (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(int) wdeleteln (WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) wechochar (WINDOW *, const chtype);		/* implemented */
extern NCURSES_EXPORT(int) werase (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(int) wgetch (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(int) wgetnstr (WINDOW *,char *,int);		/* implemented */
extern NCURSES_EXPORT(int) wgetstr (WINDOW *, char *);			/* generated */
extern NCURSES_EXPORT(int) whline (WINDOW *, chtype, int);		/* implemented */
extern NCURSES_EXPORT(chtype) winch (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(int) winchnstr (WINDOW *, chtype *, int);		/* implemented */
extern NCURSES_EXPORT(int) winchstr (WINDOW *, chtype *);		/* generated */
extern NCURSES_EXPORT(int) winnstr (WINDOW *, char *, int);		/* implemented */
extern NCURSES_EXPORT(int) winsch (WINDOW *, chtype);			/* implemented */
extern NCURSES_EXPORT(int) winsdelln (WINDOW *,int);			/* implemented */
extern NCURSES_EXPORT(int) winsertln (WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) winsnstr (WINDOW *, const char *,int);	/* implemented */
extern NCURSES_EXPORT(int) winsstr (WINDOW *, const char *);		/* generated */
extern NCURSES_EXPORT(int) winstr (WINDOW *, char *);			/* generated */
extern NCURSES_EXPORT(int) wmove (WINDOW *,int,int);			/* implemented */
extern NCURSES_EXPORT(int) wnoutrefresh (WINDOW *);			/* implemented */
extern NCURSES_EXPORT(int) wprintw (WINDOW *, const char *,...)		/* implemented */
extern NCURSES_EXPORT(int) wredrawln (WINDOW *,int,int);		/* implemented */
extern NCURSES_EXPORT(int) wrefresh (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(int) wscanw (WINDOW *, NCURSES_CONST char *,...)	/* implemented */
extern NCURSES_EXPORT(int) wscrl (WINDOW *,int);			/* implemented */
extern NCURSES_EXPORT(int) wsetscrreg (WINDOW *,int,int);		/* implemented */
extern NCURSES_EXPORT(int) wstandout (WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) wstandend (WINDOW *);			/* generated */
extern NCURSES_EXPORT(void) wsyncdown (WINDOW *);			/* implemented */
extern NCURSES_EXPORT(void) wsyncup (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(void) wtimeout (WINDOW *,int);			/* implemented */
extern NCURSES_EXPORT(int) wtouchln (WINDOW *,int,int,int);		/* implemented */
extern NCURSES_EXPORT(int) wvline (WINDOW *,chtype,int);		/* implemented */
extern NCURSES_EXPORT(int) tigetflag (NCURSES_CONST char *);		/* implemented */
extern NCURSES_EXPORT(int) tigetnum (NCURSES_CONST char *);		/* implemented */
extern NCURSES_EXPORT(char *) tigetstr (NCURSES_CONST char *);		/* implemented */
extern NCURSES_EXPORT(int) putp (const char *);				/* implemented */
extern NCURSES_EXPORT(char *) tparm (NCURSES_CONST char *, ...);	/* special */
extern NCURSES_EXPORT(char *) tparm (NCURSES_CONST char *, NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG);	/* special */
extern NCURSES_EXPORT(char *) tparm_varargs (NCURSES_CONST char *, ...);	/* special */
extern NCURSES_EXPORT(char *) tiparm (const char *, ...);		/* special */
extern NCURSES_EXPORT(int) getattrs (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getcurx (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getcury (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getbegx (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getbegy (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getmaxx (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getmaxy (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getparx (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getpary (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(bool) is_term_resized (int, int);
extern NCURSES_EXPORT(char *) keybound (int, int);
extern NCURSES_EXPORT(const char *) curses_version (void);
extern NCURSES_EXPORT(int) assume_default_colors (int, int);
extern NCURSES_EXPORT(int) define_key (const char *, int);
extern NCURSES_EXPORT(int) get_escdelay (void);
extern NCURSES_EXPORT(int) key_defined (const char *);
extern NCURSES_EXPORT(int) keyok (int, bool);
extern NCURSES_EXPORT(int) resize_term (int, int);
extern NCURSES_EXPORT(int) resizeterm (int, int);
extern NCURSES_EXPORT(int) set_escdelay (int);
extern NCURSES_EXPORT(int) set_tabsize (int);
extern NCURSES_EXPORT(int) use_default_colors (void);
extern NCURSES_EXPORT(int) use_extended_names (bool);
extern NCURSES_EXPORT(int) use_legacy_coding (int);
extern NCURSES_EXPORT(int) use_screen (SCREEN *, NCURSES_SCREEN_CB, void *);
extern NCURSES_EXPORT(int) use_window (WINDOW *, NCURSES_WINDOW_CB, void *);
extern NCURSES_EXPORT(int) wresize (WINDOW *, int, int);
extern NCURSES_EXPORT(void) nofilter(void);
extern NCURSES_EXPORT(WINDOW *) wgetparent (const WINDOW *);	/* generated */
extern NCURSES_EXPORT(bool) is_cleared (const WINDOW *);	/* generated */
extern NCURSES_EXPORT(bool) is_idcok (const WINDOW *);		/* generated */
extern NCURSES_EXPORT(bool) is_idlok (const WINDOW *);		/* generated */
extern NCURSES_EXPORT(bool) is_immedok (const WINDOW *);	/* generated */
extern NCURSES_EXPORT(bool) is_keypad (const WINDOW *);		/* generated */
extern NCURSES_EXPORT(bool) is_leaveok (const WINDOW *);	/* generated */
extern NCURSES_EXPORT(bool) is_nodelay (const WINDOW *);	/* generated */
extern NCURSES_EXPORT(bool) is_notimeout (const WINDOW *);	/* generated */
extern NCURSES_EXPORT(bool) is_pad (const WINDOW *);		/* generated */
extern NCURSES_EXPORT(bool) is_scrollok (const WINDOW *);	/* generated */
extern NCURSES_EXPORT(bool) is_subwin (const WINDOW *);		/* generated */
extern NCURSES_EXPORT(bool) is_syncok (const WINDOW *);		/* generated */
extern NCURSES_EXPORT(int) wgetscrreg (const WINDOW *, int *, int *); /* generated */
extern NCURSES_EXPORT(SCREEN *) new_prescr (void); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(baudrate) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(beep) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(bool) NCURSES_SP_NAME(can_change_color) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(cbreak) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(curs_set) (SCREEN*, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(color_content) (SCREEN*, short, short*, short*, short*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(def_prog_mode) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(def_shell_mode) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(delay_output) (SCREEN*, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(doupdate) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(echo) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(endwin) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(char) NCURSES_SP_NAME(erasechar) (SCREEN*);/* implemented:SP_FUNC */
extern NCURSES_EXPORT(void) NCURSES_SP_NAME(filter) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(flash) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(flushinp) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(WINDOW *) NCURSES_SP_NAME(getwin) (SCREEN*, FILE *);			/* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(halfdelay) (SCREEN*, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(bool) NCURSES_SP_NAME(has_colors) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(bool) NCURSES_SP_NAME(has_ic) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(bool) NCURSES_SP_NAME(has_il) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(init_color) (SCREEN*, short, short, short, short); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(init_pair) (SCREEN*, short, short, short); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(intrflush) (SCREEN*, WINDOW*, bool);	/* implemented:SP_FUNC */
extern NCURSES_EXPORT(bool) NCURSES_SP_NAME(isendwin) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(NCURSES_CONST char *) NCURSES_SP_NAME(keyname) (SCREEN*, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(char) NCURSES_SP_NAME(killchar) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(char *) NCURSES_SP_NAME(longname) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(mvcur) (SCREEN*, int, int, int, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(napms) (SCREEN*, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(WINDOW *) NCURSES_SP_NAME(newpad) (SCREEN*, int, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(SCREEN *) NCURSES_SP_NAME(newterm) (SCREEN*, NCURSES_CONST char *, FILE *, FILE *); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(WINDOW *) NCURSES_SP_NAME(newwin) (SCREEN*, int, int, int, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(nl) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(nocbreak) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(noecho) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(nonl) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(void) NCURSES_SP_NAME(noqiflush) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(noraw) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(pair_content) (SCREEN*, short, short*, short*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(void) NCURSES_SP_NAME(qiflush) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(raw) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(reset_prog_mode) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(reset_shell_mode) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(resetty) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(ripoffline) (SCREEN*, int, int (*)(WINDOW *, int));	/* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(savetty) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(scr_init) (SCREEN*, const char *); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(scr_restore) (SCREEN*, const char *); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(scr_set) (SCREEN*, const char *); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_attroff) (SCREEN*, const chtype); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_attron) (SCREEN*, const chtype); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_attrset) (SCREEN*, const chtype); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(attr_t) NCURSES_SP_NAME(slk_attr) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_attr_set) (SCREEN*, const attr_t, short, void*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_clear) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_color) (SCREEN*, short); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_init) (SCREEN*, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(char *) NCURSES_SP_NAME(slk_label) (SCREEN*, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_noutrefresh) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_refresh) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_restore) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_set) (SCREEN*, int, const char *, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_touch) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(start_color) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(chtype) NCURSES_SP_NAME(termattrs) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(char *) NCURSES_SP_NAME(termname) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(typeahead) (SCREEN*, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(ungetch) (SCREEN*, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(void) NCURSES_SP_NAME(use_env) (SCREEN*, bool); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(void) NCURSES_SP_NAME(use_tioctl) (SCREEN*, bool); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(vidattr) (SCREEN*, chtype);	/* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(vidputs) (SCREEN*, chtype, NCURSES_SP_OUTC); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(char *) NCURSES_SP_NAME(keybound) (SCREEN*, int, int);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(assume_default_colors) (SCREEN*, int, int);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(define_key) (SCREEN*, const char *, int);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(get_escdelay) (SCREEN*);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(bool) NCURSES_SP_NAME(is_term_resized) (SCREEN*, int, int);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(key_defined) (SCREEN*, const char *);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(keyok) (SCREEN*, int, bool);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(void) NCURSES_SP_NAME(nofilter) (SCREEN*); /* implemented */	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(resize_term) (SCREEN*, int, int);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(resizeterm) (SCREEN*, int, int);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(set_escdelay) (SCREEN*, int);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(set_tabsize) (SCREEN*, int);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(use_default_colors) (SCREEN*);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(use_legacy_coding) (SCREEN*, int);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT_VAR(WINDOW *) curscr;
extern NCURSES_EXPORT_VAR(WINDOW *) newscr;
extern NCURSES_EXPORT_VAR(WINDOW *) stdscr;
extern NCURSES_EXPORT_VAR(char) ttytype[];
extern NCURSES_EXPORT_VAR(int) COLORS;
extern NCURSES_EXPORT_VAR(int) COLOR_PAIRS;
extern NCURSES_EXPORT_VAR(int) COLS;
extern NCURSES_EXPORT_VAR(int) ESCDELAY;
extern NCURSES_EXPORT_VAR(int) LINES;
extern NCURSES_EXPORT_VAR(int) TABSIZE;
extern NCURSES_EXPORT(bool)    has_mouse(void);
extern NCURSES_EXPORT(int)     getmouse (MEVENT *);
extern NCURSES_EXPORT(int)     ungetmouse (MEVENT *);
extern NCURSES_EXPORT(mmask_t) mousemask (mmask_t, mmask_t *);
extern NCURSES_EXPORT(bool)    wenclose (const WINDOW *, int, int);
extern NCURSES_EXPORT(int)     mouseinterval (int);
extern NCURSES_EXPORT(bool)    wmouse_trafo (const WINDOW*, int*, int*, bool);
extern NCURSES_EXPORT(bool)    mouse_trafo (int*, int*, bool);              /* generated */
extern NCURSES_EXPORT(bool)    NCURSES_SP_NAME(has_mouse) (SCREEN*);
extern NCURSES_EXPORT(int)     NCURSES_SP_NAME(getmouse) (SCREEN*, MEVENT *);
extern NCURSES_EXPORT(int)     NCURSES_SP_NAME(ungetmouse) (SCREEN*,MEVENT *);
extern NCURSES_EXPORT(mmask_t) NCURSES_SP_NAME(mousemask) (SCREEN*, mmask_t, mmask_t *);
extern NCURSES_EXPORT(int)     NCURSES_SP_NAME(mouseinterval) (SCREEN*, int);
extern NCURSES_EXPORT(int) mcprint (char *, int);	/* direct data to printer */
extern NCURSES_EXPORT(int) has_key (int);		/* do we have given key? */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(has_key) (SCREEN*, int);    /* do we have given key? */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(mcprint) (SCREEN*, char *, int);	/* direct data to printer */
extern NCURSES_EXPORT(void) _tracef (const char *, ...) GCC_PRINTFLIKE(1,2);
extern NCURSES_EXPORT(void) _tracedump (const char *, WINDOW *);
extern NCURSES_EXPORT(char *) _traceattr (attr_t);
extern NCURSES_EXPORT(char *) _traceattr2 (int, chtype);
extern NCURSES_EXPORT(char *) _nc_tracebits (void);
extern NCURSES_EXPORT(char *) _tracechar (int);
extern NCURSES_EXPORT(char *) _tracechtype (chtype);
extern NCURSES_EXPORT(char *) _tracechtype2 (int, chtype);
extern NCURSES_EXPORT(char *) _tracecchar_t (const cchar_t *);
extern NCURSES_EXPORT(char *) _tracecchar_t2 (int, const cchar_t *);
extern NCURSES_EXPORT(char *) _tracemouse (const MEVENT *);
extern NCURSES_EXPORT(void) trace (const unsigned int);
extern NCURSES_EXPORT_VAR(int) _nc_optimize_enable;		/* enable optimizations */
extern NCURSES_EXPORT(const char *) _nc_visbuf (const char *);
extern SmcConn SmcOpenConnection (
extern SmcCloseStatus SmcCloseConnection (
extern void SmcModifyCallbacks (
extern void SmcSetProperties (
extern void SmcDeleteProperties (
extern Status SmcGetProperties (
extern Status SmcInteractRequest (
extern void SmcInteractDone (
extern void SmcRequestSaveYourself (
extern Status SmcRequestSaveYourselfPhase2 (
extern void SmcSaveYourselfDone (
extern int SmcProtocolVersion (
extern int SmcProtocolRevision (
extern char *SmcVendor (
extern char *SmcRelease (
extern char *SmcClientID (
extern IceConn SmcGetIceConnection (
extern Status SmsInitialize (
extern char *SmsClientHostName (
extern char *SmsGenerateClientID (
extern Status SmsRegisterClientReply (
extern void SmsSaveYourself (
extern void SmsSaveYourselfPhase2 (
extern void SmsInteract (
extern void SmsDie (
extern void SmsSaveComplete (
extern void SmsShutdownCancelled (
extern void SmsReturnProperties (
extern void SmsCleanUp (
extern int SmsProtocolVersion (
extern int SmsProtocolRevision (
extern char *SmsClientID (
extern IceConn SmsGetIceConnection (
extern SmcErrorHandler SmcSetErrorHandler (
extern SmsErrorHandler SmsSetErrorHandler (
extern void SmFreeProperty (
extern void SmFreeReasons (
extern void		XkbSetAtomFuncs(
extern Status XkbGetCompatMap(
extern Bool XkbSetCompatMap(
extern Status XkbCopyKeyType(
extern Status XkbCopyKeyTypes(
extern  Status   XkbChangeKeycodeRange(
extern XkbDescPtr XkbGetKeyboardByName(
extern  Bool XkbSetDeviceLedInfo(
extern Bool XkbUpdateActionVirtualMods(
extern void XkbUpdateKeyTypeVirtualMods(
extern void _XtDestroyServerGrabs(
extern XtPerWidgetInput _XtGetPerWidgetInput(
extern XtServerGrabPtr _XtCheckServerGrabsOnWidget(
extern XtGrabList* _XtGetGrabList( XtPerDisplayInput );
extern void _XtFreePerWidgetInput(
extern Widget _XtProcessKeyboardEvent(
extern Widget _XtProcessPointerEvent(
extern void _XtRegisterPassiveGrabs(
extern void _XtClearAncestorCache(
extern Boolean XtConvertAndStore(
extern Boolean XtCallConverter(
extern Boolean XtDispatchEvent(
extern Boolean XtCallAcceptFocus(
extern Boolean XtPeekEvent( /* obsolete */
extern Boolean XtAppPeekEvent(
extern Boolean XtIsSubclass(
extern Boolean XtIsObject(
extern Boolean _XtCheckSubclassFlag( /* implementation-private */
extern Boolean _XtIsSubclassOf( /* implementation-private */
extern Boolean XtIsManaged(
extern Boolean XtIsRealized(
extern Boolean XtIsSensitive(
extern Boolean XtOwnSelection(
extern Boolean XtOwnSelectionIncremental(
extern XtGeometryResult XtMakeResizeRequest(
extern void XtTranslateCoords(
extern KeySym* XtGetKeysymTable(
extern void XtKeysymToKeycodeList(
extern void XtStringConversionWarning( /* obsolete */
extern void XtDisplayStringConversionWarning(
extern void XtAppAddConverter( /* obsolete */
extern void XtAddConverter( /* obsolete */
extern void XtSetTypeConverter(
extern void XtAppSetTypeConverter(
extern void XtConvert( /* obsolete */
extern void XtDirectConvert( /* obsolete */
extern XtTranslations XtParseTranslationTable(
extern XtAccelerators XtParseAcceleratorTable(
extern void XtOverrideTranslations(
extern void XtAugmentTranslations(
extern void XtInstallAccelerators(
extern void XtInstallAllAccelerators(
extern void XtUninstallTranslations(
extern void XtAppAddActions(
extern void XtAddActions( /* obsolete */
extern XtActionHookId XtAppAddActionHook(
extern void XtRemoveActionHook(
extern void XtGetActionList(
extern void XtCallActionProc(
extern void XtRegisterGrabAction(
extern void XtSetMultiClickTime(
extern int XtGetMultiClickTime(
extern KeySym XtGetActionKeysym(
extern void XtTranslateKeycode(
extern void XtTranslateKey(
extern void XtSetKeyTranslator(
extern void XtRegisterCaseConverter(
extern void XtConvertCase(
extern void XtAddEventHandler(
extern void XtRemoveEventHandler(
extern void XtAddRawEventHandler(
extern void XtRemoveRawEventHandler(
extern void XtInsertEventHandler(
extern void XtInsertRawEventHandler(
extern XtEventDispatchProc XtSetEventDispatcher(
extern Boolean XtDispatchEventToWidget(
extern void XtInsertEventTypeHandler(
extern void XtRemoveEventTypeHandler(
extern EventMask XtBuildEventMask(
extern void XtRegisterExtensionSelector(
extern void XtAddGrab(
extern void XtRemoveGrab(
extern void XtProcessEvent( /* obsolete */
extern void XtAppProcessEvent(
extern void XtMainLoop( /* obsolete */
extern void XtAppMainLoop(
extern void XtAddExposureToRegion(
extern void XtSetKeyboardFocus(
extern Widget XtGetKeyboardFocusWidget(
extern XEvent* XtLastEventProcessed(
extern Time XtLastTimestampProcessed(
extern XtIntervalId XtAddTimeOut( /* obsolete */
extern XtIntervalId XtAppAddTimeOut(
extern void XtRemoveTimeOut(
extern XtInputId XtAddInput( /* obsolete */
extern XtInputId XtAppAddInput(
extern void XtRemoveInput(
extern XtSignalId XtAddSignal(
extern XtSignalId XtAppAddSignal(
extern void XtRemoveSignal(
extern void XtNoticeSignal(
extern void XtNextEvent( /* obsolete */
extern void XtAppNextEvent(
extern Boolean XtPending( /* obsolete */
extern XtInputMask XtAppPending(
extern XtBlockHookId XtAppAddBlockHook(
extern void XtRemoveBlockHook(
extern Boolean XtIsOverrideShell(Widget /* object */);
extern Boolean XtIsVendorShell(Widget /* object */);
extern Boolean XtIsTransientShell(Widget /* object */);
extern Boolean XtIsApplicationShell(Widget /* object */);
extern Boolean XtIsSessionShell(Widget /* object */);
extern void XtRealizeWidget(
extern void XtDestroyWidget(
extern void XtSetSensitive(
extern void XtSetMappedWhenManaged(
extern Widget XtNameToWidget(
extern Widget XtWindowToWidget(
extern XtPointer XtGetClassExtension(
extern ArgList XtMergeArgLists(
extern XtVarArgsList XtVaCreateArgsList(
extern Display *XtDisplay(
extern Display *XtDisplayOfObject(
extern Screen *XtScreen(
extern Screen *XtScreenOfObject(
extern Window XtWindow(
extern Window XtWindowOfObject(
extern String XtName(
extern WidgetClass XtSuperclass(
extern WidgetClass XtClass(
extern Widget XtParent(
extern void XtMapWidget(Widget /* w */);
extern void XtUnmapWidget(Widget /* w */);
extern void XtAddCallback(
extern void XtRemoveCallback(
extern void XtAddCallbacks(
extern void XtRemoveCallbacks(
extern void XtRemoveAllCallbacks(
extern void XtCallCallbacks(
extern void XtCallCallbackList(
extern XtCallbackStatus XtHasCallbacks(
extern XtGeometryResult XtMakeGeometryRequest(
extern XtGeometryResult XtQueryGeometry(
extern Widget XtCreatePopupShell(
extern Widget XtVaCreatePopupShell(
extern void XtPopup(
extern void XtPopupSpringLoaded(
extern void XtCallbackNone(
extern void XtCallbackNonexclusive(
extern void XtCallbackExclusive(
extern void XtPopdown(
extern void XtCallbackPopdown(
extern void XtMenuPopupAction(
extern Widget XtCreateWidget(
extern Widget XtCreateManagedWidget(
extern Widget XtVaCreateWidget(
extern Widget XtVaCreateManagedWidget(
extern Widget XtCreateApplicationShell( /* obsolete */
extern Widget XtAppCreateShell(
extern Widget XtVaAppCreateShell(
extern void XtToolkitInitialize(
extern XtLanguageProc XtSetLanguageProc(
extern void XtDisplayInitialize(
extern Widget XtOpenApplication(
extern Widget XtVaOpenApplication(
extern Widget XtAppInitialize( /* obsolete */
extern Widget XtVaAppInitialize( /* obsolete */
extern Widget XtInitialize( /* obsolete */
extern Display *XtOpenDisplay(
extern XtAppContext XtCreateApplicationContext(
extern void XtAppSetFallbackResources(
extern void XtDestroyApplicationContext(
extern void XtInitializeWidgetClass(
extern XtAppContext XtWidgetToApplicationContext(
extern XtAppContext XtDisplayToApplicationContext(
extern XrmDatabase XtDatabase(
extern XrmDatabase XtScreenDatabase(
extern void XtCloseDisplay(
extern void XtGetApplicationResources(
extern void XtVaGetApplicationResources(
extern void XtGetSubresources(
extern void XtVaGetSubresources(
extern void XtSetValues(
extern void XtVaSetValues(
extern void XtGetValues(
extern void XtVaGetValues(
extern void XtSetSubvalues(
extern void XtVaSetSubvalues(
extern void XtGetSubvalues(
extern void XtVaGetSubvalues(
extern void XtGetResourceList(
extern void XtGetConstraintResourceList(
extern XtErrorMsgHandler XtAppSetErrorMsgHandler(
extern void XtSetErrorMsgHandler( /* obsolete */
extern XtErrorMsgHandler XtAppSetWarningMsgHandler(
extern void XtSetWarningMsgHandler( /* obsolete */
extern void XtAppErrorMsg(
extern void XtErrorMsg( /* obsolete */
extern void XtAppWarningMsg(
extern void XtWarningMsg( /* obsolete */
extern XtErrorHandler XtAppSetErrorHandler(
extern void XtSetErrorHandler( /* obsolete */
extern XtErrorHandler XtAppSetWarningHandler(
extern void XtSetWarningHandler( /* obsolete */
extern void XtAppError(
extern void XtError( /* obsolete */
extern void XtAppWarning(
extern void XtWarning( /* obsolete */
extern XrmDatabase *XtAppGetErrorDatabase(
extern XrmDatabase *XtGetErrorDatabase( /* obsolete */
extern void XtAppGetErrorDatabaseText(
extern void XtGetErrorDatabaseText( /* obsolete */
extern char *XtMalloc(
extern char *XtCalloc(
extern char *XtRealloc(
extern void XtFree(
extern Cardinal XtAsprintf(
extern char *_XtMalloc( /* implementation-private */
extern char *_XtRealloc( /* implementation-private */
extern char *_XtCalloc( /* implementation-private */
extern void _XtFree( /* implementation-private */
extern String XtNewString(String /* str */);
extern XtWorkProcId XtAddWorkProc( /* obsolete */
extern XtWorkProcId XtAppAddWorkProc(
extern void  XtRemoveWorkProc(
extern GC XtGetGC(
extern GC XtAllocateGC(
extern void XtDestroyGC( /* obsolete */
extern void XtReleaseGC(
extern void XtAppReleaseCacheRefs(
extern void XtCallbackReleaseCacheRef(
extern void XtCallbackReleaseCacheRefList(
extern void XtSetWMColormapWindows(
extern String XtFindFile(
extern String XtResolvePathname(
extern void XtDisownSelection(
extern void XtGetSelectionValue(
extern void XtGetSelectionValues(
extern void XtAppSetSelectionTimeout(
extern void XtSetSelectionTimeout( /* obsolete */
extern unsigned long XtAppGetSelectionTimeout(
extern unsigned long XtGetSelectionTimeout( /* obsolete */
extern XSelectionRequestEvent *XtGetSelectionRequest(
extern void XtGetSelectionValueIncremental(
extern void XtGetSelectionValuesIncremental(
extern void XtSetSelectionParameters(
extern void XtGetSelectionParameters(
extern void XtCreateSelectionRequest(
extern void XtSendSelectionRequest(
extern void XtCancelSelectionRequest(
extern Atom XtReservePropertyAtom(
extern void XtReleasePropertyAtom(
extern void XtGrabKey(
extern void XtUngrabKey(
extern int XtGrabKeyboard(
extern void XtUngrabKeyboard(
extern void XtGrabButton(
extern void XtUngrabButton(
extern int XtGrabPointer(
extern void XtUngrabPointer(
extern void XtGetApplicationNameAndClass(
extern void XtRegisterDrawable(
extern void XtUnregisterDrawable(
extern Widget XtHooksOfDisplay(
extern void XtGetDisplays(
extern Boolean XtToolkitThreadInitialize(
extern void XtAppSetExitFlag(
extern Boolean XtAppGetExitFlag(
extern void XtAppLock(
extern void XtAppUnlock(
extern Boolean XtCvtStringToAcceleratorTable(
extern Boolean XtCvtStringToAtom(
extern Boolean XtCvtStringToBool(
extern Boolean XtCvtStringToBoolean(
extern Boolean XtCvtStringToCommandArgArray(
extern Boolean XtCvtStringToCursor(
extern Boolean XtCvtStringToDimension(
extern Boolean XtCvtStringToDirectoryString(
extern Boolean XtCvtStringToDisplay(
extern Boolean XtCvtStringToFile(
extern Boolean XtCvtStringToFloat(
extern Boolean XtCvtStringToFont(
extern Boolean XtCvtStringToFontSet(
extern Boolean XtCvtStringToFontStruct(
extern Boolean XtCvtStringToGravity(
extern Boolean XtCvtStringToInitialState(
extern Boolean XtCvtStringToInt(
extern Boolean XtCvtStringToPixel(
extern Boolean XtCvtStringToRestartStyle(
extern Boolean XtCvtStringToShort(
extern Boolean XtCvtStringToTranslationTable(
extern Boolean XtCvtStringToUnsignedChar(
extern Boolean XtCvtStringToVisual(
extern Boolean XtCvtIntToBool(
extern Boolean XtCvtIntToBoolean(
extern Boolean XtCvtIntToColor(
extern Boolean XtCvtIntToFloat(
extern Boolean XtCvtIntToFont(
extern Boolean XtCvtIntToPixel(
extern Boolean XtCvtIntToPixmap(
extern Boolean XtCvtIntToShort(
extern Boolean XtCvtIntToUnsignedChar(
extern Boolean XtCvtColorToPixel(
extern char *IceAuthFileName (
extern int IceLockAuthFile (
extern void IceUnlockAuthFile (
extern IceAuthFileEntry *IceReadAuthFileEntry (
extern void IceFreeAuthFileEntry (
extern Status IceWriteAuthFileEntry (
extern IceAuthFileEntry *IceGetAuthFileEntry (
extern char *IceGenerateMagicCookie (
extern void IceSetPaAuthData (
extern int IceRegisterForProtocolSetup (
extern int IceRegisterForProtocolReply (
extern IceConn IceOpenConnection (
extern IcePointer IceGetConnectionContext (
extern Status IceListenForConnections (
extern Status IceListenForWellKnownConnections (
extern int IceGetListenConnectionNumber (
extern char *IceGetListenConnectionString (
extern char *IceComposeNetworkIdList (
extern void IceFreeListenObjs (
extern void IceSetHostBasedAuthProc (
extern IceConn IceAcceptConnection (
extern void IceSetShutdownNegotiation (
extern Bool IceCheckShutdownNegotiation (
extern IceCloseStatus IceCloseConnection (
extern Status IceAddConnectionWatch (
extern void IceRemoveConnectionWatch (
extern IceProtocolSetupStatus IceProtocolSetup (
extern Status IceProtocolShutdown (
extern IceProcessMessagesStatus IceProcessMessages (
extern Status IcePing (
extern char *IceAllocScratch (
extern int IceFlush (
extern int IceGetOutBufSize (
extern int IceGetInBufSize (
extern IceConnectStatus IceConnectionStatus (
extern char *IceVendor (
extern char *IceRelease (
extern int IceProtocolVersion (
extern int IceProtocolRevision (
extern int IceConnectionNumber (
extern char *IceConnectionString (
extern unsigned long IceLastSentSequenceNumber (
extern unsigned long IceLastReceivedSequenceNumber (
extern Bool IceSwapping (
extern IceErrorHandler IceSetErrorHandler (
extern IceIOErrorHandler IceSetIOErrorHandler (
extern char *IceGetPeerName (
extern Status IceInitThreads (
extern void IceAppLockConn (
extern void IceAppUnlockConn (
extern Status _IceRead (
extern void _IceReadSkip (
extern void _IceWrite (
extern void _IceErrorBadMinor (
extern void _IceErrorBadState (
extern void _IceErrorBadLength (
extern void _IceErrorBadValue (
extern IcePoAuthStatus _IcePoMagicCookie1Proc (
extern IcePaAuthStatus _IcePaMagicCookie1Proc (
extern char *Xpermalloc(
extern XrmQuark XrmStringToQuark(
extern XrmQuark XrmPermStringToQuark(
extern XrmString XrmQuarkToString(
extern XrmQuark XrmUniqueQuark(
extern void XrmStringToQuarkList(
extern void XrmStringToBindingQuarkList(
extern void XrmDestroyDatabase(
extern void XrmQPutResource(
extern void XrmPutResource(
extern void XrmQPutStringResource(
extern void XrmPutStringResource(
extern void XrmPutLineResource(
extern Bool XrmQGetResource(
extern Bool XrmGetResource(
extern Bool XrmQGetSearchList(
extern Bool XrmQGetSearchResource(
extern void XrmSetDatabase(
extern XrmDatabase XrmGetDatabase(
extern XrmDatabase XrmGetFileDatabase(
extern Status XrmCombineFileDatabase(
extern XrmDatabase XrmGetStringDatabase(
extern void XrmPutFileDatabase(
extern void XrmMergeDatabases(
extern void XrmCombineDatabase(
extern Bool XrmEnumerateDatabase(
extern const char *XrmLocaleOfDatabase(
extern void XrmParseCommand(
extern int
extern int _Xdebug;
extern XFontStruct *XLoadQueryFont(
extern XFontStruct *XQueryFont(
extern XTimeCoord *XGetMotionEvents(
extern XModifierKeymap *XDeleteModifiermapEntry(
extern XModifierKeymap	*XGetModifierMapping(
extern XModifierKeymap	*XInsertModifiermapEntry(
extern XModifierKeymap *XNewModifiermap(
extern XImage *XCreateImage(
extern Status XInitImage(
extern XImage *XGetImage(
extern XImage *XGetSubImage(
extern Display *XOpenDisplay(
extern void XrmInitialize(
extern char *XFetchBytes(
extern char *XFetchBuffer(
extern char *XGetAtomName(
extern Status XGetAtomNames(
extern char *XGetDefault(
extern char *XDisplayName(
extern char *XKeysymToString(
extern int (*XSynchronize(
extern int (*XSetAfterFunction(
extern Atom XInternAtom(
extern Status XInternAtoms(
extern Colormap XCopyColormapAndFree(
extern Colormap XCreateColormap(
extern Cursor XCreatePixmapCursor(
extern Cursor XCreateGlyphCursor(
extern Cursor XCreateFontCursor(
extern Font XLoadFont(
extern GC XCreateGC(
extern GContext XGContextFromGC(
extern void XFlushGC(
extern Pixmap XCreatePixmap(
extern Pixmap XCreateBitmapFromData(
extern Pixmap XCreatePixmapFromBitmapData(
extern Window XCreateSimpleWindow(
extern Window XGetSelectionOwner(
extern Window XCreateWindow(
extern Colormap *XListInstalledColormaps(
extern char **XListFonts(
extern char **XListFontsWithInfo(
extern char **XGetFontPath(
extern char **XListExtensions(
extern Atom *XListProperties(
extern XHostAddress *XListHosts(
extern KeySym XKeycodeToKeysym(
extern KeySym XLookupKeysym(
extern KeySym *XGetKeyboardMapping(
extern KeySym XStringToKeysym(
extern long XMaxRequestSize(
extern long XExtendedMaxRequestSize(
extern char *XResourceManagerString(
extern char *XScreenResourceString(
extern unsigned long XDisplayMotionBufferSize(
extern VisualID XVisualIDFromVisual(
extern Status XInitThreads(
extern void XLockDisplay(
extern void XUnlockDisplay(
extern XExtCodes *XInitExtension(
extern XExtCodes *XAddExtension(
extern XExtData *XFindOnExtensionList(
extern XExtData **XEHeadOfExtensionList(
extern Window XRootWindow(
extern Window XDefaultRootWindow(
extern Window XRootWindowOfScreen(
extern Visual *XDefaultVisual(
extern Visual *XDefaultVisualOfScreen(
extern GC XDefaultGC(
extern GC XDefaultGCOfScreen(
extern unsigned long XBlackPixel(
extern unsigned long XWhitePixel(
extern unsigned long XAllPlanes(
extern unsigned long XBlackPixelOfScreen(
extern unsigned long XWhitePixelOfScreen(
extern unsigned long XNextRequest(
extern unsigned long XLastKnownRequestProcessed(
extern char *XServerVendor(
extern char *XDisplayString(
extern Colormap XDefaultColormap(
extern Colormap XDefaultColormapOfScreen(
extern Display *XDisplayOfScreen(
extern Screen *XScreenOfDisplay(
extern Screen *XDefaultScreenOfDisplay(
extern long XEventMaskOfScreen(
extern int XScreenNumberOfScreen(
extern XErrorHandler XSetErrorHandler (
extern XIOErrorHandler XSetIOErrorHandler (
extern XPixmapFormatValues *XListPixmapFormats(
extern int *XListDepths(
extern Status XReconfigureWMWindow(
extern Status XGetWMProtocols(
extern Status XSetWMProtocols(
extern Status XIconifyWindow(
extern Status XWithdrawWindow(
extern Status XGetCommand(
extern Status XGetWMColormapWindows(
extern Status XSetWMColormapWindows(
extern void XFreeStringList(
extern int XSetTransientForHint(
extern int XActivateScreenSaver(
extern int XAddHost(
extern int XAddHosts(
extern int XAddToExtensionList(
extern int XAddToSaveSet(
extern Status XAllocColor(
extern Status XAllocColorCells(
extern Status XAllocColorPlanes(
extern Status XAllocNamedColor(
extern int XAllowEvents(
extern int XAutoRepeatOff(
extern int XAutoRepeatOn(
extern int XBell(
extern int XBitmapBitOrder(
extern int XBitmapPad(
extern int XBitmapUnit(
extern int XCellsOfScreen(
extern int XChangeActivePointerGrab(
extern int XChangeGC(
extern int XChangeKeyboardControl(
extern int XChangeKeyboardMapping(
extern int XChangePointerControl(
extern int XChangeProperty(
extern int XChangeSaveSet(
extern int XChangeWindowAttributes(
extern Bool XCheckIfEvent(
extern Bool XCheckMaskEvent(
extern Bool XCheckTypedEvent(
extern Bool XCheckTypedWindowEvent(
extern Bool XCheckWindowEvent(
extern int XCirculateSubwindows(
extern int XCirculateSubwindowsDown(
extern int XCirculateSubwindowsUp(
extern int XClearArea(
extern int XClearWindow(
extern int XCloseDisplay(
extern int XConfigureWindow(
extern int XConnectionNumber(
extern int XConvertSelection(
extern int XCopyArea(
extern int XCopyGC(
extern int XCopyPlane(
extern int XDefaultDepth(
extern int XDefaultDepthOfScreen(
extern int XDefaultScreen(
extern int XDefineCursor(
extern int XDeleteProperty(
extern int XDestroyWindow(
extern int XDestroySubwindows(
extern int XDoesBackingStore(
extern Bool XDoesSaveUnders(
extern int XDisableAccessControl(
extern int XDisplayCells(
extern int XDisplayHeight(
extern int XDisplayHeightMM(
extern int XDisplayKeycodes(
extern int XDisplayPlanes(
extern int XDisplayWidth(
extern int XDisplayWidthMM(
extern int XDrawArc(
extern int XDrawArcs(
extern int XDrawImageString(
extern int XDrawImageString16(
extern int XDrawLine(
extern int XDrawLines(
extern int XDrawPoint(
extern int XDrawPoints(
extern int XDrawRectangle(
extern int XDrawRectangles(
extern int XDrawSegments(
extern int XDrawString(
extern int XDrawString16(
extern int XDrawText(
extern int XDrawText16(
extern int XEnableAccessControl(
extern int XEventsQueued(
extern Status XFetchName(
extern int XFillArc(
extern int XFillArcs(
extern int XFillPolygon(
extern int XFillRectangle(
extern int XFillRectangles(
extern int XFlush(
extern int XForceScreenSaver(
extern int XFree(
extern int XFreeColormap(
extern int XFreeColors(
extern int XFreeCursor(
extern int XFreeExtensionList(
extern int XFreeFont(
extern int XFreeFontInfo(
extern int XFreeFontNames(
extern int XFreeFontPath(
extern int XFreeGC(
extern int XFreeModifiermap(
extern int XFreePixmap(
extern int XGeometry(
extern int XGetErrorDatabaseText(
extern int XGetErrorText(
extern Bool XGetFontProperty(
extern Status XGetGCValues(
extern Status XGetGeometry(
extern Status XGetIconName(
extern int XGetInputFocus(
extern int XGetKeyboardControl(
extern int XGetPointerControl(
extern int XGetPointerMapping(
extern int XGetScreenSaver(
extern Status XGetTransientForHint(
extern int XGetWindowProperty(
extern Status XGetWindowAttributes(
extern int XGrabButton(
extern int XGrabKey(
extern int XGrabKeyboard(
extern int XGrabPointer(
extern int XGrabServer(
extern int XHeightMMOfScreen(
extern int XHeightOfScreen(
extern int XIfEvent(
extern int XImageByteOrder(
extern int XInstallColormap(
extern KeyCode XKeysymToKeycode(
extern int XKillClient(
extern Status XLookupColor(
extern int XLowerWindow(
extern int XMapRaised(
extern int XMapSubwindows(
extern int XMapWindow(
extern int XMaskEvent(
extern int XMaxCmapsOfScreen(
extern int XMinCmapsOfScreen(
extern int XMoveResizeWindow(
extern int XMoveWindow(
extern int XNextEvent(
extern int XNoOp(
extern Status XParseColor(
extern int XParseGeometry(
extern int XPeekEvent(
extern int XPeekIfEvent(
extern int XPending(
extern int XPlanesOfScreen(
extern int XProtocolRevision(
extern int XProtocolVersion(
extern int XPutBackEvent(
extern int XPutImage(
extern int XQLength(
extern Status XQueryBestCursor(
extern Status XQueryBestSize(
extern Status XQueryBestStipple(
extern Status XQueryBestTile(
extern int XQueryColor(
extern int XQueryColors(
extern Bool XQueryExtension(
extern int XQueryKeymap(
extern Bool XQueryPointer(
extern int XQueryTextExtents(
extern int XQueryTextExtents16(
extern Status XQueryTree(
extern int XRaiseWindow(
extern int XReadBitmapFile(
extern int XReadBitmapFileData(
extern int XRebindKeysym(
extern int XRecolorCursor(
extern int XRefreshKeyboardMapping(
extern int XRemoveFromSaveSet(
extern int XRemoveHost(
extern int XRemoveHosts(
extern int XReparentWindow(
extern int XResetScreenSaver(
extern int XResizeWindow(
extern int XRestackWindows(
extern int XRotateBuffers(
extern int XRotateWindowProperties(
extern int XScreenCount(
extern int XSelectInput(
extern Status XSendEvent(
extern int XSetAccessControl(
extern int XSetArcMode(
extern int XSetBackground(
extern int XSetClipMask(
extern int XSetClipOrigin(
extern int XSetClipRectangles(
extern int XSetCloseDownMode(
extern int XSetCommand(
extern int XSetDashes(
extern int XSetFillRule(
extern int XSetFillStyle(
extern int XSetFont(
extern int XSetFontPath(
extern int XSetForeground(
extern int XSetFunction(
extern int XSetGraphicsExposures(
extern int XSetIconName(
extern int XSetInputFocus(
extern int XSetLineAttributes(
extern int XSetModifierMapping(
extern int XSetPlaneMask(
extern int XSetPointerMapping(
extern int XSetScreenSaver(
extern int XSetSelectionOwner(
extern int XSetState(
extern int XSetStipple(
extern int XSetSubwindowMode(
extern int XSetTSOrigin(
extern int XSetTile(
extern int XSetWindowBackground(
extern int XSetWindowBackgroundPixmap(
extern int XSetWindowBorder(
extern int XSetWindowBorderPixmap(
extern int XSetWindowBorderWidth(
extern int XSetWindowColormap(
extern int XStoreBuffer(
extern int XStoreBytes(
extern int XStoreColor(
extern int XStoreColors(
extern int XStoreName(
extern int XStoreNamedColor(
extern int XSync(
extern int XTextExtents(
extern int XTextExtents16(
extern int XTextWidth(
extern int XTextWidth16(
extern Bool XTranslateCoordinates(
extern int XUndefineCursor(
extern int XUngrabButton(
extern int XUngrabKey(
extern int XUngrabKeyboard(
extern int XUngrabPointer(
extern int XUngrabServer(
extern int XUninstallColormap(
extern int XUnloadFont(
extern int XUnmapSubwindows(
extern int XUnmapWindow(
extern int XVendorRelease(
extern int XWarpPointer(
extern int XWidthMMOfScreen(
extern int XWidthOfScreen(
extern int XWindowEvent(
extern int XWriteBitmapFile(
extern Bool XSupportsLocale (void);
extern char *XSetLocaleModifiers(
extern XOM XOpenOM(
extern Status XCloseOM(
extern char *XSetOMValues(
extern char *XGetOMValues(
extern Display *XDisplayOfOM(
extern char *XLocaleOfOM(
extern XOC XCreateOC(
extern void XDestroyOC(
extern XOM XOMOfOC(
extern char *XSetOCValues(
extern char *XGetOCValues(
extern XFontSet XCreateFontSet(
extern void XFreeFontSet(
extern int XFontsOfFontSet(
extern char *XBaseFontNameListOfFontSet(
extern char *XLocaleOfFontSet(
extern Bool XContextDependentDrawing(
extern Bool XDirectionalDependentDrawing(
extern Bool XContextualDrawing(
extern XFontSetExtents *XExtentsOfFontSet(
extern int XmbTextEscapement(
extern int XwcTextEscapement(
extern int Xutf8TextEscapement(
extern int XmbTextExtents(
extern int XwcTextExtents(
extern int Xutf8TextExtents(
extern Status XmbTextPerCharExtents(
extern Status XwcTextPerCharExtents(
extern Status Xutf8TextPerCharExtents(
extern void XmbDrawText(
extern void XwcDrawText(
extern void Xutf8DrawText(
extern void XmbDrawString(
extern void XwcDrawString(
extern void Xutf8DrawString(
extern void XmbDrawImageString(
extern void XwcDrawImageString(
extern void Xutf8DrawImageString(
extern XIM XOpenIM(
extern Status XCloseIM(
extern char *XGetIMValues(
extern char *XSetIMValues(
extern Display *XDisplayOfIM(
extern char *XLocaleOfIM(
extern XIC XCreateIC(
extern void XDestroyIC(
extern void XSetICFocus(
extern void XUnsetICFocus(
extern wchar_t *XwcResetIC(
extern char *XmbResetIC(
extern char *Xutf8ResetIC(
extern char *XSetICValues(
extern char *XGetICValues(
extern XIM XIMOfIC(
extern Bool XFilterEvent(
extern int XmbLookupString(
extern int XwcLookupString(
extern int Xutf8LookupString(
extern XVaNestedList XVaCreateNestedList(
extern Bool XRegisterIMInstantiateCallback(
extern Bool XUnregisterIMInstantiateCallback(
extern Status XInternalConnectionNumbers(
extern void XProcessInternalConnection(
extern Status XAddConnectionWatch(
extern void XRemoveConnectionWatch(
extern void XSetAuthorization(
extern int _Xmbtowc(
extern int _Xwctomb(
extern Bool XGetEventData(
extern void XFreeEventData(
extern void (*_XCreateMutex_fn)(
extern void (*_XFreeMutex_fn)(
extern void (*_XLockMutex_fn)(
extern void (*_XUnlockMutex_fn)(
extern LockInfoPtr _Xglobal_lock;
extern void *_XGetRequest(Display *dpy, CARD8 type, size_t len);
extern void _XFlushGCCache(Display *dpy, GC gc);
extern int _XData32(
extern void _XRead32(
extern void _XDeqAsyncHandler(Display *dpy, _XAsyncHandler *handler);
extern void Data(Display *dpy, char *data, long len);
extern int _XError(
extern int _XIOError(
extern int (*_XIOErrorFunction)(
extern int (*_XErrorFunction)(
extern void _XEatData(
extern void _XEatDataWords(
extern char *_XAllocScratch(
extern char *_XAllocTemp(
extern void _XFreeTemp(
extern Visual *_XVIDtoVisual(
extern unsigned long _XSetLastRequestRead(
extern int _XGetHostname(
extern Screen *_XScreenOfWindow(
extern Bool _XAsyncErrorHandler(
extern char *_XGetAsyncReply(
extern void _XGetAsyncData(
extern void _XFlush(
extern int _XEventsQueued(
extern void _XReadEvents(
extern int _XRead(
extern void _XReadPad(
extern void _XSend(
extern Status _XReply(
extern void _XEnq(
extern void _XDeq(
extern Bool _XUnknownWireEvent(
extern Bool _XUnknownWireEventCookie(
extern Bool _XUnknownCopyEventCookie(
extern Status _XUnknownNativeEvent(
extern Bool _XWireToEvent(Display *dpy, XEvent *re, xEvent *event);
extern Bool _XDefaultWireError(Display *display, XErrorEvent *he, xError *we);
extern Bool _XPollfdCacheInit(Display *dpy);
extern void _XPollfdCacheAdd(Display *dpy, int fd);
extern void _XPollfdCacheDel(Display *dpy, int fd);
extern XID _XAllocID(Display *dpy);
extern void _XAllocIDs(Display *dpy, XID *ids, int count);
extern int _XFreeExtData(
extern int (*XESetCreateGC(
extern int (*XESetCopyGC(
extern int (*XESetFlushGC(
extern int (*XESetFreeGC(
extern int (*XESetCreateFont(
extern int (*XESetFreeFont(
extern int (*XESetCloseDisplay(
extern int (*XESetError(
extern char* (*XESetErrorString(
extern void (*XESetPrintErrorValues (
extern Bool (*XESetWireToEvent(
extern Bool (*XESetWireToEventCookie(
extern Bool (*XESetCopyEventCookie(
extern Status (*XESetEventToWire(
extern Bool (*XESetWireToError(
extern void (*XESetBeforeFlush(
extern Status _XRegisterInternalConnection(
extern void _XUnregisterInternalConnection(
extern void _XProcessInternalConnection(
extern char* __XOS2RedirRoot(
extern int _XTextHeight(
extern int _XTextHeight16(
extern int _XOpenFile(
extern int _XOpenFileMode(
extern void* _XFopenFile(
extern int _XAccessFile(
extern Status _XEventToWire(Display *dpy, XEvent *re, xEvent *event);
extern int _XF86LoadQueryLocaleFont(
extern void _XProcessWindowAttributes (
extern int _XDefaultError(
extern int _XDefaultIOError(
extern void _XSetClipRectangles (
extern Bool _XIsEventCookie(
extern void _XFreeEventCookies(
extern void _XStoreEventCookie(
extern Bool _XFetchEventCookie(
extern Bool _XCopyEventCookie(
extern void xlocaledir(
extern _XtStringDefs_h_Const char XtStrings[];
extern void XtManageChildren(
extern void XtManageChild(
extern void XtUnmanageChildren(
extern void XtUnmanageChild(
extern void XtChangeManagedSet(
extern _XtShell_h_Const char XtShellStrings[];
extern int XdmcpWriteARRAY16(XdmcpBufferPtr buffer, const ARRAY16Ptr array);
extern int XdmcpWriteARRAY32(XdmcpBufferPtr buffer, const ARRAY32Ptr array);
extern int XdmcpWriteARRAY8(XdmcpBufferPtr buffer, const ARRAY8Ptr array);
extern int XdmcpWriteARRAYofARRAY8(XdmcpBufferPtr buffer, const ARRAYofARRAY8Ptr array);
extern int XdmcpWriteCARD16(XdmcpBufferPtr buffer, unsigned value);
extern int XdmcpWriteCARD32(XdmcpBufferPtr buffer, unsigned value);
extern int XdmcpWriteCARD8(XdmcpBufferPtr buffer, unsigned value);
extern int XdmcpWriteHeader(XdmcpBufferPtr  buffer, const XdmcpHeaderPtr  header);
extern int XdmcpFlush(int fd, XdmcpBufferPtr buffer, XdmcpNetaddr to, int tolen);
extern int XdmcpReadARRAY16(XdmcpBufferPtr buffer, ARRAY16Ptr array);
extern int XdmcpReadARRAY32(XdmcpBufferPtr buffer, ARRAY32Ptr array);
extern int XdmcpReadARRAY8(XdmcpBufferPtr buffer, ARRAY8Ptr array);
extern int XdmcpReadARRAYofARRAY8(XdmcpBufferPtr buffer, ARRAYofARRAY8Ptr array);
extern int XdmcpReadCARD16(XdmcpBufferPtr buffer, CARD16Ptr valuep);
extern int XdmcpReadCARD32(XdmcpBufferPtr buffer, CARD32Ptr valuep);
extern int XdmcpReadCARD8(XdmcpBufferPtr buffer, CARD8Ptr valuep);
extern int XdmcpReadHeader(XdmcpBufferPtr buffer, XdmcpHeaderPtr header);
extern int XdmcpFill(int fd, XdmcpBufferPtr buffer, XdmcpNetaddr from, int *fromlen);
extern int XdmcpReadRemaining(const XdmcpBufferPtr buffer);
extern void XdmcpDisposeARRAY8(ARRAY8Ptr array);
extern void XdmcpDisposeARRAY16(ARRAY16Ptr array);
extern void XdmcpDisposeARRAY32(ARRAY32Ptr array);
extern void XdmcpDisposeARRAYofARRAY8(ARRAYofARRAY8Ptr array);
extern int XdmcpCopyARRAY8(const ARRAY8Ptr src, ARRAY8Ptr dst);
extern int XdmcpARRAY8Equal(const ARRAY8Ptr array1, const ARRAY8Ptr array2);
extern void XdmcpGenerateKey (XdmAuthKeyPtr key);
extern void XdmcpIncrementKey (XdmAuthKeyPtr key);
extern void XdmcpDecrementKey (XdmAuthKeyPtr key);
extern void XdmcpWrap(unsigned char *input, unsigned char *wrapper, unsigned char *output, int bytes);
extern void XdmcpUnwrap(unsigned char *input, unsigned char *wrapper, unsigned char *output, int bytes);
extern int XdmcpCompareKeys (const XdmAuthKeyPtr a, const XdmAuthKeyPtr b);
extern int XdmcpAllocARRAY16 (ARRAY16Ptr array, int length);
extern int XdmcpAllocARRAY32 (ARRAY32Ptr array, int length);
extern int XdmcpAllocARRAY8 (ARRAY8Ptr array, int length);
extern int XdmcpAllocARRAYofARRAY8 (ARRAYofARRAY8Ptr array, int length);
extern int XdmcpReallocARRAY16 (ARRAY16Ptr array, int length);
extern int XdmcpReallocARRAY32 (ARRAY32Ptr array, int length);
extern int XdmcpReallocARRAY8 (ARRAY8Ptr array, int length);
extern int XdmcpReallocARRAYofARRAY8 (ARRAYofARRAY8Ptr array, int length);
extern void _XtAddDefaultConverters(
extern void _XtSetDefaultConverterTable(
extern void _XtFreeConverterTable(
extern void _XtTableAddConverter(
extern Boolean _XtConvert(
extern void _XtAddCallback(
extern void _XtAddCallbackOnce(
extern InternalCallbackList _XtCompileCallbackList(
extern XtCallbackList _XtGetCallbackList(
extern void _XtRemoveAllCallbacks(
extern void _XtRemoveCallback(
extern void _XtPeekCallback(
extern void _XtCallConditionalCallbackList(
extern void _XtHeapInit(Heap* heap);
extern void _XtHeapFree(Heap* heap);
extern char *_XtHeapMalloc(
extern char* _XtHeapAlloc(
extern void _XtSetDefaultErrorHandlers(
extern void _XtSetDefaultSelectionTimeout(
extern XtAppContext _XtDefaultAppContext(
extern ProcessContext _XtGetProcessContext(
extern void _XtDestroyAppContexts(
extern void _XtCloseDisplays(
extern int _XtAppDestroyCount;
extern int _XtWaitForSomething(
extern PerDisplayTablePtr _XtperDisplayList;
extern XtPerDisplay _XtSortPerDisplayList(
extern XtPerDisplay _XtGetPerDisplay(
extern XtPerDisplayInputRec* _XtGetPerDisplayInput(
extern void _XtDisplayInitialize(
extern void _XtCacheFlushTag(
extern void _XtFreeActions(
extern void _XtDoPhase2Destroy(
extern void _XtDoFreeBindings(
extern void _XtExtensionSelect(
extern void _XtAllocWWTable(
extern void _XtFreeWWTable(
extern String _XtGetUserName(String dest, int len);
extern XrmDatabase _XtPreparseCommandLine(XrmOptionDescRec *urlist,
extern xthread_t (*_x11_thr_self)();
extern void _Xthread_init(void);
extern struct _xthread_waiter *_Xthread_waiter();
extern Boolean XtIsRectObj(Widget);
extern Boolean XtIsWidget(Widget);
extern Boolean XtIsComposite(Widget);
extern Boolean XtIsConstraint(Widget);
extern Boolean XtIsShell(Widget);
extern Boolean XtIsWMShell(Widget);
extern Boolean XtIsTopLevelShell(Widget);
extern Widget _XtWindowedAncestor( /* internal; implementation-dependent */
extern void _XtInherit(
extern void _XtHandleFocus(
extern void XtCreateWindow(
extern void XtResizeWidget(
extern void XtMoveWidget(
extern void XtConfigureWidget(
extern void XtResizeWindow(
extern void XtProcessLock(
extern void XtProcessUnlock(
extern void (*_XtProcessLock)(
extern void (*_XtProcessUnlock)(
extern void (*_XtInitAppLock)(
extern void _XtResourceConfigurationEH(
extern void _XtDependencies(
extern void _XtResourceDependencies(
extern void _XtConstraintResDependencies(
extern XtCacheRef* _XtGetResources(
extern void _XtCopyFromParent(
extern void _XtCopyToArg(char *src, XtArgVal *dst, unsigned int size);
extern void _XtCopyFromArg(XtArgVal src, char *dst, unsigned int size);
extern XrmResourceList* _XtCreateIndirectionTable(XtResourceList resources,
extern void _XtResourceListInitialize(void);
extern Status XcmsAddColorSpace (
extern Status XcmsAddFunctionSet (
extern Status XcmsAllocColor (
extern Status XcmsAllocNamedColor (
extern XcmsCCC XcmsCCCOfColormap (
extern Status XcmsCIELabClipab(
extern Status XcmsCIELabClipL(
extern Status XcmsCIELabClipLab(
extern Status XcmsCIELabQueryMaxC (
extern Status XcmsCIELabQueryMaxL (
extern Status XcmsCIELabQueryMaxLC (
extern Status XcmsCIELabQueryMinL (
extern Status XcmsCIELabToCIEXYZ (
extern Status XcmsCIELabWhiteShiftColors(
extern Status XcmsCIELuvClipL(
extern Status XcmsCIELuvClipLuv(
extern Status XcmsCIELuvClipuv(
extern Status XcmsCIELuvQueryMaxC (
extern Status XcmsCIELuvQueryMaxL (
extern Status XcmsCIELuvQueryMaxLC (
extern Status XcmsCIELuvQueryMinL (
extern Status XcmsCIELuvToCIEuvY (
extern Status XcmsCIELuvWhiteShiftColors(
extern Status XcmsCIEXYZToCIELab (
extern Status XcmsCIEXYZToCIEuvY (
extern Status XcmsCIEXYZToCIExyY (
extern Status XcmsCIEXYZToRGBi (
extern Status XcmsCIEuvYToCIELuv (
extern Status XcmsCIEuvYToCIEXYZ (
extern Status XcmsCIEuvYToTekHVC (
extern Status XcmsCIExyYToCIEXYZ (
extern XcmsColor *XcmsClientWhitePointOfCCC (
extern Status XcmsConvertColors (
extern XcmsCCC XcmsCreateCCC (
extern XcmsCCC XcmsDefaultCCC (
extern Display *XcmsDisplayOfCCC (
extern XcmsColorFormat XcmsFormatOfPrefix (
extern void XcmsFreeCCC (
extern Status XcmsLookupColor (
extern char *XcmsPrefixOfFormat (
extern Status XcmsQueryBlack (
extern Status XcmsQueryBlue (
extern Status XcmsQueryColor (
extern Status XcmsQueryColors (
extern Status XcmsQueryGreen (
extern Status XcmsQueryRed (
extern Status XcmsQueryWhite (
extern Status XcmsRGBiToCIEXYZ (
extern Status XcmsRGBiToRGB (
extern Status XcmsRGBToRGBi (
extern int XcmsScreenNumberOfCCC (
extern XcmsColor *XcmsScreenWhitePointOfCCC (
extern XcmsCCC XcmsSetCCCOfColormap(
extern XcmsCompressionProc XcmsSetCompressionProc (
extern XcmsWhiteAdjustProc XcmsSetWhiteAdjustProc (
extern Status XcmsSetWhitePoint (
extern Status XcmsStoreColor (
extern Status XcmsStoreColors (
extern Status XcmsTekHVCClipC(
extern Status XcmsTekHVCClipV(
extern Status XcmsTekHVCClipVC(
extern Status XcmsTekHVCQueryMaxC (
extern Status XcmsTekHVCQueryMaxV (
extern Status XcmsTekHVCQueryMaxVC (
extern Status XcmsTekHVCQueryMaxVSamples (
extern Status XcmsTekHVCQueryMinV (
extern Status XcmsTekHVCToCIEuvY (
extern Status XcmsTekHVCWhiteShiftColors(
extern Visual *XcmsVisualOfCCC (
extern char *_Xsetlocale(
extern int	XkbReqCode;
extern int	XkbEventBase;
extern int	XkbKeyboardErrorCode;
extern int	XkbDisableLockActions;
extern char *	XkbBaseDirectory;
extern char *	XkbBinDirectory;
extern char *	XkbInitialMap;
extern int	_XkbClientMajor;
extern int	_XkbClientMinor;
extern unsigned	int XkbXIUnsupported;
extern char *	XkbModelUsed,*XkbLayoutUsed,*XkbVariantUsed,*XkbOptionsUsed;
extern Bool	noXkbExtension;
extern Bool	XkbWantRulesProp;
extern pointer	XkbLastRepeatEvent;
extern CARD32	xkbDebugFlags;
extern CARD32	xkbDebugCtrls;
extern void XkbUseMsg(
extern int XkbProcessArguments(
extern DeviceIntPtr _XkbLookupAnyDevice(
extern DeviceIntPtr _XkbLookupKeyboard(
extern DeviceIntPtr _XkbLookupBellDevice(
extern DeviceIntPtr _XkbLookupLedDevice(
extern DeviceIntPtr _XkbLookupButtonDevice(
extern  void XkbSetActionKeyMods(
extern Bool XkbCheckActionVMods(
extern Bool XkbApplyVModChanges(
extern void XkbApplyVModChangesToAllDevices(
extern Bool XkbVirtualModsToReal(
extern KeySym *XkbResizeKeySyms(
extern XkbAction *XkbResizeKeyActions(
extern void XkbUpdateKeyTypesFromCore(
extern void XkbUpdateActions(
extern void XkbUpdateCoreDescription(
extern void XkbApplyMappingChange(
extern void XkbSetIndicators(
extern void XkbUpdateIndicators(
extern XkbSrvLedInfoPtr XkbAllocSrvLedInfo(
extern XkbSrvLedInfoPtr XkbFindSrvLedInfo(
extern void XkbApplyLedNameChanges(
extern void XkbApplyLedMapChanges(
extern void XkbApplyLedStateChanges(
extern void XkbUpdateLedAutoState(
extern void XkbFlushLedEvents(	
extern void XkbUpdateAllDeviceIndicators(
extern unsigned int XkbIndicatorsToUpdate(
extern void XkbComputeDerivedState(
extern void XkbCheckSecondaryEffects(
extern void XkbCheckIndicatorMaps(
extern unsigned int XkbStateChangedFlags(
extern void XkbSendNotification(
extern void XkbProcessKeyboardEvent(
extern void XkbProcessOtherEvent(
extern void XkbHandleActions(
extern Bool XkbEnableDisableControls(
extern void AccessXInit(
extern Bool AccessXFilterPressEvent(
extern Bool AccessXFilterReleaseEvent(
extern void AccessXCancelRepeatKey(
extern void AccessXComputeCurveFactor(
extern Status XkbResizeDeviceButtonActions(
extern int XkbDDXInitDevice(
extern 	int XkbDDXUsesSoftRepeat(
extern void XkbDDXChangeControls(
extern void XkbDDXUpdateIndicators(
extern void XkbDDXUpdateDeviceIndicators(
extern void XkbDDXFakePointerButton(
extern void XkbDDXFakePointerMotion(
extern void XkbDDXFakeDeviceButton(
extern int XkbDDXTerminateServer(
extern int XkbDDXSwitchScreen(
extern int XkbDDXPrivate(
extern void XkbDisableComputedAutoRepeats(
extern void XkbSetRepeatKeys(
extern XkbGeometryPtr XkbLookupNamedGeometry(
extern char *	_XkbDupString(
extern void	XkbConvertCase(
extern int XkbFinishDeviceInit(
extern void XkbFreeSrvLedInfo(
extern void XkbFreeInfo(
extern Status XkbChangeTypesOfKey(
extern XkbKeyTypePtr XkbAddKeyType(
extern Status XkbInitCanonicalKeyTypes(
extern int XkbKeyTypesForCoreSymbols(
extern Bool XkbApplyCompatMapToKey(
extern Bool XkbUpdateMapFromCore(
extern void XkbFreeControls(
extern void XkbFreeIndicatorMaps(
extern Bool XkbApplyVirtualModChanges(
extern Bool XkbUpdateActionVirtualMods(
extern void XkbUpdateKeyTypeVirtualMods(
extern void XkbSendNewKeyboardNotify(
extern void	XkbSetRulesUsed(
extern XPointer XkbDDXPreloadConfig(
extern Bool XShapeQueryExtension (
extern Status XShapeQueryVersion (
extern void XShapeCombineRegion (
extern void XShapeCombineRectangles (
extern void XShapeCombineMask (
extern void XShapeCombineShape (
extern void XShapeOffsetShape (
extern Status XShapeQueryExtents (
extern void XShapeSelectInput (
extern unsigned long XShapeInputSelected (
extern XRectangle *XShapeGetRectangles (
extern "C" {
extern int	XChangeKeyboardDevice(
extern int	XChangePointerDevice(
extern int	XGrabDevice(
extern int	XUngrabDevice(
extern int	XGrabDeviceKey(
extern int	XUngrabDeviceKey(
extern int	XGrabDeviceButton(
extern int	XUngrabDeviceButton(
extern int	XAllowDeviceEvents(
extern int	XGetDeviceFocus(
extern int	XSetDeviceFocus(
extern XFeedbackState	*XGetFeedbackControl(
extern void	XFreeFeedbackList(
extern int	XChangeFeedbackControl(
extern int	XDeviceBell(
extern KeySym	*XGetDeviceKeyMapping(
extern int	XChangeDeviceKeyMapping(
extern XModifierKeymap	*XGetDeviceModifierMapping(
extern int	XSetDeviceModifierMapping(
extern int	XSetDeviceButtonMapping(
extern int	XGetDeviceButtonMapping(
extern XDeviceState	*XQueryDeviceState(
extern void	XFreeDeviceState(
extern XExtensionVersion	*XGetExtensionVersion(
extern XDeviceInfo	*XListInputDevices(
extern void	XFreeDeviceList(
extern XDevice	*XOpenDevice(
extern int	XCloseDevice(
extern int	XSetDeviceMode(
extern int	XSetDeviceValuators(
extern XDeviceControl	*XGetDeviceControl(
extern int	XChangeDeviceControl(
extern int	XSelectExtensionEvent(
extern int XGetSelectedExtensionEvents(
extern int	XChangeDeviceDontPropagateList(
extern XEventClass	*XGetDeviceDontPropagateList(
extern Status	XSendExtensionEvent(
extern XDeviceTimeCoord	*XGetDeviceMotionEvents(
extern void	XFreeDeviceMotionEvents(
extern void	XFreeDeviceControl(
extern Atom*   XListDeviceProperties(
extern void XChangeDeviceProperty(
extern void
extern Status
extern Status XdbeQueryExtension(
extern XdbeBackBuffer XdbeAllocateBackBufferName(
extern Status XdbeDeallocateBackBufferName(
extern Status XdbeSwapBuffers(
extern Status XdbeBeginIdiom(
extern Status XdbeEndIdiom(
extern XdbeScreenVisualInfo *XdbeGetVisualInfo(
extern void XdbeFreeVisualInfo(
extern XdbeBackBufferAttributes *XdbeGetBackBufferAttributes(
extern XExtensionInfo *XextCreateExtension(
extern void XextDestroyExtension(
extern XExtDisplayInfo *XextAddDisplay(
extern int XextRemoveDisplay(
extern XExtDisplayInfo *XextFindDisplay(
extern XkbShapePtr
extern XkbKeyPtr
extern XkbRowPtr
extern XkbSectionPtr
extern XkbOverlayPtr
extern XkbOverlayRowPtr
extern XkbOverlayKeyPtr
extern XkbDoodadPtr
extern void
extern void
extern void
extern void
extern void
extern void
extern void
extern void
extern void
extern void
extern void
extern void
extern void
extern void
extern Status
extern Status
extern Status
extern Status
extern Status
extern Status
extern Status
extern Status
extern Status
extern Status
extern Status
extern Status
extern Status
extern Status
extern XextErrorHandler XSetExtensionErrorHandler(
extern int XMissingExtension(
extern Bool DPMSQueryExtension(Display *, int *, int *);
extern Status DPMSGetVersion(Display *, int *, int *);
extern Bool DPMSCapable(Display *);
extern Status DPMSSetTimeouts(Display *, CARD16, CARD16, CARD16);
extern Bool DPMSGetTimeouts(Display *, CARD16 *, CARD16 *, CARD16 *);
extern Status DPMSEnable(Display *);
extern Status DPMSDisable(Display *);
extern Status DPMSForceLevel(Display *, CARD16);
extern Status DPMSInfo(Display *, CARD16 *, BOOL *);
extern pointer SyncCreateSystemCounter(
extern void SyncChangeCounter(
extern void SyncDestroySystemCounter(
extern void InitServertime(void);
extern Bool XPanoramiXQueryExtension (
extern Status XPanoramiXQueryVersion(
extern XPanoramiXInfo *XPanoramiXAllocInfo (
extern Status XPanoramiXGetState (
extern Status XPanoramiXGetScreenCount (
extern Status XPanoramiXGetScreenSize (
extern Status XvMCBeginSurface(Display *display,
extern Status XvMCLoadQMatrix(Display *display, XvMCContext *context,
extern Status XvMCPutSlice(Display *display,XvMCContext *context,
extern Status XvMCPutSlice2(Display *display,XvMCContext *context,
extern Bool XScreenSaverQueryExtension (
extern Status XScreenSaverQueryVersion (
extern XScreenSaverInfo *XScreenSaverAllocInfo (
extern Status XScreenSaverQueryInfo (
extern void XScreenSaverSelectInput (
extern void XScreenSaverSetAttributes (
extern void XScreenSaverUnsetAttributes (
extern Status XScreenSaverRegister (
extern Status XScreenSaverUnregister (
extern Status XScreenSaverGetRegistered (
extern void XScreenSaverSuspend (
extern int XvQueryExtension(
extern int XvQueryAdaptors(
extern int XvQueryEncodings(
extern int XvPutVideo(
extern int XvPutStill(
extern int XvGetVideo(
extern int XvGetStill(
extern int XvStopVideo(
extern int XvGrabPort(
extern int XvUngrabPort(
extern int XvSelectVideoNotify(
extern int XvSelectPortNotify(
extern int XvSetPortAttribute(
extern int XvGetPortAttribute(
extern int XvQueryBestSize(
extern XvAttribute *XvQueryPortAttributes(
extern void XvFreeAdaptorInfo(
extern void XvFreeEncodingInfo(
extern XvImageFormatValues *XvListImageFormats (
extern XvImage *XvCreateImage (
extern int XvPutImage (
extern int XvShmPutImage (
extern XvImage *XvShmCreateImage (
extern void XSyncIntToValue(
extern void XSyncIntsToValue(
extern Bool XSyncValueGreaterThan(
extern Bool XSyncValueLessThan(
extern Bool XSyncValueGreaterOrEqual(
extern Bool XSyncValueLessOrEqual(
extern Bool XSyncValueEqual(
extern Bool XSyncValueIsNegative(
extern Bool XSyncValueIsZero(
extern Bool XSyncValueIsPositive(
extern unsigned int XSyncValueLow32(
extern int XSyncValueHigh32(
extern void XSyncValueAdd(
extern void XSyncValueSubtract(
extern void XSyncMaxValue(
extern void XSyncMinValue(
extern Status XSyncQueryExtension(
extern Status XSyncInitialize(
extern XSyncSystemCounter *XSyncListSystemCounters(
extern void XSyncFreeSystemCounterList(
extern XSyncCounter XSyncCreateCounter(
extern Status XSyncSetCounter(
extern Status XSyncChangeCounter(
extern Status XSyncDestroyCounter(
extern Status XSyncQueryCounter(
extern Status XSyncAwait(
extern XSyncAlarm XSyncCreateAlarm(
extern Status XSyncDestroyAlarm(
extern Status XSyncQueryAlarm(
extern Status XSyncChangeAlarm(
extern Status XSyncSetPriority(
extern Status XSyncGetPriority(
extern XSyncFence XSyncCreateFence(
extern Bool XSyncTriggerFence(
extern Bool XSyncResetFence(
extern Bool XSyncDestroyFence(
extern Bool XSyncQueryFence(
extern Bool XSyncAwaitFence(
extern Bool XmbufQueryExtension(
extern Status XmbufGetVersion(
extern int XmbufCreateBuffers(
extern void XmbufDestroyBuffers(
extern void XmbufDisplayBuffers(
extern Status XmbufGetWindowAttributes(
extern void XmbufChangeWindowAttributes(
extern Status XmbufGetBufferAttributes(
extern void XmbufChangeBufferAttributes(
extern Status XmbufGetScreenInfo(
extern Window XmbufCreateStereoWindow(
extern void XmbufClearBufferArea(
extern Bool     XIQueryPointer(
extern Bool     XIWarpPointer(
extern Status   XIDefineCursor(
extern Status   XIUndefineCursor(
extern Status   XIChangeHierarchy(
extern Status   XISetClientPointer(
extern Bool     XIGetClientPointer(
extern int      XISelectEvents(
extern XIEventMask *XIGetSelectedEvents(
extern Status XIQueryVersion(
extern XIDeviceInfo* XIQueryDevice(
extern Status XISetFocus(
extern Status XIGetFocus(
extern Status XIGrabDevice(
extern Status XIUngrabDevice(
extern Status XIAllowEvents(
extern Status XIAllowTouchEvents(
extern int XIGrabButton(
extern int XIGrabKeycode(
extern int XIGrabEnter(
extern int XIGrabFocusIn(
extern int XIGrabTouchBegin(
extern Status XIUngrabButton(
extern Status XIUngrabKeycode(
extern Status XIUngrabEnter(
extern Status XIUngrabFocusIn(
extern Status XIUngrabTouchBegin(
extern Atom *XIListProperties(
extern void XIChangeProperty(
extern void
extern Status
extern void
extern void
extern void XIFreeDeviceInfo(XIDeviceInfo       *info);
extern int
extern int
extern int
extern int
extern void
extern TMGlobalRec _XtGlobalTM;
extern void _XtPopup(
extern String _XtPrintXlations(
extern void _XtRegisterGrabs(
extern XtPointer _XtInitializeActionData(
extern void _XtAddEventSeqToStateTree(
extern Boolean _XtMatchUsingStandardMods(
extern Boolean _XtMatchUsingDontCareMods(
extern Boolean _XtRegularMatch(
extern Boolean _XtMatchAtom(
extern void _XtTranslateEvent(
extern void _XtBuildKeysymTables(Display *dpy, XtPerDisplay pd);
extern void  _XtDisplayTranslations(
extern void  _XtDisplayAccelerators(
extern void _XtDisplayInstalledAccelerators(
extern void _XtPopupInitialize(
extern void _XtBindActions(
extern Boolean _XtComputeLateBindings(
extern XtTranslations _XtCreateXlations(
extern Boolean _XtCvtMergeTranslations(
extern TMShortCard _XtGetModifierIndex(
extern TMShortCard _XtGetQuarkIndex(
extern XtTranslations _XtGetTranslationValue(
extern TMShortCard _XtGetTypeIndex(
extern void _XtGrabInitialize(
extern void _XtInstallTranslations(
extern void _XtRemoveTranslations(
extern void _XtDestroyTMData(
extern void _XtMergeTranslations(
extern void _XtActionInitialize(
extern TMStateTree _XtParseTreeToStateTree(
extern String _XtPrintActions(
extern String _XtPrintState(
extern String _XtPrintEventSeq(
extern void _XtTraverseStateTree(
extern void _XtTranslateInitialize(
extern void _XtAddTMConverters(
extern void _XtUnbindActions(
extern void _XtUnmergeTranslations(
extern void _XtAllocTMContext(XtPerDisplay pd);
extern int XDestroyImage(
extern unsigned long XGetPixel(
extern int XPutPixel(
extern XImage *XSubImage(
extern int XAddPixel(
extern XClassHint *XAllocClassHint (
extern XIconSize *XAllocIconSize (
extern XSizeHints *XAllocSizeHints (
extern XStandardColormap *XAllocStandardColormap (
extern XWMHints *XAllocWMHints (
extern int XClipBox(
extern Region XCreateRegion(
extern const char *XDefaultString (void);
extern int XDeleteContext(
extern int XDestroyRegion(
extern int XEmptyRegion(
extern int XEqualRegion(
extern int XFindContext(
extern Status XGetClassHint(
extern Status XGetIconSizes(
extern Status XGetNormalHints(
extern Status XGetRGBColormaps(
extern Status XGetSizeHints(
extern Status XGetStandardColormap(
extern Status XGetTextProperty(
extern XVisualInfo *XGetVisualInfo(
extern Status XGetWMClientMachine(
extern XWMHints *XGetWMHints(
extern Status XGetWMIconName(
extern Status XGetWMName(
extern Status XGetWMNormalHints(
extern Status XGetWMSizeHints(
extern Status XGetZoomHints(
extern int XIntersectRegion(
extern void XConvertCase(
extern int XLookupString(
extern Status XMatchVisualInfo(
extern int XOffsetRegion(
extern Bool XPointInRegion(
extern Region XPolygonRegion(
extern int XRectInRegion(
extern int XSaveContext(
extern int XSetClassHint(
extern int XSetIconSizes(
extern int XSetNormalHints(
extern void XSetRGBColormaps(
extern int XSetSizeHints(
extern int XSetStandardProperties(
extern void XSetTextProperty(
extern void XSetWMClientMachine(
extern int XSetWMHints(
extern void XSetWMIconName(
extern void XSetWMName(
extern void XSetWMNormalHints(
extern void XSetWMProperties(
extern void XmbSetWMProperties(
extern void Xutf8SetWMProperties(
extern void XSetWMSizeHints(
extern int XSetRegion(
extern void XSetStandardColormap(
extern int XSetZoomHints(
extern int XShrinkRegion(
extern Status XStringListToTextProperty(
extern int XSubtractRegion(
extern int XmbTextListToTextProperty(
extern int XwcTextListToTextProperty(
extern int Xutf8TextListToTextProperty(
extern void XwcFreeStringList(
extern Status XTextPropertyToStringList(
extern int XmbTextPropertyToTextList(
extern int XwcTextPropertyToTextList(
extern int Xutf8TextPropertyToTextList(
extern int XUnionRectWithRegion(
extern int XUnionRegion(
extern int XWMGeometry(
extern int XXorRegion(
extern void _XtEventInitialize(
extern void _XtFreeEventTable(
extern Boolean _XtOnGrabList(
extern void _XtRemoveAllInputs(
extern void _XtRefreshMapping(
extern void _XtSendFocusEvent(
extern EventMask _XtConvertTypeToMask(
extern Widget _XtFindRemapWidget(XEvent *event, Widget widget,
extern void _XtUngrabBadGrabs(XEvent *event, Widget widget,
extern void _XtFillAncestorList(Widget **listPtr, int *maxElemsPtr,
extern Boolean XtAppPeekEvent_SkipTimer;
extern void _XtShellGetCoordinates(Widget widget, Position *x, Position *y);
extern void _XtCountVaList(
extern void _XtVaToArgList(
extern void _XtVaToTypedArgList(
extern XtTypedArgList _XtVaCreateTypedArgList(
extern void _XtFreeArgList(
extern void _XtGetApplicationResources(
extern void _XtGetSubresources(
extern "C" {
extern LockInfoPtr _Xglobal_lock;
extern void (*_XLockMutex_fn)(
extern void (*_XUnlockMutex_fn)(
extern void (*_XLockMutex_fn)(
extern void (*_XUnlockMutex_fn)(
extern void (*_XtProcessLock)(void);
extern void XtProcessLock(
extern void XtProcessUnlock(
extern struct passwd *getpwuid(), *getpwnam();
extern Widget _XtCreateWidget(String name, WidgetClass widget_class,
extern Widget _XtCreatePopupShell(String name, WidgetClass widget_class,
extern Widget _XtAppCreateShell(String name, String class,
extern Widget _XtCreateHookObj(Screen *screen);
extern Widget _XtVaOpenApplication(XtAppContext *app_context_return,
extern Widget _XtVaAppInitialize(XtAppContext *app_context_return,
extern String XtCXtToolkitError;
extern void _XtAllocError(
extern void _XtCompileResourceList(
extern XtGeometryResult _XtMakeGeometryRequest(
extern Boolean _XtIsHookObject(
extern void _XtAddShellToHookObj(
extern void _XtGClistFree(Display *dpy, XtPerDisplay pd);
extern void _XtGeoTab (int);
extern void _XtGeoTrace (
extern char* __XtMalloc (
extern char* __XtCalloc (
extern void *malloc (size_t __size) __THROW __attribute_malloc__ __wur;
extern void *calloc (size_t __nmemb, size_t __size)
extern void *realloc (void *__ptr, size_t __size)
extern void free (void *__ptr) __THROW;
extern void cfree (void *__ptr) __THROW;
extern void *memalign (size_t __alignment, size_t __size)
extern void *valloc (size_t __size) __THROW __attribute_malloc__ __wur;
extern void *pvalloc (size_t __size) __THROW __attribute_malloc__ __wur;
extern void *(*__morecore) (ptrdiff_t __size);
extern void *__default_morecore (ptrdiff_t __size)
extern struct mallinfo mallinfo (void) __THROW;
extern int mallopt (int __param, int __val) __THROW;
extern int malloc_trim (size_t __pad) __THROW;
extern size_t malloc_usable_size (void *__ptr) __THROW;
extern void malloc_stats (void) __THROW;
extern int malloc_info (int __options, FILE *__fp) __THROW;
extern void *malloc_get_state (void) __THROW;
extern int malloc_set_state (void *__ptr) __THROW;
extern void (*__MALLOC_HOOK_VOLATILE __malloc_initialize_hook) (void)
extern void (*__MALLOC_HOOK_VOLATILE __free_hook) (void *__ptr,
extern void *(*__MALLOC_HOOK_VOLATILE __malloc_hook)(size_t __size,
extern void *(*__MALLOC_HOOK_VOLATILE __realloc_hook)(void *__ptr,
extern void *(*__MALLOC_HOOK_VOLATILE __memalign_hook)(size_t __alignment,
extern void (*__MALLOC_HOOK_VOLATILE __after_morecore_hook) (void);
extern void __malloc_check_init (void) __THROW __MALLOC_DEPRECATED;
extern "C" {
extern intmax_t imaxabs (intmax_t __n) __THROW __attribute__ ((__const__));
extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
extern intmax_t strtoimax (const char *__restrict __nptr,
extern uintmax_t strtoumax (const char *__restrict __nptr,
extern intmax_t wcstoimax (const __gwchar_t *__restrict __nptr,
extern uintmax_t wcstoumax (const __gwchar_t *__restrict __nptr,
extern long int __strtol_internal (const char *__restrict __nptr,
extern unsigned long int __strtoul_internal (const char *__restrict __nptr,
extern long int __wcstol_internal (const __gwchar_t * __restrict __nptr,
extern unsigned long int __wcstoul_internal (const __gwchar_t *
extern long long int __strtoll_internal (const char *__restrict __nptr,
extern unsigned long long int __strtoull_internal (const char *
extern long long int __wcstoll_internal (const __gwchar_t *__restrict __nptr,
extern unsigned long long int __wcstoull_internal (const __gwchar_t *
extern NCURSES_EXPORT_VAR(FIELDTYPE *) TYPE_ALPHA;
extern NCURSES_EXPORT_VAR(FIELDTYPE *) TYPE_ALNUM;
extern NCURSES_EXPORT_VAR(FIELDTYPE *) TYPE_ENUM;
extern NCURSES_EXPORT_VAR(FIELDTYPE *) TYPE_INTEGER;
extern NCURSES_EXPORT_VAR(FIELDTYPE *) TYPE_NUMERIC;
extern NCURSES_EXPORT_VAR(FIELDTYPE *) TYPE_REGEXP;
extern NCURSES_EXPORT_VAR(FIELDTYPE *) TYPE_IPV4;      /* Internet IP Version 4 address */
extern NCURSES_EXPORT(FIELDTYPE *) new_fieldtype (
extern NCURSES_EXPORT(FIELDTYPE *) link_fieldtype(
extern NCURSES_EXPORT(int)	free_fieldtype (FIELDTYPE *);
extern NCURSES_EXPORT(int)	set_fieldtype_arg (FIELDTYPE *,
extern NCURSES_EXPORT(int)	 set_fieldtype_choice (FIELDTYPE *,
extern NCURSES_EXPORT(FIELD *)	new_field (int,int,int,int,int,int);
extern NCURSES_EXPORT(FIELD *)	dup_field (FIELD *,int,int);
extern NCURSES_EXPORT(FIELD *)	link_field (FIELD *,int,int);
extern NCURSES_EXPORT(int)	free_field (FIELD *);
extern NCURSES_EXPORT(int)	field_info (const FIELD *,int *,int *,int *,int *,int *,int *);
extern NCURSES_EXPORT(int)	dynamic_field_info (const FIELD *,int *,int *,int *);
extern NCURSES_EXPORT(int)	set_max_field ( FIELD *,int);
extern NCURSES_EXPORT(int)	move_field (FIELD *,int,int);
extern NCURSES_EXPORT(int)	set_field_type (FIELD *,FIELDTYPE *,...);
extern NCURSES_EXPORT(int)	set_new_page (FIELD *,bool);
extern NCURSES_EXPORT(int)	set_field_just (FIELD *,int);
extern NCURSES_EXPORT(int)	field_just (const FIELD *);
extern NCURSES_EXPORT(int)	set_field_fore (FIELD *,chtype);
extern NCURSES_EXPORT(int)	set_field_back (FIELD *,chtype);
extern NCURSES_EXPORT(int)	set_field_pad (FIELD *,int);
extern NCURSES_EXPORT(int)	field_pad (const FIELD *);
extern NCURSES_EXPORT(int)	set_field_buffer (FIELD *,int,const char *);
extern NCURSES_EXPORT(int)	set_field_status (FIELD *,bool);
extern NCURSES_EXPORT(int)	set_field_userptr (FIELD *, void *);
extern NCURSES_EXPORT(int)	set_field_opts (FIELD *,Field_Options);
extern NCURSES_EXPORT(int)	field_opts_on (FIELD *,Field_Options);
extern NCURSES_EXPORT(int)	field_opts_off (FIELD *,Field_Options);
extern NCURSES_EXPORT(chtype)	field_fore (const FIELD *);
extern NCURSES_EXPORT(chtype)	field_back (const FIELD *);
extern NCURSES_EXPORT(bool)	new_page (const FIELD *);
extern NCURSES_EXPORT(bool)	field_status (const FIELD *);
extern NCURSES_EXPORT(void *)	field_arg (const FIELD *);
extern NCURSES_EXPORT(void *)	field_userptr (const FIELD *);
extern NCURSES_EXPORT(FIELDTYPE *)	field_type (const FIELD *);
extern NCURSES_EXPORT(char *)	field_buffer (const FIELD *,int);
extern NCURSES_EXPORT(Field_Options)	field_opts (const FIELD *);
extern NCURSES_EXPORT(FORM *)	new_form (FIELD **);
extern NCURSES_EXPORT(FIELD **)	form_fields (const FORM *);
extern NCURSES_EXPORT(FIELD *)	current_field (const FORM *);
extern NCURSES_EXPORT(WINDOW *)	form_win (const FORM *);
extern NCURSES_EXPORT(WINDOW *)	form_sub (const FORM *);
extern NCURSES_EXPORT(Form_Hook)	form_init (const FORM *);
extern NCURSES_EXPORT(Form_Hook)	form_term (const FORM *);
extern NCURSES_EXPORT(Form_Hook)	field_init (const FORM *);
extern NCURSES_EXPORT(Form_Hook)	field_term (const FORM *);
extern NCURSES_EXPORT(int)	free_form (FORM *);
extern NCURSES_EXPORT(int)	set_form_fields (FORM *,FIELD **);
extern NCURSES_EXPORT(int)	field_count (const FORM *);
extern NCURSES_EXPORT(int)	set_form_win (FORM *,WINDOW *);
extern NCURSES_EXPORT(int)	set_form_sub (FORM *,WINDOW *);
extern NCURSES_EXPORT(int)	set_current_field (FORM *,FIELD *);
extern NCURSES_EXPORT(int)	field_index (const FIELD *);
extern NCURSES_EXPORT(int)	set_form_page (FORM *,int);
extern NCURSES_EXPORT(int)	form_page (const FORM *);
extern NCURSES_EXPORT(int)	scale_form (const FORM *,int *,int *);
extern NCURSES_EXPORT(int)	set_form_init (FORM *,Form_Hook);
extern NCURSES_EXPORT(int)	set_form_term (FORM *,Form_Hook);
extern NCURSES_EXPORT(int)	set_field_init (FORM *,Form_Hook);
extern NCURSES_EXPORT(int)	set_field_term (FORM *,Form_Hook);
extern NCURSES_EXPORT(int)	post_form (FORM *);
extern NCURSES_EXPORT(int)	unpost_form (FORM *);
extern NCURSES_EXPORT(int)	pos_form_cursor (FORM *);
extern NCURSES_EXPORT(int)	form_driver (FORM *,int);
extern NCURSES_EXPORT(int)	form_driver_w (FORM *,int,wchar_t);
extern NCURSES_EXPORT(int)	set_form_userptr (FORM *,void *);
extern NCURSES_EXPORT(int)	set_form_opts (FORM *,Form_Options);
extern NCURSES_EXPORT(int)	form_opts_on (FORM *,Form_Options);
extern NCURSES_EXPORT(int)	form_opts_off (FORM *,Form_Options);
extern NCURSES_EXPORT(int)	form_request_by_name (const char *);
extern NCURSES_EXPORT(const char *)	form_request_name (int);
extern NCURSES_EXPORT(void *)	form_userptr (const FORM *);
extern NCURSES_EXPORT(Form_Options)	form_opts (const FORM *);
extern NCURSES_EXPORT(bool)	data_ahead (const FORM *);
extern NCURSES_EXPORT(bool)	data_behind (const FORM *);
extern NCURSES_EXPORT(FORM *)	NCURSES_SP_NAME(new_form) (SCREEN*, FIELD **);
extern char *crypt (const char *__key, const char *__salt)
extern void setkey (const char *__key) __THROW __nonnull ((1));
extern void encrypt (char *__glibc_block, int __edflag)
extern char *crypt_r (const char *__key, const char *__salt,
extern void setkey_r (const char *__key,
extern void encrypt_r (char *__glibc_block, int __edflag,
extern "C" {
extern NCURSES_EXPORT(ITEM **)	menu_items (const MENU *);
extern NCURSES_EXPORT(ITEM *)	current_item (const MENU *);
extern NCURSES_EXPORT(ITEM *)	new_item (const char *,const char *);
extern NCURSES_EXPORT(MENU *)	new_menu (ITEM **);
extern NCURSES_EXPORT(Item_Options)	item_opts (const ITEM *);
extern NCURSES_EXPORT(Menu_Options)	menu_opts (const MENU *);
extern NCURSES_EXPORT(Menu_Hook)	item_init (const MENU *);
extern NCURSES_EXPORT(Menu_Hook)	item_term (const MENU *);
extern NCURSES_EXPORT(Menu_Hook)	menu_init (const MENU *);
extern NCURSES_EXPORT(Menu_Hook)	menu_term (const MENU *);
extern NCURSES_EXPORT(WINDOW *)	menu_sub (const MENU *);
extern NCURSES_EXPORT(WINDOW *)	menu_win (const MENU *);
extern NCURSES_EXPORT(const char *)	item_description (const ITEM *);
extern NCURSES_EXPORT(const char *)	item_name (const ITEM *);
extern NCURSES_EXPORT(const char *)	menu_mark (const MENU *);
extern NCURSES_EXPORT(const char *)	menu_request_name (int);
extern NCURSES_EXPORT(char *)	menu_pattern (const MENU *);
extern NCURSES_EXPORT(void *)	menu_userptr (const MENU *);
extern NCURSES_EXPORT(void *)	item_userptr (const ITEM *);
extern NCURSES_EXPORT(chtype)	menu_back (const MENU *);
extern NCURSES_EXPORT(chtype)	menu_fore (const MENU *);
extern NCURSES_EXPORT(chtype)	menu_grey (const MENU *);
extern NCURSES_EXPORT(int)	free_item (ITEM *);
extern NCURSES_EXPORT(int)	free_menu (MENU *);
extern NCURSES_EXPORT(int)	item_count (const MENU *);
extern NCURSES_EXPORT(int)	item_index (const ITEM *);
extern NCURSES_EXPORT(int)	item_opts_off (ITEM *,Item_Options);
extern NCURSES_EXPORT(int)	item_opts_on (ITEM *,Item_Options);
extern NCURSES_EXPORT(int)	menu_driver (MENU *,int);
extern NCURSES_EXPORT(int)	menu_opts_off (MENU *,Menu_Options);
extern NCURSES_EXPORT(int)	menu_opts_on (MENU *,Menu_Options);
extern NCURSES_EXPORT(int)	menu_pad (const MENU *);
extern NCURSES_EXPORT(int)	pos_menu_cursor (const MENU *);
extern NCURSES_EXPORT(int)	post_menu (MENU *);
extern NCURSES_EXPORT(int)	scale_menu (const MENU *,int *,int *);
extern NCURSES_EXPORT(int)	set_current_item (MENU *menu,ITEM *item);
extern NCURSES_EXPORT(int)	set_item_init (MENU *, Menu_Hook);
extern NCURSES_EXPORT(int)	set_item_opts (ITEM *,Item_Options);
extern NCURSES_EXPORT(int)	set_item_term (MENU *, Menu_Hook);
extern NCURSES_EXPORT(int)	set_item_userptr (ITEM *, void *);
extern NCURSES_EXPORT(int)	set_item_value (ITEM *,bool);
extern NCURSES_EXPORT(int)	set_menu_back (MENU *,chtype);
extern NCURSES_EXPORT(int)	set_menu_fore (MENU *,chtype);
extern NCURSES_EXPORT(int)	set_menu_format (MENU *,int,int);
extern NCURSES_EXPORT(int)	set_menu_grey (MENU *,chtype);
extern NCURSES_EXPORT(int)	set_menu_init (MENU *, Menu_Hook);
extern NCURSES_EXPORT(int)	set_menu_items (MENU *,ITEM **);
extern NCURSES_EXPORT(int)	set_menu_mark (MENU *, const char *);
extern NCURSES_EXPORT(int)	set_menu_opts (MENU *,Menu_Options);
extern NCURSES_EXPORT(int)	set_menu_pad (MENU *,int);
extern NCURSES_EXPORT(int)	set_menu_pattern (MENU *,const char *);
extern NCURSES_EXPORT(int)	set_menu_sub (MENU *,WINDOW *);
extern NCURSES_EXPORT(int)	set_menu_term (MENU *, Menu_Hook);
extern NCURSES_EXPORT(int)	set_menu_userptr (MENU *,void *);
extern NCURSES_EXPORT(int)	set_menu_win (MENU *,WINDOW *);
extern NCURSES_EXPORT(int)	set_top_row (MENU *,int);
extern NCURSES_EXPORT(int)	top_row (const MENU *);
extern NCURSES_EXPORT(int)	unpost_menu (MENU *);
extern NCURSES_EXPORT(int)	menu_request_by_name (const char *);
extern NCURSES_EXPORT(int)	set_menu_spacing (MENU *,int,int,int);
extern NCURSES_EXPORT(int)	menu_spacing (const MENU *,int *,int *,int *);
extern NCURSES_EXPORT(bool)	item_value (const ITEM *);
extern NCURSES_EXPORT(bool)	item_visible (const ITEM *);
extern NCURSES_EXPORT(void)	menu_format (const MENU *,int *,int *);
extern NCURSES_EXPORT(MENU *)	NCURSES_SP_NAME(new_menu) (SCREEN*, ITEM **);
extern FILE *setmntent (const char *__file, const char *__mode) __THROW;
extern struct mntent *getmntent (FILE *__stream) __THROW;
extern struct mntent *getmntent_r (FILE *__restrict __stream,
extern int addmntent (FILE *__restrict __stream,
extern int endmntent (FILE *__stream) __THROW;
extern char *hasmntopt (const struct mntent *__mnt,
extern struct radeon_cs *radeon_cs_create(struct radeon_cs_manager *csm,
extern int radeon_cs_begin(struct radeon_cs *cs,
extern int radeon_cs_end(struct radeon_cs *cs,
extern int radeon_cs_emit(struct radeon_cs *cs);
extern int radeon_cs_destroy(struct radeon_cs *cs);
extern int radeon_cs_erase(struct radeon_cs *cs);
extern int radeon_cs_need_flush(struct radeon_cs *cs);
extern void radeon_cs_print(struct radeon_cs *cs, FILE *file);
extern void radeon_cs_set_limit(struct radeon_cs *cs, uint32_t domain, uint32_t limit);
extern void radeon_cs_space_set_flush(struct radeon_cs *cs, void (*fn)(void *), void *data);
extern int radeon_cs_write_reloc(struct radeon_cs *cs,
extern uint32_t radeon_cs_get_id(struct radeon_cs *cs);
extern const struct _ns_flagdata _ns_flagdata[];
extern char *telcmds[];
extern char *slc_names[];
extern char *authtype_names[];
extern char *encrypt_names[];
extern char *enctype_names[];
extern in_addr_t inet_addr (const char *__cp) __THROW;
extern in_addr_t inet_lnaof (struct in_addr __in) __THROW;
extern struct in_addr inet_makeaddr (in_addr_t __net, in_addr_t __host)
extern in_addr_t inet_netof (struct in_addr __in) __THROW;
extern in_addr_t inet_network (const char *__cp) __THROW;
extern char *inet_ntoa (struct in_addr __in) __THROW;
extern int inet_pton (int __af, const char *__restrict __cp,
extern const char *inet_ntop (int __af, const void *__restrict __cp,
extern int inet_aton (const char *__cp, struct in_addr *__inp) __THROW;
extern char *inet_neta (in_addr_t __net, char *__buf, size_t __len) __THROW;
extern char *inet_net_ntop (int __af, const void *__cp, int __bits,
extern int inet_net_pton (int __af, const char *__cp,
extern unsigned int inet_nsap_addr (const char *__cp,
extern char *inet_nsap_ntoa (int __len, const unsigned char *__cp,
extern GTypeDebugFlags			_g_type_debug_flags;
extern "C"
extern "C" {
extern "C" {
extern "C"
extern "C" {
extern const char *const default_server_socket;
extern size_t __fbufsize (FILE *__fp) __THROW;
extern int __freading (FILE *__fp) __THROW;
extern int __fwriting (FILE *__fp) __THROW;
extern int __freadable (FILE *__fp) __THROW;
extern int __fwritable (FILE *__fp) __THROW;
extern int __flbf (FILE *__fp) __THROW;
extern void __fpurge (FILE *__fp) __THROW;
extern size_t __fpending (FILE *__fp) __THROW;
extern void _flushlbf (void);
extern int __fsetlocking (FILE *__fp, int __type) __THROW;
extern "C" {
extern NCURSES_EXPORT_VAR(unsigned) _nc_tracing;
extern NCURSES_EXPORT(void) _nc_tracef (char *, ...) GCC_PRINTFLIKE(1,2);
extern NCURSES_EXPORT(const char *) _nc_visbuf (const char *);
extern NCURSES_EXPORT(const char *) _nc_visbuf2 (int, const char *);
extern NCURSES_EXPORT_VAR(struct token)	_nc_curr_token;
extern NCURSES_EXPORT(const struct tinfo_fkeys *) _nc_tinfo_fkeysf (void);
extern NCURSES_EXPORT_VAR(const struct tinfo_fkeys) _nc_tinfo_fkeys[];
extern NCURSES_EXPORT(const struct name_table_entry *) _nc_get_table (bool);
extern NCURSES_EXPORT(const HashData *) _nc_get_hash_info (bool);
extern NCURSES_EXPORT(const HashValue *) _nc_get_hash_table (bool);
extern NCURSES_EXPORT(const struct alias *) _nc_get_alias_table (bool);
extern NCURSES_EXPORT(unsigned) _nc_pathlast (const char *);
extern NCURSES_EXPORT(bool) _nc_is_abs_path (const char *);
extern NCURSES_EXPORT(bool) _nc_is_dir_path (const char *);
extern NCURSES_EXPORT(bool) _nc_is_file_path (const char *);
extern NCURSES_EXPORT(char *) _nc_basename (char *);
extern NCURSES_EXPORT(char *) _nc_rootname (char *);
extern NCURSES_EXPORT(struct name_table_entry const *) _nc_find_entry
extern NCURSES_EXPORT(struct name_table_entry const *) _nc_find_type_entry
extern NCURSES_EXPORT(int)  _nc_get_token (bool);
extern NCURSES_EXPORT(void) _nc_panic_mode (char);
extern NCURSES_EXPORT(void) _nc_push_token (int);
extern NCURSES_EXPORT(void) _nc_reset_input (FILE *, char *);
extern NCURSES_EXPORT_VAR(int) _nc_curr_col;
extern NCURSES_EXPORT_VAR(int) _nc_curr_line;
extern NCURSES_EXPORT_VAR(int) _nc_syntax;
extern NCURSES_EXPORT_VAR(int) _nc_strict_bsd;
extern NCURSES_EXPORT_VAR(long) _nc_comment_end;
extern NCURSES_EXPORT_VAR(long) _nc_comment_start;
extern NCURSES_EXPORT_VAR(long) _nc_curr_file_pos;
extern NCURSES_EXPORT_VAR(long) _nc_start_line;
extern NCURSES_EXPORT(const char *) _nc_get_source (void);
extern NCURSES_EXPORT(void) _nc_err_abort (const char *const,...) GCC_PRINTFLIKE(1,2) GCC_NORETURN;
extern NCURSES_EXPORT(void) _nc_get_type (char *name);
extern NCURSES_EXPORT(void) _nc_set_source (const char *const);
extern NCURSES_EXPORT(void) _nc_set_type (const char *const);
extern NCURSES_EXPORT(void) _nc_syserr_abort (const char *const,...) GCC_PRINTFLIKE(1,2) GCC_NORETURN;
extern NCURSES_EXPORT(void) _nc_warning (const char *const,...) GCC_PRINTFLIKE(1,2);
extern NCURSES_EXPORT_VAR(bool) _nc_suppress_warnings;
extern NCURSES_EXPORT(char *) _nc_tic_expand (const char *, bool, int);
extern NCURSES_EXPORT(int) _nc_trans_string (char *, char *);
extern NCURSES_EXPORT(char *) _nc_captoinfo (const char *, const char *, int const);
extern NCURSES_EXPORT(char *) _nc_infotocap (const char *, const char *, int const);
extern NCURSES_EXPORT(char *) _nc_home_terminfo (void);
extern NCURSES_EXPORT_VAR(int) _nc_tparm_err;
extern NCURSES_EXPORT(int) _nc_tparm_analyze(const char *, char **, int *);
extern NCURSES_EXPORT_VAR(int) _nc_nulls_sent;		/* Add one for every null sent */
extern const char * _nc_progname;
extern NCURSES_EXPORT(const char *) _nc_next_db(DBDIRS *, int *);
extern NCURSES_EXPORT(const char *) _nc_tic_dir (const char *);
extern NCURSES_EXPORT(void) _nc_first_db(DBDIRS *, int *);
extern NCURSES_EXPORT(void) _nc_last_db(void);
extern NCURSES_EXPORT(int) _nc_tic_written (void);
extern int getcontext (ucontext_t *__ucp) __THROWNL;
extern int setcontext (const ucontext_t *__ucp) __THROWNL;
extern int swapcontext (ucontext_t *__restrict __oucp,
extern void makecontext (ucontext_t *__ucp, void (*__func) (void),
extern void warn (const char *__format, ...)
extern void vwarn (const char *__format, __gnuc_va_list)
extern void warnx (const char *__format, ...)
extern void vwarnx (const char *__format, __gnuc_va_list)
extern void err (int __status, const char *__format, ...)
extern void verr (int __status, const char *__format, __gnuc_va_list)
extern void errx (int __status, const char *__format, ...)
extern void verrx (int __status, const char *, __gnuc_va_list)
extern size_t __ctype_get_mb_cur_max (void) __THROW __wur;
extern double atof (const char *__nptr)
extern int atoi (const char *__nptr)
extern long int atol (const char *__nptr)
extern double strtod (const char *__restrict __nptr,
extern float strtof (const char *__restrict __nptr,
extern long double strtold (const char *__restrict __nptr,
extern long int strtol (const char *__restrict __nptr,
extern unsigned long int strtoul (const char *__restrict __nptr,
extern long long int strtoq (const char *__restrict __nptr,
extern unsigned long long int strtouq (const char *__restrict __nptr,
extern long long int strtoll (const char *__restrict __nptr,
extern unsigned long long int strtoull (const char *__restrict __nptr,
extern long int strtol_l (const char *__restrict __nptr,
extern unsigned long int strtoul_l (const char *__restrict __nptr,
extern long long int strtoll_l (const char *__restrict __nptr,
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
extern double strtod_l (const char *__restrict __nptr,
extern float strtof_l (const char *__restrict __nptr,
extern long double strtold_l (const char *__restrict __nptr,
extern char *l64a (long int __n) __THROW __wur;
extern long int a64l (const char *__s)
extern long int random (void) __THROW;
extern void srandom (unsigned int __seed) __THROW;
extern char *initstate (unsigned int __seed, char *__statebuf,
extern char *setstate (char *__statebuf) __THROW __nonnull ((1));
extern int random_r (struct random_data *__restrict __buf,
extern int srandom_r (unsigned int __seed, struct random_data *__buf)
extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
extern int setstate_r (char *__restrict __statebuf,
extern int rand (void) __THROW;
extern void srand (unsigned int __seed) __THROW;
extern int rand_r (unsigned int *__seed) __THROW;
extern double drand48 (void) __THROW;
extern double erand48 (unsigned short int __xsubi[3]) __THROW __nonnull ((1));
extern long int lrand48 (void) __THROW;
extern long int nrand48 (unsigned short int __xsubi[3])
extern long int mrand48 (void) __THROW;
extern long int jrand48 (unsigned short int __xsubi[3])
extern void srand48 (long int __seedval) __THROW;
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
extern void lcong48 (unsigned short int __param[7]) __THROW __nonnull ((1));
extern int drand48_r (struct drand48_data *__restrict __buffer,
extern int erand48_r (unsigned short int __xsubi[3],
extern int lrand48_r (struct drand48_data *__restrict __buffer,
extern int nrand48_r (unsigned short int __xsubi[3],
extern int mrand48_r (struct drand48_data *__restrict __buffer,
extern int jrand48_r (unsigned short int __xsubi[3],
extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
extern int seed48_r (unsigned short int __seed16v[3],
extern int lcong48_r (unsigned short int __param[7],
extern void *malloc (size_t __size) __THROW __attribute_malloc__ __wur;
extern void *calloc (size_t __nmemb, size_t __size)
extern void *realloc (void *__ptr, size_t __size)
extern void free (void *__ptr) __THROW;
extern void cfree (void *__ptr) __THROW;
extern void *valloc (size_t __size) __THROW __attribute_malloc__ __wur;
extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
extern void *aligned_alloc (size_t __alignment, size_t __size)
extern void abort (void) __THROW __attribute__ ((__noreturn__));
extern int atexit (void (*__func) (void)) __THROW __nonnull ((1));
extern "C++" int at_quick_exit (void (*__func) (void))
extern int at_quick_exit (void (*__func) (void)) __THROW __nonnull ((1));
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
extern void exit (int __status) __THROW __attribute__ ((__noreturn__));
extern void quick_exit (int __status) __THROW __attribute__ ((__noreturn__));
extern void _Exit (int __status) __THROW __attribute__ ((__noreturn__));
extern char *getenv (const char *__name) __THROW __nonnull ((1)) __wur;
extern char *secure_getenv (const char *__name)
extern int putenv (char *__string) __THROW __nonnull ((1));
extern int setenv (const char *__name, const char *__value, int __replace)
extern int unsetenv (const char *__name) __THROW __nonnull ((1));
extern int clearenv (void) __THROW;
extern char *mktemp (char *__template) __THROW __nonnull ((1));
extern int mkstemp (char *__template) __nonnull ((1)) __wur;
extern int __REDIRECT (mkstemp, (char *__template), mkstemp64)
extern int mkstemp64 (char *__template) __nonnull ((1)) __wur;
extern int mkstemps (char *__template, int __suffixlen) __nonnull ((1)) __wur;
extern int __REDIRECT (mkstemps, (char *__template, int __suffixlen),
extern int mkstemps64 (char *__template, int __suffixlen)
extern char *mkdtemp (char *__template) __THROW __nonnull ((1)) __wur;
extern int mkostemp (char *__template, int __flags) __nonnull ((1)) __wur;
extern int __REDIRECT (mkostemp, (char *__template, int __flags), mkostemp64)
extern int mkostemp64 (char *__template, int __flags) __nonnull ((1)) __wur;
extern int mkostemps (char *__template, int __suffixlen, int __flags)
extern int __REDIRECT (mkostemps, (char *__template, int __suffixlen,
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
extern int system (const char *__command) __wur;
extern char *canonicalize_file_name (const char *__name)
extern char *realpath (const char *__restrict __name,
extern void *bsearch (const void *__key, const void *__base,
extern void qsort (void *__base, size_t __nmemb, size_t __size,
extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
extern int abs (int __x) __THROW __attribute__ ((__const__)) __wur;
extern long int labs (long int __x) __THROW __attribute__ ((__const__)) __wur;
extern div_t div (int __numer, int __denom)
extern ldiv_t ldiv (long int __numer, long int __denom)
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
extern char *gcvt (double __value, int __ndigit, char *__buf)
extern char *qecvt (long double __value, int __ndigit,
extern char *qfcvt (long double __value, int __ndigit,
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
extern int qecvt_r (long double __value, int __ndigit,
extern int qfcvt_r (long double __value, int __ndigit,
extern int mblen (const char *__s, size_t __n) __THROW;
extern int mbtowc (wchar_t *__restrict __pwc,
extern int wctomb (char *__s, wchar_t __wchar) __THROW;
extern size_t mbstowcs (wchar_t *__restrict  __pwcs,
extern size_t wcstombs (char *__restrict __s,
extern int rpmatch (const char *__response) __THROW __nonnull ((1)) __wur;
extern int getsubopt (char **__restrict __optionp,
extern void setkey (const char *__key) __THROW __nonnull ((1));
extern int posix_openpt (int __oflag) __wur;
extern int grantpt (int __fd) __THROW;
extern int unlockpt (int __fd) __THROW;
extern char *ptsname (int __fd) __THROW __wur;
extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
extern int getpt (void);
extern int getloadavg (double __loadavg[], int __nelem)
extern td_err_e td_init (void);
extern td_err_e td_log (void);
extern const char **td_symbol_list (void);
extern td_err_e td_ta_new (struct ps_prochandle *__ps, td_thragent_t **__ta);
extern td_err_e td_ta_delete (td_thragent_t *__ta);
extern td_err_e td_ta_get_nthreads (const td_thragent_t *__ta, int *__np);
extern td_err_e td_ta_get_ph (const td_thragent_t *__ta,
extern td_err_e td_ta_map_id2thr (const td_thragent_t *__ta, pthread_t __pt,
extern td_err_e td_ta_map_lwp2thr (const td_thragent_t *__ta, lwpid_t __lwpid,
extern td_err_e td_ta_thr_iter (const td_thragent_t *__ta,
extern td_err_e td_ta_tsd_iter (const td_thragent_t *__ta, td_key_iter_f *__ki,
extern td_err_e td_ta_event_addr (const td_thragent_t *__ta,
extern td_err_e td_ta_set_event (const td_thragent_t *__ta,
extern td_err_e td_ta_clear_event (const td_thragent_t *__ta,
extern td_err_e td_ta_event_getmsg (const td_thragent_t *__ta,
extern td_err_e td_ta_setconcurrency (const td_thragent_t *__ta, int __level);
extern td_err_e td_ta_enable_stats (const td_thragent_t *__ta, int __enable);
extern td_err_e td_ta_reset_stats (const td_thragent_t *__ta);
extern td_err_e td_ta_get_stats (const td_thragent_t *__ta,
extern td_err_e td_thr_validate (const td_thrhandle_t *__th);
extern td_err_e td_thr_get_info (const td_thrhandle_t *__th,
extern td_err_e td_thr_getfpregs (const td_thrhandle_t *__th,
extern td_err_e td_thr_getgregs (const td_thrhandle_t *__th,
extern td_err_e td_thr_getxregs (const td_thrhandle_t *__th, void *__xregs);
extern td_err_e td_thr_getxregsize (const td_thrhandle_t *__th, int *__sizep);
extern td_err_e td_thr_setfpregs (const td_thrhandle_t *__th,
extern td_err_e td_thr_setgregs (const td_thrhandle_t *__th,
extern td_err_e td_thr_setxregs (const td_thrhandle_t *__th,
extern td_err_e td_thr_tlsbase (const td_thrhandle_t *__th,
extern td_err_e td_thr_tls_get_addr (const td_thrhandle_t *__th,
extern td_err_e td_thr_event_enable (const td_thrhandle_t *__th, int __event);
extern td_err_e td_thr_set_event (const td_thrhandle_t *__th,
extern td_err_e td_thr_clear_event (const td_thrhandle_t *__th,
extern td_err_e td_thr_event_getmsg (const td_thrhandle_t *__th,
extern td_err_e td_thr_setprio (const td_thrhandle_t *__th, int __prio);
extern td_err_e td_thr_setsigpending (const td_thrhandle_t *__th,
extern td_err_e td_thr_sigsetmask (const td_thrhandle_t *__th,
extern td_err_e td_thr_tsd (const td_thrhandle_t *__th,
extern td_err_e td_thr_dbsuspend (const td_thrhandle_t *__th);
extern td_err_e td_thr_dbresume (const td_thrhandle_t *__th);
extern char *loc1;
extern char *loc2;
extern char *locs;
extern int step (const char *__restrict __string,
extern int advance (const char *__restrict __string,
extern int mcheck (void (*__abortfunc)(enum mcheck_status)) __THROW;
extern int mcheck_pedantic (void (*__abortfunc)(enum mcheck_status)) __THROW;
extern void mcheck_check_all (void);
extern enum mcheck_status mprobe (void *__ptr) __THROW;
extern void mtrace (void) __THROW;
extern void muntrace (void) __THROW;
extern "C" {
extern XVisualInfo* glXChooseVisual( Display *dpy, int screen,
extern GLXContext glXCreateContext( Display *dpy, XVisualInfo *vis,
extern void glXDestroyContext( Display *dpy, GLXContext ctx );
extern Bool glXMakeCurrent( Display *dpy, GLXDrawable drawable,
extern void glXCopyContext( Display *dpy, GLXContext src, GLXContext dst,
extern void glXSwapBuffers( Display *dpy, GLXDrawable drawable );
extern GLXPixmap glXCreateGLXPixmap( Display *dpy, XVisualInfo *visual,
extern void glXDestroyGLXPixmap( Display *dpy, GLXPixmap pixmap );
extern Bool glXQueryExtension( Display *dpy, int *errorb, int *event );
extern Bool glXQueryVersion( Display *dpy, int *maj, int *min );
extern Bool glXIsDirect( Display *dpy, GLXContext ctx );
extern int glXGetConfig( Display *dpy, XVisualInfo *visual,
extern GLXContext glXGetCurrentContext( void );
extern GLXDrawable glXGetCurrentDrawable( void );
extern void glXWaitGL( void );
extern void glXWaitX( void );
extern void glXUseXFont( Font font, int first, int count, int list );
extern const char *glXQueryExtensionsString( Display *dpy, int screen );
extern const char *glXQueryServerString( Display *dpy, int screen, int name );
extern const char *glXGetClientString( Display *dpy, int name );
extern Display *glXGetCurrentDisplay( void );
extern GLXFBConfig *glXChooseFBConfig( Display *dpy, int screen,
extern int glXGetFBConfigAttrib( Display *dpy, GLXFBConfig config,
extern GLXFBConfig *glXGetFBConfigs( Display *dpy, int screen,
extern XVisualInfo *glXGetVisualFromFBConfig( Display *dpy,
extern GLXWindow glXCreateWindow( Display *dpy, GLXFBConfig config,
extern void glXDestroyWindow( Display *dpy, GLXWindow window );
extern GLXPixmap glXCreatePixmap( Display *dpy, GLXFBConfig config,
extern void glXDestroyPixmap( Display *dpy, GLXPixmap pixmap );
extern GLXPbuffer glXCreatePbuffer( Display *dpy, GLXFBConfig config,
extern void glXDestroyPbuffer( Display *dpy, GLXPbuffer pbuf );
extern void glXQueryDrawable( Display *dpy, GLXDrawable draw, int attribute,
extern GLXContext glXCreateNewContext( Display *dpy, GLXFBConfig config,
extern Bool glXMakeContextCurrent( Display *dpy, GLXDrawable draw,
extern GLXDrawable glXGetCurrentReadDrawable( void );
extern int glXQueryContext( Display *dpy, GLXContext ctx, int attribute,
extern void glXSelectEvent( Display *dpy, GLXDrawable drawable,
extern void glXGetSelectedEvent( Display *dpy, GLXDrawable drawable,
extern __GLXextFuncPtr glXGetProcAddressARB (const GLubyte *);
extern void (*glXGetProcAddress(const GLubyte *procname))( void );
extern void *glXAllocateMemoryNV(GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority);
extern void glXFreeMemoryNV(GLvoid *pointer);
extern Bool glXBindTexImageARB(Display *dpy, GLXPbuffer pbuffer, int buffer);
extern Bool glXReleaseTexImageARB(Display *dpy, GLXPbuffer pbuffer, int buffer);
extern Bool glXDrawableAttribARB(Display *dpy, GLXDrawable draw, const int *attribList);
extern int glXGetFrameUsageMESA(Display *dpy, GLXDrawable drawable, float *usage);
extern int glXBeginFrameTrackingMESA(Display *dpy, GLXDrawable drawable);
extern int glXEndFrameTrackingMESA(Display *dpy, GLXDrawable drawable);
extern int glXQueryFrameTrackingMESA(Display *dpy, GLXDrawable drawable, int64_t *swapCount, int64_t *missedFrames, float *lastMissedUsage);
extern int glXSwapIntervalMESA(unsigned int interval);
extern int glXGetSwapIntervalMESA(void);
extern void glXBindTexImageEXT(Display *dpy, GLXDrawable drawable, int buffer, const int *attrib_list);
extern void glXReleaseTexImageEXT(Display *dpy, GLXDrawable drawable, int buffer);
extern "C" {
extern "C" {
extern "C" {
extern "C" {
extern "C" {
extern struct r_debug _r_debug;
extern ElfW(Dyn) _DYNAMIC[];
extern int dl_iterate_phdr (int (*__callback) (struct dl_phdr_info *,
extern unsigned int la_version (unsigned int __version);
extern void la_activity (uintptr_t *__cookie, unsigned int __flag);
extern char *la_objsearch (const char *__name, uintptr_t *__cookie,
extern unsigned int la_objopen (struct link_map *__map, Lmid_t __lmid,
extern void la_preinit (uintptr_t *__cookie);
extern uintptr_t la_symbind32 (Elf32_Sym *__sym, unsigned int __ndx,
extern uintptr_t la_symbind64 (Elf64_Sym *__sym, unsigned int __ndx,
extern unsigned int la_objclose (uintptr_t *__cookie);
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
extern void *memmove (void *__dest, const void *__src, size_t __n)
extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
extern void *memset (void *__s, int __c, size_t __n) __THROW __nonnull ((1));
extern int memcmp (const void *__s1, const void *__s2, size_t __n)
extern "C++"
extern void *memchr (void *__s, int __c, size_t __n)
extern const void *memchr (const void *__s, int __c, size_t __n)
extern void *memchr (const void *__s, int __c, size_t __n)
extern "C++" void *rawmemchr (void *__s, int __c)
extern "C++" const void *rawmemchr (const void *__s, int __c)
extern void *rawmemchr (const void *__s, int __c)
extern "C++" void *memrchr (void *__s, int __c, size_t __n)
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
extern void *memrchr (const void *__s, int __c, size_t __n)
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
extern char *strncpy (char *__restrict __dest,
extern char *strcat (char *__restrict __dest, const char *__restrict __src)
extern char *strncat (char *__restrict __dest, const char *__restrict __src,
extern int strcmp (const char *__s1, const char *__s2)
extern int strncmp (const char *__s1, const char *__s2, size_t __n)
extern int strcoll (const char *__s1, const char *__s2)
extern size_t strxfrm (char *__restrict __dest,
extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
extern char *strdup (const char *__s)
extern char *strndup (const char *__string, size_t __n)
extern "C++"
extern char *strchr (char *__s, int __c)
extern const char *strchr (const char *__s, int __c)
extern char *strchr (const char *__s, int __c)
extern "C++"
extern char *strrchr (char *__s, int __c)
extern const char *strrchr (const char *__s, int __c)
extern char *strrchr (const char *__s, int __c)
extern "C++" char *strchrnul (char *__s, int __c)
extern "C++" const char *strchrnul (const char *__s, int __c)
extern char *strchrnul (const char *__s, int __c)
extern size_t strcspn (const char *__s, const char *__reject)
extern size_t strspn (const char *__s, const char *__accept)
extern "C++"
extern char *strpbrk (char *__s, const char *__accept)
extern const char *strpbrk (const char *__s, const char *__accept)
extern char *strpbrk (const char *__s, const char *__accept)
extern "C++"
extern char *strstr (char *__haystack, const char *__needle)
extern const char *strstr (const char *__haystack, const char *__needle)
extern char *strstr (const char *__haystack, const char *__needle)
extern char *strtok (char *__restrict __s, const char *__restrict __delim)
extern char *__strtok_r (char *__restrict __s,
extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
extern "C++" char *strcasestr (char *__haystack, const char *__needle)
extern "C++" const char *strcasestr (const char *__haystack,
extern char *strcasestr (const char *__haystack, const char *__needle)
extern void *memmem (const void *__haystack, size_t __haystacklen,
extern void *__mempcpy (void *__restrict __dest,
extern void *mempcpy (void *__restrict __dest,
extern size_t strlen (const char *__s)
extern size_t strnlen (const char *__string, size_t __maxlen)
extern char *strerror (int __errnum) __THROW;
extern int __REDIRECT_NTH (strerror_r,
extern int __xpg_strerror_r (int __errnum, char *__buf, size_t __buflen)
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
extern char *strerror_l (int __errnum, __locale_t __l) __THROW;
extern void __bzero (void *__s, size_t __n) __THROW __nonnull ((1));
extern void bcopy (const void *__src, void *__dest, size_t __n)
extern void bzero (void *__s, size_t __n) __THROW __nonnull ((1));
extern int bcmp (const void *__s1, const void *__s2, size_t __n)
extern "C++"
extern char *index (char *__s, int __c)
extern const char *index (const char *__s, int __c)
extern char *index (const char *__s, int __c)
extern "C++"
extern char *rindex (char *__s, int __c)
extern const char *rindex (const char *__s, int __c)
extern char *rindex (const char *__s, int __c)
extern int ffs (int __i) __THROW __attribute__ ((__const__));
extern int ffsl (long int __l) __THROW __attribute__ ((__const__));
extern int strcasecmp (const char *__s1, const char *__s2)
extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
extern int strcasecmp_l (const char *__s1, const char *__s2,
extern int strncasecmp_l (const char *__s1, const char *__s2,
extern char *strsep (char **__restrict __stringp,
extern char *strsignal (int __sig) __THROW;
extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
extern char *__stpncpy (char *__restrict __dest,
extern char *stpncpy (char *__restrict __dest,
extern int strverscmp (const char *__s1, const char *__s2)
extern char *strfry (char *__string) __THROW __nonnull ((1));
extern void *memfrob (void *__s, size_t __n) __THROW __nonnull ((1));
extern "C++" char *basename (char *__filename)
extern "C++" const char *basename (const char *__filename)
extern char *basename (const char *__filename) __THROW __nonnull ((1));
extern "C"
extern "C" {
extern char* ImagingGetModeDIB(int size_out[2]);
extern ImagingDIB ImagingNewDIB(const char *mode, int xsize, int ysize);
extern void ImagingDeleteDIB(ImagingDIB im);
extern void ImagingDrawDIB(ImagingDIB dib, int dc, int dst[4], int src[4]);
extern void ImagingExposeDIB(ImagingDIB dib, int dc);
extern int ImagingQueryPaletteDIB(ImagingDIB dib, int dc);
extern void ImagingPasteDIB(ImagingDIB dib, Imaging im, int xy[4]);
extern "C" {
extern int ImagingNewCount;
extern Imaging ImagingNew(const char* mode, int xsize, int ysize);
extern Imaging ImagingNew2(const char* mode, Imaging imOut, Imaging imIn);
extern void    ImagingDelete(Imaging im);
extern Imaging ImagingNewBlock(const char* mode, int xsize, int ysize);
extern Imaging ImagingNewArray(const char* mode, int xsize, int ysize);
extern Imaging ImagingNewMap(const char* filename, int readonly,
extern Imaging ImagingNewPrologue(const char *mode,
extern Imaging ImagingNewPrologueSubtype(const char *mode,
extern Imaging ImagingNewEpilogue(Imaging im);
extern void ImagingCopyInfo(Imaging destination, Imaging source);
extern void ImagingHistogramDelete(ImagingHistogram histogram);
extern void ImagingAccessInit(void);
extern ImagingAccess ImagingAccessNew(Imaging im);
extern void _ImagingAccessDelete(Imaging im, ImagingAccess access);
extern ImagingPalette ImagingPaletteNew(const char *mode);
extern ImagingPalette ImagingPaletteNewBrowser(void);
extern ImagingPalette ImagingPaletteDuplicate(ImagingPalette palette);
extern void           ImagingPaletteDelete(ImagingPalette palette);
extern int  ImagingPaletteCachePrepare(ImagingPalette palette);
extern void ImagingPaletteCacheUpdate(ImagingPalette palette,
extern void ImagingPaletteCacheDelete(ImagingPalette palette);
extern Imaging ImagingQuantize(Imaging im, int colours, int mode, int kmeans);
extern void ImagingSectionEnter(ImagingSectionCookie* cookie);
extern void ImagingSectionLeave(ImagingSectionCookie* cookie);
extern void* ImagingError_IOError(void);
extern void* ImagingError_MemoryError(void);
extern void* ImagingError_ModeError(void); /* maps to ValueError by default */
extern void* ImagingError_Mismatch(void); /* maps to ValueError by default */
extern void* ImagingError_ValueError(const char* message);
extern void ImagingError_Clear(void);
extern Imaging ImagingAlphaComposite(Imaging imIn1, Imaging imIn2);
extern Imaging ImagingBlend(Imaging imIn1, Imaging imIn2, float alpha);
extern Imaging ImagingCopy(Imaging im);
extern Imaging ImagingConvert(Imaging im, const char* mode, ImagingPalette palette, int dither);
extern Imaging ImagingConvertInPlace(Imaging im, const char* mode);
extern Imaging ImagingConvertMatrix(Imaging im, const char *mode, float m[]);
extern Imaging ImagingConvertTransparent(Imaging im, const char *mode, int r, int g, int b);
extern Imaging ImagingCrop(Imaging im, int x0, int y0, int x1, int y1);
extern Imaging ImagingExpand(Imaging im, int x, int y, int mode);
extern Imaging ImagingFill(Imaging im, const void* ink);
extern int ImagingFill2(
extern Imaging ImagingFillBand(Imaging im, int band, int color);
extern Imaging ImagingFillLinearGradient(const char* mode);
extern Imaging ImagingFillRadialGradient(const char* mode);
extern Imaging ImagingFilter(
extern Imaging ImagingFlipLeftRight(Imaging imOut, Imaging imIn);
extern Imaging ImagingFlipTopBottom(Imaging imOut, Imaging imIn);
extern Imaging ImagingGaussianBlur(Imaging im, Imaging imOut, float radius);
extern Imaging ImagingGetBand(Imaging im, int band);
extern int ImagingGetBBox(Imaging im, int bbox[4]);
extern ImagingColorItem* ImagingGetColors(Imaging im, int maxcolors,
extern int ImagingGetExtrema(Imaging im, void *extrema);
extern int ImagingGetProjection(Imaging im, UINT8* xproj, UINT8* yproj);
extern ImagingHistogram ImagingGetHistogram(
extern Imaging ImagingModeFilter(Imaging im, int size);
extern Imaging ImagingNegative(Imaging im);
extern Imaging ImagingOffset(Imaging im, int xoffset, int yoffset);
extern int ImagingPaste(
extern Imaging ImagingPoint(
extern Imaging ImagingPointTransform(
extern Imaging ImagingPutBand(Imaging im, Imaging imIn, int band);
extern Imaging ImagingRankFilter(Imaging im, int size, int rank);
extern Imaging ImagingResize(Imaging imOut, Imaging imIn, int filter);
extern Imaging ImagingRotate(
extern Imaging ImagingRotate90(Imaging imOut, Imaging imIn);
extern Imaging ImagingRotate180(Imaging imOut, Imaging imIn);
extern Imaging ImagingRotate270(Imaging imOut, Imaging imIn);
extern Imaging ImagingStretch(Imaging imOut, Imaging imIn, int filter);
extern Imaging ImagingTransformPerspective(
extern Imaging ImagingTransformAffine(
extern Imaging ImagingTransformQuad(
extern Imaging ImagingTransform(
extern Imaging ImagingUnsharpMask(
extern Imaging ImagingCopy2(Imaging imOut, Imaging imIn);
extern Imaging ImagingConvert2(Imaging imOut, Imaging imIn);
extern Imaging ImagingChopLighter(Imaging imIn1, Imaging imIn2);
extern Imaging ImagingChopDarker(Imaging imIn1, Imaging imIn2);
extern Imaging ImagingChopDifference(Imaging imIn1, Imaging imIn2);
extern Imaging ImagingChopMultiply(Imaging imIn1, Imaging imIn2);
extern Imaging ImagingChopScreen(Imaging imIn1, Imaging imIn2);
extern Imaging ImagingChopAdd(
extern Imaging ImagingChopSubtract(
extern Imaging ImagingChopAddModulo(Imaging imIn1, Imaging imIn2);
extern Imaging ImagingChopSubtractModulo(Imaging imIn1, Imaging imIn2);
extern Imaging ImagingChopAnd(Imaging imIn1, Imaging imIn2);
extern Imaging ImagingChopOr(Imaging imIn1, Imaging imIn2);
extern Imaging ImagingChopXor(Imaging imIn1, Imaging imIn2);
extern void ImagingCrack(Imaging im, int x0, int y0);
extern int ImagingDrawArc(Imaging im, int x0, int y0, int x1, int y1,
extern int ImagingDrawBitmap(Imaging im, int x0, int y0, Imaging bitmap,
extern int ImagingDrawChord(Imaging im, int x0, int y0, int x1, int y1,
extern int ImagingDrawEllipse(Imaging im, int x0, int y0, int x1, int y1,
extern int ImagingDrawLine(Imaging im, int x0, int y0, int x1, int y1,
extern int ImagingDrawWideLine(Imaging im, int x0, int y0, int x1, int y1,
extern int ImagingDrawPieslice(Imaging im, int x0, int y0, int x1, int y1,
extern int ImagingDrawPoint(Imaging im, int x, int y, const void* ink, int op);
extern int ImagingDrawPolygon(Imaging im, int points, int *xy,
extern int ImagingDrawRectangle(Imaging im, int x0, int y0, int x1, int y1,
extern ImagingOutline ImagingOutlineNew(void);
extern void ImagingOutlineDelete(ImagingOutline outline);
extern int ImagingDrawOutline(Imaging im, ImagingOutline outline,
extern int ImagingOutlineMove(ImagingOutline outline, float x, float y);
extern int ImagingOutlineLine(ImagingOutline outline, float x, float y);
extern int ImagingOutlineCurve(ImagingOutline outline, float x1, float y1,
extern int ImagingOutlineTransform(ImagingOutline outline, double a[6]);
extern int ImagingOutlineClose(ImagingOutline outline);
extern Imaging ImagingEffectSpread(Imaging imIn, int distance);
extern Imaging ImagingEffectNoise(int xsize, int ysize, float sigma);
extern Imaging ImagingEffectMandelbrot(int xsize, int ysize,
extern int ImagingToString(Imaging im, int orientation, char *buffer);
extern int ImagingFromString(Imaging im, int orientation, char *buffer);
extern Imaging ImagingOpenPPM(const char* filename);
extern int ImagingSavePPM(Imaging im, const char* filename);
extern UINT32 ImagingCRC32(UINT32 crc, UINT8* buffer, int bytes);
extern int ImagingBitDecode(Imaging im, ImagingCodecState state,
extern int ImagingEpsEncode(Imaging im, ImagingCodecState state,
extern int ImagingFliDecode(Imaging im, ImagingCodecState state,
extern int ImagingGifDecode(Imaging im, ImagingCodecState state,
extern int ImagingGifEncode(Imaging im, ImagingCodecState state,
extern int ImagingHexDecode(Imaging im, ImagingCodecState state,
extern int ImagingJpegDecode(Imaging im, ImagingCodecState state,
extern int ImagingJpegDecodeCleanup(ImagingCodecState state);
extern int ImagingJpegEncode(Imaging im, ImagingCodecState state,
extern int ImagingLzwDecode(Imaging im, ImagingCodecState state,
extern int ImagingLibTiffDecode(Imaging im, ImagingCodecState state,
extern int ImagingLibTiffEncode(Imaging im, ImagingCodecState state,
extern int ImagingMpegDecode(Imaging im, ImagingCodecState state,
extern int ImagingMspDecode(Imaging im, ImagingCodecState state,
extern int ImagingPackbitsDecode(Imaging im, ImagingCodecState state,
extern int ImagingPcdDecode(Imaging im, ImagingCodecState state,
extern int ImagingPcxDecode(Imaging im, ImagingCodecState state,
extern int ImagingPcxEncode(Imaging im, ImagingCodecState state,
extern int ImagingRawDecode(Imaging im, ImagingCodecState state,
extern int ImagingRawEncode(Imaging im, ImagingCodecState state,
extern int ImagingSunRleDecode(Imaging im, ImagingCodecState state,
extern int ImagingTgaRleDecode(Imaging im, ImagingCodecState state,
extern int ImagingXbmDecode(Imaging im, ImagingCodecState state,
extern int ImagingXbmEncode(Imaging im, ImagingCodecState state,
extern int ImagingZipDecode(Imaging im, ImagingCodecState state,
extern int ImagingZipEncode(Imaging im, ImagingCodecState state,
extern void ImagingPackRGB(UINT8* out, const UINT8* in, int pixels);
extern void ImagingPackBGR(UINT8* out, const UINT8* in, int pixels);
extern void ImagingUnpackRGB(UINT8* out, const UINT8* in, int pixels);
extern void ImagingUnpackBGR(UINT8* out, const UINT8* in, int pixels);
extern void ImagingUnpackYCC(UINT8* out, const UINT8* in, int pixels);
extern void ImagingUnpackYCCA(UINT8* out, const UINT8* in, int pixels);
extern void ImagingUnpackYCbCr(UINT8* out, const UINT8* in, int pixels);
extern void ImagingConvertRGB2YCbCr(UINT8* out, const UINT8* in, int pixels);
extern void ImagingConvertYCbCr2RGB(UINT8* out, const UINT8* in, int pixels);
extern ImagingShuffler ImagingFindUnpacker(const char* mode,
extern ImagingShuffler ImagingFindPacker(const char* mode,
extern "C" {
extern xcb_extension_t xcb_shape_id;
extern "C" {
extern xcb_extension_t xcb_dri2_id;
extern "C" {
extern "C" {
extern xcb_extension_t xcb_glx_id;
extern "C" {
extern xcb_extension_t xcb_xfixes_id;
extern "C" {
extern xcb_extension_t xcb_render_id;
extern "C" {
extern xcb_extension_t xcb_randr_id;
extern "C" {
extern "C" {
extern xcb_extension_t xcb_dri3_id;
extern "C" {
extern xcb_extension_t xcb_sync_id;
extern "C" {
extern xcb_extension_t xcb_big_requests_id;
extern "C" {
extern xcb_extension_t xcb_present_id;
extern "C" {
extern "C" {
extern xcb_extension_t xcb_xc_misc_id;
extern DIR *opendir (const char *__name) __nonnull ((1));
extern DIR *fdopendir (int __fd);
extern int closedir (DIR *__dirp) __nonnull ((1));
extern struct dirent *readdir (DIR *__dirp) __nonnull ((1));
extern struct dirent *__REDIRECT (readdir, (DIR *__dirp), readdir64)
extern struct dirent64 *readdir64 (DIR *__dirp) __nonnull ((1));
extern int readdir_r (DIR *__restrict __dirp,
extern int __REDIRECT (readdir_r,
extern int readdir64_r (DIR *__restrict __dirp,
extern void rewinddir (DIR *__dirp) __THROW __nonnull ((1));
extern void seekdir (DIR *__dirp, long int __pos) __THROW __nonnull ((1));
extern long int telldir (DIR *__dirp) __THROW __nonnull ((1));
extern int dirfd (DIR *__dirp) __THROW __nonnull ((1));
extern int scandir (const char *__restrict __dir,
extern int __REDIRECT (scandir,
extern int scandir64 (const char *__restrict __dir,
extern int scandirat (int __dfd, const char *__restrict __dir,
extern int __REDIRECT (scandirat,
extern int scandirat64 (int __dfd, const char *__restrict __dir,
extern int alphasort (const struct dirent **__e1,
extern int __REDIRECT_NTH (alphasort,
extern int alphasort64 (const struct dirent64 **__e1,
extern __ssize_t getdirentries (int __fd, char *__restrict __buf,
extern __ssize_t __REDIRECT_NTH (getdirentries,
extern __ssize_t getdirentries64 (int __fd, char *__restrict __buf,
extern int versionsort (const struct dirent **__e1,
extern int __REDIRECT_NTH (versionsort,
extern int versionsort64 (const struct dirent64 **__e1,
extern zend_module_entry json_module_entry;
extern zend_class_entry *php_json_serializable_ce;
extern int posix_spawn (pid_t *__restrict __pid,
extern int posix_spawnp (pid_t *__pid, const char *__file,
extern int posix_spawnattr_init (posix_spawnattr_t *__attr) __THROW;
extern int posix_spawnattr_destroy (posix_spawnattr_t *__attr) __THROW;
extern int posix_spawnattr_getsigdefault (const posix_spawnattr_t *
extern int posix_spawnattr_setsigdefault (posix_spawnattr_t *__restrict __attr,
extern int posix_spawnattr_getsigmask (const posix_spawnattr_t *__restrict
extern int posix_spawnattr_setsigmask (posix_spawnattr_t *__restrict __attr,
extern int posix_spawnattr_getflags (const posix_spawnattr_t *__restrict
extern int posix_spawnattr_setflags (posix_spawnattr_t *_attr,
extern int posix_spawnattr_getpgroup (const posix_spawnattr_t *__restrict
extern int posix_spawnattr_setpgroup (posix_spawnattr_t *__attr,
extern int posix_spawnattr_getschedpolicy (const posix_spawnattr_t *
extern int posix_spawnattr_setschedpolicy (posix_spawnattr_t *__attr,
extern int posix_spawnattr_getschedparam (const posix_spawnattr_t *
extern int posix_spawnattr_setschedparam (posix_spawnattr_t *__restrict __attr,
extern int posix_spawn_file_actions_init (posix_spawn_file_actions_t *
extern int posix_spawn_file_actions_destroy (posix_spawn_file_actions_t *
extern int posix_spawn_file_actions_addopen (posix_spawn_file_actions_t *
extern int posix_spawn_file_actions_addclose (posix_spawn_file_actions_t *
extern int posix_spawn_file_actions_adddup2 (posix_spawn_file_actions_t *
extern void setaliasent (void) __THROW;
extern void endaliasent (void) __THROW;
extern struct aliasent *getaliasent (void) __THROW;
extern int getaliasent_r (struct aliasent *__restrict __result_buf,
extern struct aliasent *getaliasbyname (const char *__name) __THROW;
extern int getaliasbyname_r (const char *__restrict __name,
extern char *gettext (const char *__msgid)
extern char *dgettext (const char *__domainname, const char *__msgid)
extern char *__dgettext (const char *__domainname, const char *__msgid)
extern char *dcgettext (const char *__domainname,
extern char *__dcgettext (const char *__domainname,
extern char *ngettext (const char *__msgid1, const char *__msgid2,
extern char *dngettext (const char *__domainname, const char *__msgid1,
extern char *dcngettext (const char *__domainname, const char *__msgid1,
extern char *textdomain (const char *__domainname) __THROW;
extern char *bindtextdomain (const char *__domainname,
extern char *bind_textdomain_codeset (const char *__domainname,
extern "C" {
extern NCURSES_EXPORT_VAR(TERMINAL *) cur_term;
extern NCURSES_EXPORT_VAR(TERMINAL *) cur_term;
extern NCURSES_EXPORT_VAR(NCURSES_CONST char * const ) boolnames[];
extern NCURSES_EXPORT_VAR(NCURSES_CONST char * const ) boolcodes[];
extern NCURSES_EXPORT_VAR(NCURSES_CONST char * const ) boolfnames[];
extern NCURSES_EXPORT_VAR(NCURSES_CONST char * const ) numnames[];
extern NCURSES_EXPORT_VAR(NCURSES_CONST char * const ) numcodes[];
extern NCURSES_EXPORT_VAR(NCURSES_CONST char * const ) numfnames[];
extern NCURSES_EXPORT_VAR(NCURSES_CONST char * const ) strnames[];
extern NCURSES_EXPORT_VAR(NCURSES_CONST char * const ) strcodes[];
extern NCURSES_EXPORT_VAR(NCURSES_CONST char * const ) strfnames[];
extern NCURSES_EXPORT(int) _nc_set_tty_mode (TTY *buf);
extern NCURSES_EXPORT(int) _nc_get_tty_mode (TTY *buf);
extern NCURSES_EXPORT(int) _nc_read_entry (const char * const, char * const, TERMTYPE *const);
extern NCURSES_EXPORT(int) _nc_read_file_entry (const char *const, TERMTYPE *);
extern NCURSES_EXPORT(void) _nc_init_termtype (TERMTYPE *const);
extern NCURSES_EXPORT(int) _nc_read_termtype (TERMTYPE *, char *, int);
extern NCURSES_EXPORT(char *) _nc_first_name (const char *const);
extern NCURSES_EXPORT(int) _nc_name_match (const char *const, const char *const, const char *const);
extern NCURSES_EXPORT(const TERMTYPE *) _nc_fallback (const char *);
extern NCURSES_EXPORT(TERMINAL *) set_curterm (TERMINAL *);
extern NCURSES_EXPORT(int) del_curterm (TERMINAL *);
extern NCURSES_EXPORT(int) restartterm (NCURSES_CONST char *, int, int *);
extern NCURSES_EXPORT(int) setupterm (NCURSES_CONST char *,int,int *);
extern NCURSES_EXPORT(char *) tigetstr (NCURSES_CONST char *);
extern NCURSES_EXPORT_VAR(char) ttytype[];
extern NCURSES_EXPORT(int) putp (const char *);
extern NCURSES_EXPORT(int) tigetflag (NCURSES_CONST char *);
extern NCURSES_EXPORT(int) tigetnum (NCURSES_CONST char *);
extern NCURSES_EXPORT(char *) tparm (NCURSES_CONST char *, ...);	/* special */
extern NCURSES_EXPORT(char *) tparm (NCURSES_CONST char *, long,long,long,long,long,long,long,long,long);	/* special */
extern NCURSES_EXPORT(char *) tparm_varargs (NCURSES_CONST char *, ...);	/* special */
extern NCURSES_EXPORT(char *) tiparm (const char *, ...);		/* special */
extern NCURSES_EXPORT(char *) tgetstr (NCURSES_CONST char *, char **);
extern NCURSES_EXPORT(char *) tgoto (const char *, int, int);
extern NCURSES_EXPORT(int) tgetent (char *, const char *);
extern NCURSES_EXPORT(int) tgetflag (NCURSES_CONST char *);
extern NCURSES_EXPORT(int) tgetnum (NCURSES_CONST char *);
extern NCURSES_EXPORT(int) tputs (const char *, int, int (*)(int));
extern NCURSES_EXPORT(char *)  NCURSES_SP_NAME(tigetstr) (SCREEN*, NCURSES_CONST char *);
extern NCURSES_EXPORT(int)     NCURSES_SP_NAME(putp) (SCREEN*, const char *);
extern NCURSES_EXPORT(int)     NCURSES_SP_NAME(tigetflag) (SCREEN*, NCURSES_CONST char *);
extern NCURSES_EXPORT(int)     NCURSES_SP_NAME(tigetnum) (SCREEN*, NCURSES_CONST char *);
extern NCURSES_EXPORT(char *)  NCURSES_SP_NAME(tparm) (SCREEN*, NCURSES_CONST char *, ...);	/* special */
extern NCURSES_EXPORT(char *)  NCURSES_SP_NAME(tparm) (SCREEN*, NCURSES_CONST char *, long,long,long,long,long,long,long,long,long);	/* special */
extern NCURSES_EXPORT(char *)  NCURSES_SP_NAME(tparm_varargs) (SCREEN*, NCURSES_CONST char *, ...);	/* special */
extern NCURSES_EXPORT(char *)  NCURSES_SP_NAME(tgetstr) (SCREEN*, NCURSES_CONST char *, char **);
extern NCURSES_EXPORT(char *)  NCURSES_SP_NAME(tgoto) (SCREEN*, const char *, int, int);
extern NCURSES_EXPORT(int)     NCURSES_SP_NAME(tgetent) (SCREEN*, char *, const char *);
extern NCURSES_EXPORT(int)     NCURSES_SP_NAME(tgetflag) (SCREEN*, NCURSES_CONST char *);
extern NCURSES_EXPORT(int)     NCURSES_SP_NAME(tgetnum) (SCREEN*, NCURSES_CONST char *);
extern NCURSES_EXPORT(int)     NCURSES_SP_NAME(tputs) (SCREEN*, const char *, int, NCURSES_SP_OUTC);
extern NCURSES_EXPORT(TERMINAL *) NCURSES_SP_NAME(set_curterm) (SCREEN*, TERMINAL *);
extern NCURSES_EXPORT(int)     NCURSES_SP_NAME(del_curterm) (SCREEN*, TERMINAL *);
extern NCURSES_EXPORT(int)     NCURSES_SP_NAME(restartterm) (SCREEN*, NCURSES_CONST char *, int, int *);
extern "C" {
extern "C" {
extern int __nss_configure_lookup (const char *__dbname,
extern mqd_t mq_open (const char *__name, int __oflag, ...)
extern int mq_close (mqd_t __mqdes) __THROW;
extern int mq_getattr (mqd_t __mqdes, struct mq_attr *__mqstat)
extern int mq_setattr (mqd_t __mqdes,
extern int mq_unlink (const char *__name) __THROW __nonnull ((1));
extern int mq_notify (mqd_t __mqdes, const struct sigevent *__notification)
extern ssize_t mq_receive (mqd_t __mqdes, char *__msg_ptr, size_t __msg_len,
extern int mq_send (mqd_t __mqdes, const char *__msg_ptr, size_t __msg_len,
extern ssize_t mq_timedreceive (mqd_t __mqdes, char *__restrict __msg_ptr,
extern int mq_timedsend (mqd_t __mqdes, const char *__msg_ptr,
extern "C" {
extern char *optarg;
extern int optind;
extern int opterr;
extern int optopt;
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
extern int __posix_getopt (int ___argc, char *const *___argv,
extern int getopt ();
extern int getopt_long (int ___argc, char *const *___argv,
extern int getopt_long_only (int ___argc, char *const *___argv,
extern int setjmp (jmp_buf __env) __THROWNL;
extern int __sigsetjmp (struct __jmp_buf_tag __env[1], int __savemask) __THROWNL;
extern int _setjmp (struct __jmp_buf_tag __env[1]) __THROWNL;
extern void longjmp (struct __jmp_buf_tag __env[1], int __val)
extern void _longjmp (struct __jmp_buf_tag __env[1], int __val)
extern void siglongjmp (sigjmp_buf __env, int __val)
extern char *dirname (char *__path) __THROW;
extern char *__xpg_basename (char *__path) __THROW;
extern "C" {
extern int dlg_getbegx(WINDOW * /*win*/);
extern int dlg_getbegy(WINDOW * /*win*/);
extern int dlg_getcurx(WINDOW * /*win*/);
extern int dlg_getcury(WINDOW * /*win*/);
extern int dlg_getmaxx(WINDOW * /*win*/);
extern int dlg_getmaxy(WINDOW * /*win*/);
extern int dlg_getparx(WINDOW * /*win*/);
extern int dlg_getpary(WINDOW * /*win*/);
extern WINDOW * dlg_wgetparent(WINDOW * /*win*/);
extern DIALOG_STATE dialog_state;
extern DIALOG_VARS dialog_vars;
extern DIALOG_COLORS dlg_color_table[];
extern const char *dialog_version(void);
extern int dialog_buildlist(const char * /*title*/, const char * /*cprompt*/, int /*height*/, int /*width*/, int /*list_height*/, int /*item_no*/, char ** /*items*/, int /*order_mode*/);
extern int dialog_calendar(const char * /*title*/, const char * /*subtitle*/, int /*height*/, int /*width*/, int /*day*/, int /*month*/, int /*year*/);
extern int dialog_checklist(const char * /*title*/, const char * /*cprompt*/, int /*height*/, int /*width*/, int /*list_height*/, int /*item_no*/, char ** /*items*/, int /*flag*/);
extern int dialog_dselect(const char * /*title*/, const char * /*path*/, int /*height*/, int /*width*/);
extern int dialog_editbox(const char * /*title*/, const char * /*file*/, int /*height*/, int /*width*/);
extern int dialog_form(const char * /*title*/, const char * /*cprompt*/, int /*height*/, int /*width*/, int /*form_height*/, int /*item_no*/, char ** /*items*/);
extern int dialog_fselect(const char * /*title*/, const char * /*path*/, int /*height*/, int /*width*/);
extern int dialog_gauge(const char * /*title*/, const char * /*cprompt*/, int /*height*/, int /*width*/, int /*percent*/);
extern int dialog_helpfile(const char * /*title*/, const char * /*file*/, int /*height*/, int /*width*/);
extern int dialog_inputbox(const char * /*title*/, const char * /*cprompt*/, int /*height*/, int /*width*/, const char * /*init*/, const int /*password*/);
extern int dialog_menu(const char * /*title*/, const char * /*cprompt*/, int /*height*/, int /*width*/, int /*menu_height*/, int /*item_no*/, char ** /*items*/);
extern int dialog_mixedform(const char * /*title*/, const char * /*cprompt*/, int /*height*/, int /*width*/, int /*form_height*/, int /*item_no*/, char ** /*items*/);
extern int dialog_mixedgauge(const char * /*title*/, const char * /*cprompt*/, int /*height*/, int /*width*/, int /*percent*/, int /*item_no*/, char ** /*items*/);
extern int dialog_msgbox(const char * /*title*/, const char * /*cprompt*/, int /*height*/, int /*width*/, int /*pauseopt*/);
extern int dialog_pause(const char * /*title*/, const char * /*cprompt*/, int /*height*/, int /*width*/, int /*seconds*/);
extern int dialog_prgbox(const char * /*title*/, const char * /*cprompt*/, const char * /*command*/, int /*height*/, int /*width*/, int /*pauseopt*/);
extern int dialog_progressbox(const char * /*title*/, const char * /*cprompt*/, int /*height*/, int /*width*/);
extern int dialog_rangebox(const char * /*title*/, const char * /*file*/, int /*height*/, int /*width*/, int /*min_value*/, int /*max_value*/, int /*default_value*/);
extern int dialog_tailbox(const char * /*title*/, const char * /*file*/, int /*height*/, int /*width*/, int /*bg_task*/);
extern int dialog_textbox(const char * /*title*/, const char * /*file*/, int /*height*/, int /*width*/);
extern int dialog_timebox(const char * /*title*/, const char * /*subtitle*/, int /*height*/, int /*width*/, int /*hour*/, int /*minute*/, int /*second*/);
extern int dialog_treeview(const char * /*title*/, const char * /*subtitle*/, int /*height*/, int /*width*/, int /*list_height*/, int /*item_no*/, char ** /*items*/, int /*flag*/);
extern int dialog_yesno(const char * /*title*/, const char * /*cprompt*/, int /*height*/, int /*width*/);
extern int dlg_checklist(const char * /*title*/, const char * /*cprompt*/, int /*height*/, int /*width*/, int /*list_height*/, int /*item_no*/, DIALOG_LISTITEM * /*items*/, const char * /*states*/, int /*flag*/, int * /*current_item*/);
extern int dlg_form(const char * /*title*/, const char * /*cprompt*/, int /*height*/, int /*width*/, int /*form_height*/, int /*item_no*/, DIALOG_FORMITEM * /*items*/, int * /*current_item*/);
extern int dlg_menu(const char * /*title*/, const char * /*cprompt*/, int /*height*/, int /*width*/, int /*menu_height*/, int /*item_no*/, DIALOG_LISTITEM * /*items*/, int * /*current_item*/, DIALOG_INPUTMENU /*rename_menu*/);
extern int dlg_progressbox(const char * /*title*/, const char * /*cprompt*/, int /*height*/, int /*width*/, int /*pauseopt*/, FILE * /* fp */);
extern char ** dlg_string_to_argv(char * /* blob */);
extern int dlg_count_argv(char ** /* argv */);
extern int dlg_eat_argv(int * /* argcp */, char *** /* argvp */, int /* start */, int /* count */);
extern void dlg_draw_arrows(WINDOW * /*dialog*/, int /*top_arrow*/, int /*bottom_arrow*/, int /*x*/, int /*top*/, int /*bottom*/);
extern void dlg_draw_arrows2(WINDOW * /*dialog*/, int /*top_arrow*/, int /*bottom_arrow*/, int /*x*/, int /*top*/, int /*bottom*/, chtype /*attr*/, chtype /*borderattr*/);
extern void dlg_draw_helpline(WINDOW * /*dialog*/, bool /*decorations*/);
extern void dlg_draw_scrollbar(WINDOW * /*dialog*/, long /* first_data */, long /* this_data */, long /* next_data */, long /* total_data */, int /* left */, int /* right */, int /*top*/, int /*bottom*/, chtype /*attr*/, chtype /*borderattr*/);
extern int dlg_buildlist(const char * /*title*/, const char * /*cprompt*/, int /*height*/, int /*width*/, int /*list_height*/, int /*item_no*/, DIALOG_LISTITEM * /*items*/, const char * /*states*/, int /*order_mode*/, int * /*current_item*/);
extern const char ** dlg_exit_label(void);
extern const char ** dlg_ok_label(void);
extern const char ** dlg_ok_labels(void);
extern const char ** dlg_yes_labels(void);
extern int dlg_button_count(const char ** /*labels*/);
extern int dlg_button_to_char(const char * /*label*/);
extern int dlg_button_x_step(const char ** /*labels*/, int /*limit*/, int * /*gap*/, int * /*margin*/, int * /*step*/);
extern int dlg_char_to_button(int /*ch*/, const char ** /*labels*/);
extern int dlg_exit_buttoncode(int /*button*/);
extern int dlg_match_char(int /*ch*/, const char * /*string*/);
extern int dlg_next_button(const char ** /*labels*/, int /*button*/);
extern int dlg_next_ok_buttonindex(int /*current*/, int /*extra*/);
extern int dlg_ok_buttoncode(int /*button*/);
extern int dlg_prev_button(const char ** /*labels*/, int /*button*/);
extern int dlg_prev_ok_buttonindex(int /*current*/, int /*extra*/);
extern int dlg_yes_buttoncode(int /*button*/);
extern void dlg_button_layout(const char ** /*labels*/, int * /*limit*/);
extern void dlg_button_sizes(const char ** /*labels*/, int /*vertical*/, int * /*longest*/, int * /*length*/);
extern void dlg_draw_buttons(WINDOW * /*win*/, int /*y*/, int /*x*/, const char ** /*labels*/, int /*selected*/, int /*vertical*/, int /*limit*/);
extern void dlg_align_columns(char ** /* target */, int  /* per_row */, int /* num_rows */);
extern void dlg_free_columns(char ** /* target */, int  /* per_row */, int /* num_rows */);
extern int dlg_editbox(const char * /*title*/, char *** /*list*/, int * /*rows*/, int /*height*/, int /*width*/);
extern int dlg_default_formitem(DIALOG_FORMITEM * /*items*/);
extern int dlg_ordinate(const char * /*s*/);
extern void dlg_free_formitems(DIALOG_FORMITEM * /*items*/);
extern void * dlg_allocate_gauge(const char * /* title */, const char * /* cprompt */, int /* height */, int /* width */, int /* percent */);
extern void * dlg_reallocate_gauge(void * /* objptr */, const char * /* title */, const char * /* cprompt */, int /* height */, int /* width */, int /* percent */);
extern void dlg_free_gauge(void * /* objptr */);
extern void dlg_update_gauge(void * /* objptr */, int /* percent */);
extern bool dlg_edit_string(char * /*string*/, int * /*offset*/, int /*key*/, int /*fkey*/, bool /*force*/);
extern const int * dlg_index_columns(const char * /*string*/);
extern const int * dlg_index_wchars(const char * /*string*/);
extern int dlg_count_columns(const char * /*string*/);
extern int dlg_count_wchars(const char * /*string*/);
extern int dlg_edit_offset(char * /*string*/, int /*offset*/, int /*x_last*/);
extern int dlg_find_index(const int * /*list*/, int  /*limit*/, int /*to_find*/);
extern int dlg_limit_columns(const char * /*string*/, int /*limit*/, int /*offset*/);
extern void dlg_finish_string(const char * /* string */);
extern void dlg_show_string(WINDOW * /*win*/, const char * /*string*/, int /*offset*/, chtype /*attr*/, int /*y_base*/, int /*x_base*/, int /*x_last*/, bool /*hidden*/, bool /*force*/);
extern int dlg_dummy_menutext(DIALOG_LISTITEM * /*items*/, int /*current*/, char * /*newtext*/);
extern int dlg_renamed_menutext(DIALOG_LISTITEM * /*items*/, int /*current*/, char * /*newtext*/);
extern int dlg_parse_rc(void);
extern void dlg_create_rc(const char * /*filename*/);
extern int dlg_treeview(const char * /*title*/, const char * /*cprompt*/, int /*height*/, int /*width*/, int /*list_height*/, int /*item_no*/, DIALOG_LISTITEM * /*items*/, const char * /*states*/, int * /*depths*/, int /*flag*/, int * /*current_item*/);
extern int dlg_getc(WINDOW * /*win*/, int * /*fkey*/);
extern int dlg_getc_callbacks(int /*ch*/, int /*fkey*/, int * /*result*/);
extern int dlg_last_getc(void);
extern void dlg_add_last_key(int /*mode*/);
extern void dlg_add_callback(DIALOG_CALLBACK * /*p*/);
extern void dlg_add_callback_ref(DIALOG_CALLBACK ** /*p*/, DIALOG_FREEBACK /* cleanup */);
extern void dlg_flush_getc(void);
extern void dlg_remove_callback(DIALOG_CALLBACK * /*p*/);
extern void dlg_killall_bg(int *retval);
extern WINDOW * dlg_new_modal_window(WINDOW * /*parent*/, int /*height*/, int /*width*/, int /*y*/, int /*x*/);
extern WINDOW * dlg_new_window(int /*height*/, int /*width*/, int /*y*/, int /*x*/);
extern WINDOW * dlg_sub_window(WINDOW * /*win*/, int /*height*/, int /*width*/, int /*y*/, int /*x*/);
extern bool dlg_need_separator(void);
extern char * dlg_set_result(const char * /*string*/);
extern char * dlg_strclone(const char * /*cprompt*/);
extern char * dlg_strempty(void);
extern chtype dlg_asciibox(chtype /*ch*/);
extern chtype dlg_boxchar(chtype /*ch*/);
extern chtype dlg_get_attrs(WINDOW * /*win*/);
extern const char * dlg_print_line(WINDOW * /*win*/, chtype * /*attr*/, const char * /*prompt*/, int /*lm*/, int /*rm*/, int * /*x*/);
extern int dlg_box_x_ordinate(int /*width*/);
extern int dlg_box_y_ordinate(int /*height*/);
extern int dlg_calc_list_width(int /*item_no*/, DIALOG_LISTITEM * /*items*/);
extern int dlg_calc_listw(int /*item_no*/, char ** /*items*/, int /*group*/);
extern int dlg_check_scrolled(int /* key */, int /* last */, int /* page */, bool * /* show */, int * /* offset */);
extern int dlg_count_real_columns(const char * /*text*/);
extern int dlg_default_item(char ** /*items*/, int /*llen*/);
extern int dlg_default_listitem(DIALOG_LISTITEM * /*items*/);
extern int dlg_defaultno_button(void);
extern int dlg_default_button(void);
extern int dlg_max_input(int /*max_len*/);
extern int dlg_print_scrolled(WINDOW * /* win */, const char * /* prompt */, int /* offset */, int /* height */, int /* width */, int /* pauseopt */);
extern void dlg_add_help_formitem(int * /* result */, char ** /* tag */, DIALOG_FORMITEM * /* item */);
extern void dlg_add_help_listitem(int * /* result */, char ** /* tag */, DIALOG_LISTITEM * /* item */);
extern void dlg_add_quoted(char * /*string*/);
extern void dlg_add_result(const char * /*string*/);
extern void dlg_add_separator(void);
extern void dlg_add_string(char * /*string*/);
extern void dlg_attr_clear(WINDOW * /*win*/, int /*height*/, int /*width*/, chtype /*attr*/);
extern void dlg_auto_size(const char * /*title*/, const char * /*prompt*/, int * /*height*/, int * /*width*/, int /*boxlines*/, int /*mincols*/);
extern void dlg_auto_sizefile(const char * /*title*/, const char * /*file*/, int * /*height*/, int * /*width*/, int /*boxlines*/, int /*mincols*/);
extern void dlg_beeping(void);
extern void dlg_calc_listh(int * /*height*/, int * /*list_height*/, int /*item_no*/);
extern void dlg_clear(void);
extern void dlg_clr_result(void);
extern void dlg_ctl_size(int /*height*/, int /*width*/);
extern void dlg_del_window(WINDOW * /*win*/);
extern void dlg_does_output(void);
extern void dlg_draw_bottom_box(WINDOW * /*win*/);
extern void dlg_draw_bottom_box2(WINDOW * /*win*/, chtype /*on_left*/, chtype /*on_right*/, chtype /*on_inside*/);
extern void dlg_draw_box(WINDOW * /*win*/, int /*y*/, int /*x*/, int /*height*/, int /*width*/, chtype /*boxchar*/, chtype /*borderchar*/);
extern void dlg_draw_box2(WINDOW * /*win*/, int /*y*/, int /*x*/, int /*height*/, int /*width*/, chtype /*boxchar*/, chtype /*borderchar*/, chtype /*borderchar2*/);
extern void dlg_draw_title(WINDOW *win, const char *title);
extern void dlg_exit(int /*code*/) GCC_NORETURN;
extern void dlg_item_help(const char * /*txt*/);
extern void dlg_print_autowrap(WINDOW * /*win*/, const char * /*prompt*/, int /*height*/, int /*width*/);
extern void dlg_print_listitem(WINDOW * /*win*/, const char * /*text*/, int /*climit*/, bool /*first*/, int /*selected*/);
extern void dlg_print_size(int /*height*/, int /*width*/);
extern void dlg_print_text(WINDOW * /*win*/, const char * /*txt*/, int /*len*/, chtype * /*attr*/);
extern void dlg_put_backtitle(void);
extern void dlg_restore_vars(DIALOG_VARS * /* save */);
extern void dlg_save_vars(DIALOG_VARS * /* save */);
extern void dlg_set_focus(WINDOW * /*parent*/, WINDOW * /*win*/);
extern void dlg_tab_correct_str(char * /*prompt*/);
extern void dlg_trim_string(char * /*src*/);
extern void end_dialog(void);
extern void init_dialog(FILE * /*input*/, FILE * /*output*/);
extern void dlg_exiterr(const char *, ...) GCC_NORETURN GCC_PRINTFLIKE(1,2);
extern chtype dlg_color_pair(int /*foreground*/, int /*background*/);
extern int dlg_color_count(void);
extern void dlg_color_setup(void);
extern void dlg_draw_shadow(WINDOW * /*win*/, int /*height*/, int /*width*/, int /*y*/, int /*x*/);
extern int dlg_strcmp(const char * /*a*/, const char * /*b*/);
extern void dlg_trace_msg(const char *fmt, ...) GCC_PRINTFLIKE(1,2);
extern void dlg_trace_win(WINDOW * /*win*/);
extern void dlg_trace_chr(int /*ch*/, int /*fkey*/);
extern void dlg_trace(const char * /*fname*/);
extern void dlg_move_window(WINDOW * /*win*/, int /*height*/, int /*width*/, int /*y*/, int /*x*/);
extern mseRegion * dlg_mouse_mkregion (int /*y*/, int /*x*/, int /*height*/, int /*width*/, int /*code*/);
extern void dlg_mouse_free_regions (void);
extern void dlg_mouse_mkbigregion (int /*y*/, int /*x*/, int /*height*/, int /*width*/, int /*code*/, int /*step_x*/, int /*step_y*/, int /*mode*/);
extern void dlg_mouse_setbase (int /*x*/, int /*y*/);
extern void dlg_mouse_setcode (int /*code*/);
extern mseRegion *dlg_mouse_region (int /*y*/, int /*x*/);
extern mseRegion *dlg_mouse_bigregion (int /*y*/, int /*x*/);
extern int dlg_mouse_wgetch (WINDOW * /*win*/, int * /*fkey*/);
extern int dlg_mouse_wgetch_nowait (WINDOW * /*win*/, int * /*fkey*/);
extern void _dlg_inputstr_leaks(void);
extern void _nc_free_and_exit(int);	/* nc_alloc.h normally not installed */
extern int wordexp (const char *__restrict __words,
extern void wordfree (wordexp_t *__wordexp) __THROW;
extern "C" {
extern "C" {
extern int getifaddrs (struct ifaddrs **__ifap) __THROW;
extern void freeifaddrs (struct ifaddrs *__ifa)  __THROW;
extern "C" {
extern NCURSES_EXPORT_VAR(chtype) acs_map[];
extern NCURSES_EXPORT(int) wgetch_events (WINDOW *, _nc_eventlist *);	/* experimental */
extern NCURSES_EXPORT(int) wgetnstr_events (WINDOW *,char *,int,_nc_eventlist *);/* experimental */
extern NCURSES_EXPORT(int) addch (const chtype);			/* generated */
extern NCURSES_EXPORT(int) addchnstr (const chtype *, int);		/* generated */
extern NCURSES_EXPORT(int) addchstr (const chtype *);			/* generated */
extern NCURSES_EXPORT(int) addnstr (const char *, int);			/* generated */
extern NCURSES_EXPORT(int) addstr (const char *);			/* generated */
extern NCURSES_EXPORT(int) attroff (NCURSES_ATTR_T);			/* generated */
extern NCURSES_EXPORT(int) attron (NCURSES_ATTR_T);			/* generated */
extern NCURSES_EXPORT(int) attrset (NCURSES_ATTR_T);			/* generated */
extern NCURSES_EXPORT(int) attr_get (attr_t *, short *, void *);	/* generated */
extern NCURSES_EXPORT(int) attr_off (attr_t, void *);			/* generated */
extern NCURSES_EXPORT(int) attr_on (attr_t, void *);			/* generated */
extern NCURSES_EXPORT(int) attr_set (attr_t, short, void *);		/* generated */
extern NCURSES_EXPORT(int) baudrate (void);				/* implemented */
extern NCURSES_EXPORT(int) beep  (void);				/* implemented */
extern NCURSES_EXPORT(int) bkgd (chtype);				/* generated */
extern NCURSES_EXPORT(void) bkgdset (chtype);				/* generated */
extern NCURSES_EXPORT(int) border (chtype,chtype,chtype,chtype,chtype,chtype,chtype,chtype);	/* generated */
extern NCURSES_EXPORT(int) box (WINDOW *, chtype, chtype);		/* generated */
extern NCURSES_EXPORT(bool) can_change_color (void);			/* implemented */
extern NCURSES_EXPORT(int) cbreak (void);				/* implemented */
extern NCURSES_EXPORT(int) chgat (int, attr_t, short, const void *);	/* generated */
extern NCURSES_EXPORT(int) clear (void);				/* generated */
extern NCURSES_EXPORT(int) clearok (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(int) clrtobot (void);				/* generated */
extern NCURSES_EXPORT(int) clrtoeol (void);				/* generated */
extern NCURSES_EXPORT(int) color_content (short,short*,short*,short*);	/* implemented */
extern NCURSES_EXPORT(int) color_set (short,void*);			/* generated */
extern NCURSES_EXPORT(int) COLOR_PAIR (int);				/* generated */
extern NCURSES_EXPORT(int) copywin (const WINDOW*,WINDOW*,int,int,int,int,int,int,int);	/* implemented */
extern NCURSES_EXPORT(int) curs_set (int);				/* implemented */
extern NCURSES_EXPORT(int) def_prog_mode (void);			/* implemented */
extern NCURSES_EXPORT(int) def_shell_mode (void);			/* implemented */
extern NCURSES_EXPORT(int) delay_output (int);				/* implemented */
extern NCURSES_EXPORT(int) delch (void);				/* generated */
extern NCURSES_EXPORT(void) delscreen (SCREEN *);			/* implemented */
extern NCURSES_EXPORT(int) delwin (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(int) deleteln (void);				/* generated */
extern NCURSES_EXPORT(WINDOW *) derwin (WINDOW *,int,int,int,int);	/* implemented */
extern NCURSES_EXPORT(int) doupdate (void);				/* implemented */
extern NCURSES_EXPORT(WINDOW *) dupwin (WINDOW *);			/* implemented */
extern NCURSES_EXPORT(int) echo (void);					/* implemented */
extern NCURSES_EXPORT(int) echochar (const chtype);			/* generated */
extern NCURSES_EXPORT(int) erase (void);				/* generated */
extern NCURSES_EXPORT(int) endwin (void);				/* implemented */
extern NCURSES_EXPORT(char) erasechar (void);				/* implemented */
extern NCURSES_EXPORT(void) filter (void);				/* implemented */
extern NCURSES_EXPORT(int) flash (void);				/* implemented */
extern NCURSES_EXPORT(int) flushinp (void);				/* implemented */
extern NCURSES_EXPORT(chtype) getbkgd (WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getch (void);				/* generated */
extern NCURSES_EXPORT(int) getnstr (char *, int);			/* generated */
extern NCURSES_EXPORT(int) getstr (char *);				/* generated */
extern NCURSES_EXPORT(WINDOW *) getwin (FILE *);			/* implemented */
extern NCURSES_EXPORT(int) halfdelay (int);				/* implemented */
extern NCURSES_EXPORT(bool) has_colors (void);				/* implemented */
extern NCURSES_EXPORT(bool) has_ic (void);				/* implemented */
extern NCURSES_EXPORT(bool) has_il (void);				/* implemented */
extern NCURSES_EXPORT(int) hline (chtype, int);				/* generated */
extern NCURSES_EXPORT(void) idcok (WINDOW *, bool);			/* implemented */
extern NCURSES_EXPORT(int) idlok (WINDOW *, bool);			/* implemented */
extern NCURSES_EXPORT(void) immedok (WINDOW *, bool);			/* implemented */
extern NCURSES_EXPORT(chtype) inch (void);				/* generated */
extern NCURSES_EXPORT(int) inchnstr (chtype *, int);			/* generated */
extern NCURSES_EXPORT(int) inchstr (chtype *);				/* generated */
extern NCURSES_EXPORT(WINDOW *) initscr (void);				/* implemented */
extern NCURSES_EXPORT(int) init_color (short,short,short,short);	/* implemented */
extern NCURSES_EXPORT(int) init_pair (short,short,short);		/* implemented */
extern NCURSES_EXPORT(int) innstr (char *, int);			/* generated */
extern NCURSES_EXPORT(int) insch (chtype);				/* generated */
extern NCURSES_EXPORT(int) insdelln (int);				/* generated */
extern NCURSES_EXPORT(int) insertln (void);				/* generated */
extern NCURSES_EXPORT(int) insnstr (const char *, int);			/* generated */
extern NCURSES_EXPORT(int) insstr (const char *);			/* generated */
extern NCURSES_EXPORT(int) instr (char *);				/* generated */
extern NCURSES_EXPORT(int) intrflush (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(bool) isendwin (void);				/* implemented */
extern NCURSES_EXPORT(bool) is_linetouched (WINDOW *,int);		/* implemented */
extern NCURSES_EXPORT(bool) is_wintouched (WINDOW *);			/* implemented */
extern NCURSES_EXPORT(NCURSES_CONST char *) keyname (int);		/* implemented */
extern NCURSES_EXPORT(int) keypad (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(char) killchar (void);				/* implemented */
extern NCURSES_EXPORT(int) leaveok (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(char *) longname (void);				/* implemented */
extern NCURSES_EXPORT(int) meta (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(int) move (int, int);				/* generated */
extern NCURSES_EXPORT(int) mvaddch (int, int, const chtype);		/* generated */
extern NCURSES_EXPORT(int) mvaddchnstr (int, int, const chtype *, int);	/* generated */
extern NCURSES_EXPORT(int) mvaddchstr (int, int, const chtype *);	/* generated */
extern NCURSES_EXPORT(int) mvaddnstr (int, int, const char *, int);	/* generated */
extern NCURSES_EXPORT(int) mvaddstr (int, int, const char *);		/* generated */
extern NCURSES_EXPORT(int) mvchgat (int, int, int, attr_t, short, const void *);	/* generated */
extern NCURSES_EXPORT(int) mvcur (int,int,int,int);			/* implemented */
extern NCURSES_EXPORT(int) mvdelch (int, int);				/* generated */
extern NCURSES_EXPORT(int) mvderwin (WINDOW *, int, int);		/* implemented */
extern NCURSES_EXPORT(int) mvgetch (int, int);				/* generated */
extern NCURSES_EXPORT(int) mvgetnstr (int, int, char *, int);		/* generated */
extern NCURSES_EXPORT(int) mvgetstr (int, int, char *);			/* generated */
extern NCURSES_EXPORT(int) mvhline (int, int, chtype, int);		/* generated */
extern NCURSES_EXPORT(chtype) mvinch (int, int);			/* generated */
extern NCURSES_EXPORT(int) mvinchnstr (int, int, chtype *, int);	/* generated */
extern NCURSES_EXPORT(int) mvinchstr (int, int, chtype *);		/* generated */
extern NCURSES_EXPORT(int) mvinnstr (int, int, char *, int);		/* generated */
extern NCURSES_EXPORT(int) mvinsch (int, int, chtype);			/* generated */
extern NCURSES_EXPORT(int) mvinsnstr (int, int, const char *, int);	/* generated */
extern NCURSES_EXPORT(int) mvinsstr (int, int, const char *);		/* generated */
extern NCURSES_EXPORT(int) mvinstr (int, int, char *);			/* generated */
extern NCURSES_EXPORT(int) mvprintw (int,int, const char *,...)		/* implemented */
extern NCURSES_EXPORT(int) mvscanw (int,int, NCURSES_CONST char *,...)	/* implemented */
extern NCURSES_EXPORT(int) mvvline (int, int, chtype, int);		/* generated */
extern NCURSES_EXPORT(int) mvwaddch (WINDOW *, int, int, const chtype);	/* generated */
extern NCURSES_EXPORT(int) mvwaddchnstr (WINDOW *, int, int, const chtype *, int);/* generated */
extern NCURSES_EXPORT(int) mvwaddchstr (WINDOW *, int, int, const chtype *);	/* generated */
extern NCURSES_EXPORT(int) mvwaddnstr (WINDOW *, int, int, const char *, int);	/* generated */
extern NCURSES_EXPORT(int) mvwaddstr (WINDOW *, int, int, const char *);	/* generated */
extern NCURSES_EXPORT(int) mvwchgat (WINDOW *, int, int, int, attr_t, short, const void *);/* generated */
extern NCURSES_EXPORT(int) mvwdelch (WINDOW *, int, int);		/* generated */
extern NCURSES_EXPORT(int) mvwgetch (WINDOW *, int, int);		/* generated */
extern NCURSES_EXPORT(int) mvwgetnstr (WINDOW *, int, int, char *, int);	/* generated */
extern NCURSES_EXPORT(int) mvwgetstr (WINDOW *, int, int, char *);	/* generated */
extern NCURSES_EXPORT(int) mvwhline (WINDOW *, int, int, chtype, int);	/* generated */
extern NCURSES_EXPORT(int) mvwin (WINDOW *,int,int);			/* implemented */
extern NCURSES_EXPORT(chtype) mvwinch (WINDOW *, int, int);			/* generated */
extern NCURSES_EXPORT(int) mvwinchnstr (WINDOW *, int, int, chtype *, int);	/* generated */
extern NCURSES_EXPORT(int) mvwinchstr (WINDOW *, int, int, chtype *);		/* generated */
extern NCURSES_EXPORT(int) mvwinnstr (WINDOW *, int, int, char *, int);		/* generated */
extern NCURSES_EXPORT(int) mvwinsch (WINDOW *, int, int, chtype);		/* generated */
extern NCURSES_EXPORT(int) mvwinsnstr (WINDOW *, int, int, const char *, int);	/* generated */
extern NCURSES_EXPORT(int) mvwinsstr (WINDOW *, int, int, const char *);	/* generated */
extern NCURSES_EXPORT(int) mvwinstr (WINDOW *, int, int, char *);		/* generated */
extern NCURSES_EXPORT(int) mvwprintw (WINDOW*,int,int, const char *,...)	/* implemented */
extern NCURSES_EXPORT(int) mvwscanw (WINDOW *,int,int, NCURSES_CONST char *,...)	/* implemented */
extern NCURSES_EXPORT(int) mvwvline (WINDOW *,int, int, chtype, int);	/* generated */
extern NCURSES_EXPORT(int) napms (int);					/* implemented */
extern NCURSES_EXPORT(WINDOW *) newpad (int,int);		       	/* implemented */
extern NCURSES_EXPORT(SCREEN *) newterm (NCURSES_CONST char *,FILE *,FILE *);	/* implemented */
extern NCURSES_EXPORT(WINDOW *) newwin (int,int,int,int);	       	/* implemented */
extern NCURSES_EXPORT(int) nl (void);					/* implemented */
extern NCURSES_EXPORT(int) nocbreak (void);				/* implemented */
extern NCURSES_EXPORT(int) nodelay (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(int) noecho (void);				/* implemented */
extern NCURSES_EXPORT(int) nonl (void);					/* implemented */
extern NCURSES_EXPORT(void) noqiflush (void);				/* implemented */
extern NCURSES_EXPORT(int) noraw (void);				/* implemented */
extern NCURSES_EXPORT(int) notimeout (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(int) overlay (const WINDOW*,WINDOW *);		/* implemented */
extern NCURSES_EXPORT(int) overwrite (const WINDOW*,WINDOW *);		/* implemented */
extern NCURSES_EXPORT(int) pair_content (short,short*,short*);		/* implemented */
extern NCURSES_EXPORT(int) PAIR_NUMBER (int);				/* generated */
extern NCURSES_EXPORT(int) pechochar (WINDOW *, const chtype);		/* implemented */
extern NCURSES_EXPORT(int) pnoutrefresh (WINDOW*,int,int,int,int,int,int);/* implemented */
extern NCURSES_EXPORT(int) prefresh (WINDOW *,int,int,int,int,int,int);	/* implemented */
extern NCURSES_EXPORT(int) printw (const char *,...)			/* implemented */
extern NCURSES_EXPORT(int) putwin (WINDOW *, FILE *);			/* implemented */
extern NCURSES_EXPORT(void) qiflush (void);				/* implemented */
extern NCURSES_EXPORT(int) raw (void);					/* implemented */
extern NCURSES_EXPORT(int) redrawwin (WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) refresh (void);				/* generated */
extern NCURSES_EXPORT(int) resetty (void);				/* implemented */
extern NCURSES_EXPORT(int) reset_prog_mode (void);			/* implemented */
extern NCURSES_EXPORT(int) reset_shell_mode (void);			/* implemented */
extern NCURSES_EXPORT(int) ripoffline (int, int (*)(WINDOW *, int));	/* implemented */
extern NCURSES_EXPORT(int) savetty (void);				/* implemented */
extern NCURSES_EXPORT(int) scanw (NCURSES_CONST char *,...)		/* implemented */
extern NCURSES_EXPORT(int) scr_dump (const char *);			/* implemented */
extern NCURSES_EXPORT(int) scr_init (const char *);			/* implemented */
extern NCURSES_EXPORT(int) scrl (int);					/* generated */
extern NCURSES_EXPORT(int) scroll (WINDOW *);				/* generated */
extern NCURSES_EXPORT(int) scrollok (WINDOW *,bool);			/* implemented */
extern NCURSES_EXPORT(int) scr_restore (const char *);			/* implemented */
extern NCURSES_EXPORT(int) scr_set (const char *);			/* implemented */
extern NCURSES_EXPORT(int) setscrreg (int,int);				/* generated */
extern NCURSES_EXPORT(SCREEN *) set_term (SCREEN *);			/* implemented */
extern NCURSES_EXPORT(int) slk_attroff (const chtype);			/* implemented */
extern NCURSES_EXPORT(int) slk_attr_off (const attr_t, void *);		/* generated:WIDEC */
extern NCURSES_EXPORT(int) slk_attron (const chtype);			/* implemented */
extern NCURSES_EXPORT(int) slk_attr_on (attr_t,void*);			/* generated:WIDEC */
extern NCURSES_EXPORT(int) slk_attrset (const chtype);			/* implemented */
extern NCURSES_EXPORT(attr_t) slk_attr (void);				/* implemented */
extern NCURSES_EXPORT(int) slk_attr_set (const attr_t,short,void*);	/* implemented */
extern NCURSES_EXPORT(int) slk_clear (void);				/* implemented */
extern NCURSES_EXPORT(int) slk_color (short);				/* implemented */
extern NCURSES_EXPORT(int) slk_init (int);				/* implemented */
extern NCURSES_EXPORT(char *) slk_label (int);				/* implemented */
extern NCURSES_EXPORT(int) slk_noutrefresh (void);			/* implemented */
extern NCURSES_EXPORT(int) slk_refresh (void);				/* implemented */
extern NCURSES_EXPORT(int) slk_restore (void);				/* implemented */
extern NCURSES_EXPORT(int) slk_set (int,const char *,int);		/* implemented */
extern NCURSES_EXPORT(int) slk_touch (void);	      	       		/* implemented */
extern NCURSES_EXPORT(int) standout (void);				/* generated */
extern NCURSES_EXPORT(int) standend (void);				/* generated */
extern NCURSES_EXPORT(int) start_color (void);				/* implemented */
extern NCURSES_EXPORT(WINDOW *) subpad (WINDOW *, int, int, int, int);	/* implemented */
extern NCURSES_EXPORT(WINDOW *) subwin (WINDOW *, int, int, int, int);	/* implemented */
extern NCURSES_EXPORT(int) syncok (WINDOW *, bool);			/* implemented */
extern NCURSES_EXPORT(chtype) termattrs (void);				/* implemented */
extern NCURSES_EXPORT(char *) termname (void);				/* implemented */
extern NCURSES_EXPORT(void) timeout (int);				/* generated */
extern NCURSES_EXPORT(int) touchline (WINDOW *, int, int);		/* generated */
extern NCURSES_EXPORT(int) touchwin (WINDOW *);				/* generated */
extern NCURSES_EXPORT(int) typeahead (int);				/* implemented */
extern NCURSES_EXPORT(int) ungetch (int);				/* implemented */
extern NCURSES_EXPORT(int) untouchwin (WINDOW *);			/* generated */
extern NCURSES_EXPORT(void) use_env (bool);				/* implemented */
extern NCURSES_EXPORT(void) use_tioctl (bool);				/* implemented */
extern NCURSES_EXPORT(int) vidattr (chtype);				/* implemented */
extern NCURSES_EXPORT(int) vidputs (chtype, NCURSES_OUTC);		/* implemented */
extern NCURSES_EXPORT(int) vline (chtype, int);				/* generated */
extern NCURSES_EXPORT(int) vwprintw (WINDOW *, const char *,va_list);	/* implemented */
extern NCURSES_EXPORT(int) vw_printw (WINDOW *, const char *,va_list);	/* generated */
extern NCURSES_EXPORT(int) vwscanw (WINDOW *, NCURSES_CONST char *,va_list);	/* implemented */
extern NCURSES_EXPORT(int) vw_scanw (WINDOW *, NCURSES_CONST char *,va_list);	/* generated */
extern NCURSES_EXPORT(int) waddch (WINDOW *, const chtype);		/* implemented */
extern NCURSES_EXPORT(int) waddchnstr (WINDOW *,const chtype *,int);	/* implemented */
extern NCURSES_EXPORT(int) waddchstr (WINDOW *,const chtype *);		/* generated */
extern NCURSES_EXPORT(int) waddnstr (WINDOW *,const char *,int);	/* implemented */
extern NCURSES_EXPORT(int) waddstr (WINDOW *,const char *);		/* generated */
extern NCURSES_EXPORT(int) wattron (WINDOW *, int);			/* generated */
extern NCURSES_EXPORT(int) wattroff (WINDOW *, int);			/* generated */
extern NCURSES_EXPORT(int) wattrset (WINDOW *, int);			/* generated */
extern NCURSES_EXPORT(int) wattr_get (WINDOW *, attr_t *, short *, void *);	/* generated */
extern NCURSES_EXPORT(int) wattr_on (WINDOW *, attr_t, void *);		/* implemented */
extern NCURSES_EXPORT(int) wattr_off (WINDOW *, attr_t, void *);	/* implemented */
extern NCURSES_EXPORT(int) wattr_set (WINDOW *, attr_t, short, void *);	/* generated */
extern NCURSES_EXPORT(int) wbkgd (WINDOW *, chtype);			/* implemented */
extern NCURSES_EXPORT(void) wbkgdset (WINDOW *,chtype);			/* implemented */
extern NCURSES_EXPORT(int) wborder (WINDOW *,chtype,chtype,chtype,chtype,chtype,chtype,chtype,chtype);	/* implemented */
extern NCURSES_EXPORT(int) wchgat (WINDOW *, int, attr_t, short, const void *);/* implemented */
extern NCURSES_EXPORT(int) wclear (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(int) wclrtobot (WINDOW *);			/* implemented */
extern NCURSES_EXPORT(int) wclrtoeol (WINDOW *);			/* implemented */
extern NCURSES_EXPORT(int) wcolor_set (WINDOW*,short,void*);		/* implemented */
extern NCURSES_EXPORT(void) wcursyncup (WINDOW *);			/* implemented */
extern NCURSES_EXPORT(int) wdelch (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(int) wdeleteln (WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) wechochar (WINDOW *, const chtype);		/* implemented */
extern NCURSES_EXPORT(int) werase (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(int) wgetch (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(int) wgetnstr (WINDOW *,char *,int);		/* implemented */
extern NCURSES_EXPORT(int) wgetstr (WINDOW *, char *);			/* generated */
extern NCURSES_EXPORT(int) whline (WINDOW *, chtype, int);		/* implemented */
extern NCURSES_EXPORT(chtype) winch (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(int) winchnstr (WINDOW *, chtype *, int);		/* implemented */
extern NCURSES_EXPORT(int) winchstr (WINDOW *, chtype *);		/* generated */
extern NCURSES_EXPORT(int) winnstr (WINDOW *, char *, int);		/* implemented */
extern NCURSES_EXPORT(int) winsch (WINDOW *, chtype);			/* implemented */
extern NCURSES_EXPORT(int) winsdelln (WINDOW *,int);			/* implemented */
extern NCURSES_EXPORT(int) winsertln (WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) winsnstr (WINDOW *, const char *,int);	/* implemented */
extern NCURSES_EXPORT(int) winsstr (WINDOW *, const char *);		/* generated */
extern NCURSES_EXPORT(int) winstr (WINDOW *, char *);			/* generated */
extern NCURSES_EXPORT(int) wmove (WINDOW *,int,int);			/* implemented */
extern NCURSES_EXPORT(int) wnoutrefresh (WINDOW *);			/* implemented */
extern NCURSES_EXPORT(int) wprintw (WINDOW *, const char *,...)		/* implemented */
extern NCURSES_EXPORT(int) wredrawln (WINDOW *,int,int);		/* implemented */
extern NCURSES_EXPORT(int) wrefresh (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(int) wscanw (WINDOW *, NCURSES_CONST char *,...)	/* implemented */
extern NCURSES_EXPORT(int) wscrl (WINDOW *,int);			/* implemented */
extern NCURSES_EXPORT(int) wsetscrreg (WINDOW *,int,int);		/* implemented */
extern NCURSES_EXPORT(int) wstandout (WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) wstandend (WINDOW *);			/* generated */
extern NCURSES_EXPORT(void) wsyncdown (WINDOW *);			/* implemented */
extern NCURSES_EXPORT(void) wsyncup (WINDOW *);				/* implemented */
extern NCURSES_EXPORT(void) wtimeout (WINDOW *,int);			/* implemented */
extern NCURSES_EXPORT(int) wtouchln (WINDOW *,int,int,int);		/* implemented */
extern NCURSES_EXPORT(int) wvline (WINDOW *,chtype,int);		/* implemented */
extern NCURSES_EXPORT(int) tigetflag (NCURSES_CONST char *);		/* implemented */
extern NCURSES_EXPORT(int) tigetnum (NCURSES_CONST char *);		/* implemented */
extern NCURSES_EXPORT(char *) tigetstr (NCURSES_CONST char *);		/* implemented */
extern NCURSES_EXPORT(int) putp (const char *);				/* implemented */
extern NCURSES_EXPORT(char *) tparm (NCURSES_CONST char *, ...);	/* special */
extern NCURSES_EXPORT(char *) tparm (NCURSES_CONST char *, NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG);	/* special */
extern NCURSES_EXPORT(char *) tparm_varargs (NCURSES_CONST char *, ...);	/* special */
extern NCURSES_EXPORT(char *) tiparm (const char *, ...);		/* special */
extern NCURSES_EXPORT(int) getattrs (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getcurx (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getcury (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getbegx (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getbegy (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getmaxx (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getmaxy (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getparx (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(int) getpary (const WINDOW *);			/* generated */
extern NCURSES_EXPORT(bool) is_term_resized (int, int);
extern NCURSES_EXPORT(char *) keybound (int, int);
extern NCURSES_EXPORT(const char *) curses_version (void);
extern NCURSES_EXPORT(int) assume_default_colors (int, int);
extern NCURSES_EXPORT(int) define_key (const char *, int);
extern NCURSES_EXPORT(int) get_escdelay (void);
extern NCURSES_EXPORT(int) key_defined (const char *);
extern NCURSES_EXPORT(int) keyok (int, bool);
extern NCURSES_EXPORT(int) resize_term (int, int);
extern NCURSES_EXPORT(int) resizeterm (int, int);
extern NCURSES_EXPORT(int) set_escdelay (int);
extern NCURSES_EXPORT(int) set_tabsize (int);
extern NCURSES_EXPORT(int) use_default_colors (void);
extern NCURSES_EXPORT(int) use_extended_names (bool);
extern NCURSES_EXPORT(int) use_legacy_coding (int);
extern NCURSES_EXPORT(int) use_screen (SCREEN *, NCURSES_SCREEN_CB, void *);
extern NCURSES_EXPORT(int) use_window (WINDOW *, NCURSES_WINDOW_CB, void *);
extern NCURSES_EXPORT(int) wresize (WINDOW *, int, int);
extern NCURSES_EXPORT(void) nofilter(void);
extern NCURSES_EXPORT(WINDOW *) wgetparent (const WINDOW *);	/* generated */
extern NCURSES_EXPORT(bool) is_cleared (const WINDOW *);	/* generated */
extern NCURSES_EXPORT(bool) is_idcok (const WINDOW *);		/* generated */
extern NCURSES_EXPORT(bool) is_idlok (const WINDOW *);		/* generated */
extern NCURSES_EXPORT(bool) is_immedok (const WINDOW *);	/* generated */
extern NCURSES_EXPORT(bool) is_keypad (const WINDOW *);		/* generated */
extern NCURSES_EXPORT(bool) is_leaveok (const WINDOW *);	/* generated */
extern NCURSES_EXPORT(bool) is_nodelay (const WINDOW *);	/* generated */
extern NCURSES_EXPORT(bool) is_notimeout (const WINDOW *);	/* generated */
extern NCURSES_EXPORT(bool) is_pad (const WINDOW *);		/* generated */
extern NCURSES_EXPORT(bool) is_scrollok (const WINDOW *);	/* generated */
extern NCURSES_EXPORT(bool) is_subwin (const WINDOW *);		/* generated */
extern NCURSES_EXPORT(bool) is_syncok (const WINDOW *);		/* generated */
extern NCURSES_EXPORT(int) wgetscrreg (const WINDOW *, int *, int *); /* generated */
extern NCURSES_EXPORT(SCREEN *) new_prescr (void); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(baudrate) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(beep) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(bool) NCURSES_SP_NAME(can_change_color) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(cbreak) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(curs_set) (SCREEN*, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(color_content) (SCREEN*, short, short*, short*, short*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(def_prog_mode) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(def_shell_mode) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(delay_output) (SCREEN*, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(doupdate) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(echo) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(endwin) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(char) NCURSES_SP_NAME(erasechar) (SCREEN*);/* implemented:SP_FUNC */
extern NCURSES_EXPORT(void) NCURSES_SP_NAME(filter) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(flash) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(flushinp) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(WINDOW *) NCURSES_SP_NAME(getwin) (SCREEN*, FILE *);			/* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(halfdelay) (SCREEN*, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(bool) NCURSES_SP_NAME(has_colors) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(bool) NCURSES_SP_NAME(has_ic) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(bool) NCURSES_SP_NAME(has_il) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(init_color) (SCREEN*, short, short, short, short); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(init_pair) (SCREEN*, short, short, short); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(intrflush) (SCREEN*, WINDOW*, bool);	/* implemented:SP_FUNC */
extern NCURSES_EXPORT(bool) NCURSES_SP_NAME(isendwin) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(NCURSES_CONST char *) NCURSES_SP_NAME(keyname) (SCREEN*, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(char) NCURSES_SP_NAME(killchar) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(char *) NCURSES_SP_NAME(longname) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(mvcur) (SCREEN*, int, int, int, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(napms) (SCREEN*, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(WINDOW *) NCURSES_SP_NAME(newpad) (SCREEN*, int, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(SCREEN *) NCURSES_SP_NAME(newterm) (SCREEN*, NCURSES_CONST char *, FILE *, FILE *); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(WINDOW *) NCURSES_SP_NAME(newwin) (SCREEN*, int, int, int, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(nl) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(nocbreak) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(noecho) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(nonl) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(void) NCURSES_SP_NAME(noqiflush) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(noraw) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(pair_content) (SCREEN*, short, short*, short*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(void) NCURSES_SP_NAME(qiflush) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(raw) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(reset_prog_mode) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(reset_shell_mode) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(resetty) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(ripoffline) (SCREEN*, int, int (*)(WINDOW *, int));	/* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(savetty) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(scr_init) (SCREEN*, const char *); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(scr_restore) (SCREEN*, const char *); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(scr_set) (SCREEN*, const char *); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_attroff) (SCREEN*, const chtype); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_attron) (SCREEN*, const chtype); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_attrset) (SCREEN*, const chtype); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(attr_t) NCURSES_SP_NAME(slk_attr) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_attr_set) (SCREEN*, const attr_t, short, void*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_clear) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_color) (SCREEN*, short); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_init) (SCREEN*, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(char *) NCURSES_SP_NAME(slk_label) (SCREEN*, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_noutrefresh) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_refresh) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_restore) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_set) (SCREEN*, int, const char *, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(slk_touch) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(start_color) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(chtype) NCURSES_SP_NAME(termattrs) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(char *) NCURSES_SP_NAME(termname) (SCREEN*); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(typeahead) (SCREEN*, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(ungetch) (SCREEN*, int); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(void) NCURSES_SP_NAME(use_env) (SCREEN*, bool); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(void) NCURSES_SP_NAME(use_tioctl) (SCREEN*, bool); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(vidattr) (SCREEN*, chtype);	/* implemented:SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(vidputs) (SCREEN*, chtype, NCURSES_SP_OUTC); /* implemented:SP_FUNC */
extern NCURSES_EXPORT(char *) NCURSES_SP_NAME(keybound) (SCREEN*, int, int);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(assume_default_colors) (SCREEN*, int, int);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(define_key) (SCREEN*, const char *, int);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(get_escdelay) (SCREEN*);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(bool) NCURSES_SP_NAME(is_term_resized) (SCREEN*, int, int);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(key_defined) (SCREEN*, const char *);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(keyok) (SCREEN*, int, bool);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(void) NCURSES_SP_NAME(nofilter) (SCREEN*); /* implemented */	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(resize_term) (SCREEN*, int, int);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(resizeterm) (SCREEN*, int, int);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(set_escdelay) (SCREEN*, int);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(set_tabsize) (SCREEN*, int);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(use_default_colors) (SCREEN*);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(use_legacy_coding) (SCREEN*, int);	/* implemented:EXT_SP_FUNC */
extern NCURSES_EXPORT_VAR(WINDOW *) curscr;
extern NCURSES_EXPORT_VAR(WINDOW *) newscr;
extern NCURSES_EXPORT_VAR(WINDOW *) stdscr;
extern NCURSES_EXPORT_VAR(char) ttytype[];
extern NCURSES_EXPORT_VAR(int) COLORS;
extern NCURSES_EXPORT_VAR(int) COLOR_PAIRS;
extern NCURSES_EXPORT_VAR(int) COLS;
extern NCURSES_EXPORT_VAR(int) ESCDELAY;
extern NCURSES_EXPORT_VAR(int) LINES;
extern NCURSES_EXPORT_VAR(int) TABSIZE;
extern NCURSES_EXPORT(bool)    has_mouse(void);
extern NCURSES_EXPORT(int)     getmouse (MEVENT *);
extern NCURSES_EXPORT(int)     ungetmouse (MEVENT *);
extern NCURSES_EXPORT(mmask_t) mousemask (mmask_t, mmask_t *);
extern NCURSES_EXPORT(bool)    wenclose (const WINDOW *, int, int);
extern NCURSES_EXPORT(int)     mouseinterval (int);
extern NCURSES_EXPORT(bool)    wmouse_trafo (const WINDOW*, int*, int*, bool);
extern NCURSES_EXPORT(bool)    mouse_trafo (int*, int*, bool);              /* generated */
extern NCURSES_EXPORT(bool)    NCURSES_SP_NAME(has_mouse) (SCREEN*);
extern NCURSES_EXPORT(int)     NCURSES_SP_NAME(getmouse) (SCREEN*, MEVENT *);
extern NCURSES_EXPORT(int)     NCURSES_SP_NAME(ungetmouse) (SCREEN*,MEVENT *);
extern NCURSES_EXPORT(mmask_t) NCURSES_SP_NAME(mousemask) (SCREEN*, mmask_t, mmask_t *);
extern NCURSES_EXPORT(int)     NCURSES_SP_NAME(mouseinterval) (SCREEN*, int);
extern NCURSES_EXPORT(int) mcprint (char *, int);	/* direct data to printer */
extern NCURSES_EXPORT(int) has_key (int);		/* do we have given key? */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(has_key) (SCREEN*, int);    /* do we have given key? */
extern NCURSES_EXPORT(int) NCURSES_SP_NAME(mcprint) (SCREEN*, char *, int);	/* direct data to printer */
extern NCURSES_EXPORT(void) _tracef (const char *, ...) GCC_PRINTFLIKE(1,2);
extern NCURSES_EXPORT(void) _tracedump (const char *, WINDOW *);
extern NCURSES_EXPORT(char *) _traceattr (attr_t);
extern NCURSES_EXPORT(char *) _traceattr2 (int, chtype);
extern NCURSES_EXPORT(char *) _nc_tracebits (void);
extern NCURSES_EXPORT(char *) _tracechar (int);
extern NCURSES_EXPORT(char *) _tracechtype (chtype);
extern NCURSES_EXPORT(char *) _tracechtype2 (int, chtype);
extern NCURSES_EXPORT(char *) _tracecchar_t (const cchar_t *);
extern NCURSES_EXPORT(char *) _tracecchar_t2 (int, const cchar_t *);
extern NCURSES_EXPORT(char *) _tracemouse (const MEVENT *);
extern NCURSES_EXPORT(void) trace (const unsigned int);
extern NCURSES_EXPORT_VAR(int) _nc_optimize_enable;		/* enable optimizations */
extern NCURSES_EXPORT(const char *) _nc_visbuf (const char *);
extern int *__h_errno_location (void) __THROW __attribute__ ((__const__));
extern void herror (const char *__str) __THROW;
extern const char *hstrerror (int __err_num) __THROW;
extern void sethostent (int __stay_open);
extern void endhostent (void);
extern struct hostent *gethostent (void);
extern struct hostent *gethostbyaddr (const void *__addr, __socklen_t __len,
extern struct hostent *gethostbyname (const char *__name);
extern struct hostent *gethostbyname2 (const char *__name, int __af);
extern int gethostent_r (struct hostent *__restrict __result_buf,
extern int gethostbyaddr_r (const void *__restrict __addr, __socklen_t __len,
extern int gethostbyname_r (const char *__restrict __name,
extern int gethostbyname2_r (const char *__restrict __name, int __af,
extern void setnetent (int __stay_open);
extern void endnetent (void);
extern struct netent *getnetent (void);
extern struct netent *getnetbyaddr (uint32_t __net, int __type);
extern struct netent *getnetbyname (const char *__name);
extern int getnetent_r (struct netent *__restrict __result_buf,
extern int getnetbyaddr_r (uint32_t __net, int __type,
extern int getnetbyname_r (const char *__restrict __name,
extern void setservent (int __stay_open);
extern void endservent (void);
extern struct servent *getservent (void);
extern struct servent *getservbyname (const char *__name, const char *__proto);
extern struct servent *getservbyport (int __port, const char *__proto);
extern int getservent_r (struct servent *__restrict __result_buf,
extern int getservbyname_r (const char *__restrict __name,
extern int getservbyport_r (int __port, const char *__restrict __proto,
extern void setprotoent (int __stay_open);
extern void endprotoent (void);
extern struct protoent *getprotoent (void);
extern struct protoent *getprotobyname (const char *__name);
extern struct protoent *getprotobynumber (int __proto);
extern int getprotoent_r (struct protoent *__restrict __result_buf,
extern int getprotobyname_r (const char *__restrict __name,
extern int getprotobynumber_r (int __proto,
extern int setnetgrent (const char *__netgroup);
extern void endnetgrent (void);
extern int getnetgrent (char **__restrict __hostp,
extern int innetgr (const char *__netgroup, const char *__host,
extern int getnetgrent_r (char **__restrict __hostp,
extern int rcmd (char **__restrict __ahost, unsigned short int __rport,
extern int rcmd_af (char **__restrict __ahost, unsigned short int __rport,
extern int rexec (char **__restrict __ahost, int __rport,
extern int rexec_af (char **__restrict __ahost, int __rport,
extern int ruserok (const char *__rhost, int __suser,
extern int ruserok_af (const char *__rhost, int __suser,
extern int iruserok (uint32_t __raddr, int __suser,
extern int iruserok_af (const void *__raddr, int __suser,
extern int rresvport (int *__alport);
extern int rresvport_af (int *__alport, sa_family_t __af);
extern int getaddrinfo (const char *__restrict __name,
extern void freeaddrinfo (struct addrinfo *__ai) __THROW;
extern const char *gai_strerror (int __ecode) __THROW;
extern int getnameinfo (const struct sockaddr *__restrict __sa,
extern int getaddrinfo_a (int __mode, struct gaicb *__list[__restrict_arr],
extern int gai_suspend (const struct gaicb *const __list[], int __ent,
extern int gai_error (struct gaicb *__req) __THROW;
extern int gai_cancel (struct gaicb *__gaicbp) __THROW;
extern void setgrent (void);
extern void endgrent (void);
extern struct group *getgrent (void);
extern struct group *fgetgrent (FILE *__stream);
extern int putgrent (const struct group *__restrict __p,
extern struct group *getgrgid (__gid_t __gid);
extern struct group *getgrnam (const char *__name);
extern int getgrent_r (struct group *__restrict __resultbuf,
extern int getgrgid_r (__gid_t __gid, struct group *__restrict __resultbuf,
extern int getgrnam_r (const char *__restrict __name,
extern int fgetgrent_r (FILE *__restrict __stream,
extern int setgroups (size_t __n, const __gid_t *__groups) __THROW;
extern int getgrouplist (const char *__user, __gid_t __group,
extern int initgroups (const char *__user, __gid_t __group);
extern "C" {
extern int dlg_lookup_key(WINDOW * /*win*/, int /*curses_key*/, int * /*dialog_key*/);
extern int dlg_result_key(int /*dialog_key*/, int /*fkey*/, int * /*resultp*/);
extern void dlg_register_buttons(WINDOW * /*win*/, const char * /*name*/, const char ** /*buttons*/);
extern void dlg_register_window(WINDOW * /*win*/, const char * /*name*/, DLG_KEYS_BINDING * /*binding*/);
extern void dlg_unregister_window(WINDOW * /*win*/);
extern int dlg_parse_bindkey(char * /*params*/);
extern void dlg_dump_keys(FILE * /*fp*/);
extern void dlg_dump_window_keys(FILE * /*fp*/, WINDOW * /*win*/);
extern "C" {
extern int sem_init (sem_t *__sem, int __pshared, unsigned int __value)
extern int sem_destroy (sem_t *__sem) __THROW;
extern sem_t *sem_open (const char *__name, int __oflag, ...) __THROW;
extern int sem_close (sem_t *__sem) __THROW;
extern int sem_unlink (const char *__name) __THROW;
extern int sem_wait (sem_t *__sem);
extern int sem_timedwait (sem_t *__restrict __sem,
extern int sem_trywait (sem_t *__sem) __THROWNL;
extern int sem_post (sem_t *__sem) __THROWNL;
extern int sem_getvalue (sem_t *__restrict __sem, int *__restrict __sval)
extern int openpty (int *__amaster, int *__aslave, char *__name,
extern int forkpty (int *__amaster, char *__name,
extern float __nldbl_nexttowardf (float __x, long double __y)
extern float __REDIRECT_NTH (nexttowardf, (float __x, long double __y),
extern double __REDIRECT_NTH (nexttoward, (double __x, long double __y),
extern long double __REDIRECT_NTH (nexttowardl,
extern int signgam;
extern _LIB_VERSION_TYPE _LIB_VERSION;
extern int matherr (struct __exception *__exc) throw ();
extern int matherr (struct exception *__exc);
extern "C" {
extern DECLSPEC SDL_mutex * SDLCALL SDL_CreateMutex(void);
extern DECLSPEC int SDLCALL SDL_mutexP(SDL_mutex *mutex);
extern DECLSPEC int SDLCALL SDL_mutexV(SDL_mutex *mutex);
extern DECLSPEC void SDLCALL SDL_DestroyMutex(SDL_mutex *mutex);
extern DECLSPEC SDL_sem * SDLCALL SDL_CreateSemaphore(Uint32 initial_value);
extern DECLSPEC void SDLCALL SDL_DestroySemaphore(SDL_sem *sem);
extern DECLSPEC int SDLCALL SDL_SemWait(SDL_sem *sem);
extern DECLSPEC int SDLCALL SDL_SemTryWait(SDL_sem *sem);
extern DECLSPEC int SDLCALL SDL_SemWaitTimeout(SDL_sem *sem, Uint32 ms);
extern DECLSPEC int SDLCALL SDL_SemPost(SDL_sem *sem);
extern DECLSPEC Uint32 SDLCALL SDL_SemValue(SDL_sem *sem);
extern DECLSPEC SDL_cond * SDLCALL SDL_CreateCond(void);
extern DECLSPEC void SDLCALL SDL_DestroyCond(SDL_cond *cond);
extern DECLSPEC int SDLCALL SDL_CondSignal(SDL_cond *cond);
extern DECLSPEC int SDLCALL SDL_CondBroadcast(SDL_cond *cond);
extern DECLSPEC int SDLCALL SDL_CondWait(SDL_cond *cond, SDL_mutex *mut);
extern DECLSPEC int SDLCALL SDL_CondWaitTimeout(SDL_cond *cond, SDL_mutex *mutex, Uint32 ms);
extern "C" {
extern DECLSPEC Uint8 SDLCALL SDL_GetMouseState(int *x, int *y);
extern DECLSPEC Uint8 SDLCALL SDL_GetRelativeMouseState(int *x, int *y);
extern DECLSPEC void SDLCALL SDL_WarpMouse(Uint16 x, Uint16 y);
extern DECLSPEC SDL_Cursor * SDLCALL SDL_CreateCursor
extern DECLSPEC void SDLCALL SDL_SetCursor(SDL_Cursor *cursor);
extern DECLSPEC SDL_Cursor * SDLCALL SDL_GetCursor(void);
extern DECLSPEC void SDLCALL SDL_FreeCursor(SDL_Cursor *cursor);
extern DECLSPEC int SDLCALL SDL_ShowCursor(int toggle);
extern "C" {
extern "C" {
extern DECLSPEC void * SDLCALL SDL_LoadObject(const char *sofile);
extern DECLSPEC void * SDLCALL SDL_LoadFunction(void *handle, const char *name);
extern DECLSPEC void SDLCALL SDL_UnloadObject(void *handle);
extern "C" {
extern DECLSPEC int SDLCALL SDL_VideoInit(const char *driver_name, Uint32 flags);
extern DECLSPEC void SDLCALL SDL_VideoQuit(void);
extern DECLSPEC char * SDLCALL SDL_VideoDriverName(char *namebuf, int maxlen);
extern DECLSPEC SDL_Surface * SDLCALL SDL_GetVideoSurface(void);
extern DECLSPEC const SDL_VideoInfo * SDLCALL SDL_GetVideoInfo(void);
extern DECLSPEC int SDLCALL SDL_VideoModeOK(int width, int height, int bpp, Uint32 flags);
extern DECLSPEC SDL_Rect ** SDLCALL SDL_ListModes(SDL_PixelFormat *format, Uint32 flags);
extern DECLSPEC SDL_Surface * SDLCALL SDL_SetVideoMode
extern DECLSPEC void SDLCALL SDL_UpdateRects
extern DECLSPEC void SDLCALL SDL_UpdateRect
extern DECLSPEC int SDLCALL SDL_Flip(SDL_Surface *screen);
extern DECLSPEC int SDLCALL SDL_SetGamma(float red, float green, float blue);
extern DECLSPEC int SDLCALL SDL_SetGammaRamp(const Uint16 *red, const Uint16 *green, const Uint16 *blue);
extern DECLSPEC int SDLCALL SDL_GetGammaRamp(Uint16 *red, Uint16 *green, Uint16 *blue);
extern DECLSPEC int SDLCALL SDL_SetColors(SDL_Surface *surface, 
extern DECLSPEC int SDLCALL SDL_SetPalette(SDL_Surface *surface, int flags,
extern DECLSPEC Uint32 SDLCALL SDL_MapRGB
extern DECLSPEC Uint32 SDLCALL SDL_MapRGBA
extern DECLSPEC void SDLCALL SDL_GetRGB(Uint32 pixel,
extern DECLSPEC void SDLCALL SDL_GetRGBA(Uint32 pixel,
extern DECLSPEC SDL_Surface * SDLCALL SDL_CreateRGBSurface
extern DECLSPEC SDL_Surface * SDLCALL SDL_CreateRGBSurfaceFrom(void *pixels,
extern DECLSPEC void SDLCALL SDL_FreeSurface(SDL_Surface *surface);
extern DECLSPEC int SDLCALL SDL_LockSurface(SDL_Surface *surface);
extern DECLSPEC void SDLCALL SDL_UnlockSurface(SDL_Surface *surface);
extern DECLSPEC SDL_Surface * SDLCALL SDL_LoadBMP_RW(SDL_RWops *src, int freesrc);
extern DECLSPEC int SDLCALL SDL_SaveBMP_RW
extern DECLSPEC int SDLCALL SDL_SetColorKey
extern DECLSPEC int SDLCALL SDL_SetAlpha(SDL_Surface *surface, Uint32 flag, Uint8 alpha);
extern DECLSPEC SDL_bool SDLCALL SDL_SetClipRect(SDL_Surface *surface, const SDL_Rect *rect);
extern DECLSPEC void SDLCALL SDL_GetClipRect(SDL_Surface *surface, SDL_Rect *rect);
extern DECLSPEC SDL_Surface * SDLCALL SDL_ConvertSurface
extern DECLSPEC int SDLCALL SDL_UpperBlit
extern DECLSPEC int SDLCALL SDL_LowerBlit
extern DECLSPEC int SDLCALL SDL_FillRect
extern DECLSPEC SDL_Surface * SDLCALL SDL_DisplayFormat(SDL_Surface *surface);
extern DECLSPEC SDL_Surface * SDLCALL SDL_DisplayFormatAlpha(SDL_Surface *surface);
extern DECLSPEC SDL_Overlay * SDLCALL SDL_CreateYUVOverlay(int width, int height,
extern DECLSPEC int SDLCALL SDL_LockYUVOverlay(SDL_Overlay *overlay);
extern DECLSPEC void SDLCALL SDL_UnlockYUVOverlay(SDL_Overlay *overlay);
extern DECLSPEC int SDLCALL SDL_DisplayYUVOverlay(SDL_Overlay *overlay, SDL_Rect *dstrect);
extern DECLSPEC void SDLCALL SDL_FreeYUVOverlay(SDL_Overlay *overlay);
extern DECLSPEC int SDLCALL SDL_GL_LoadLibrary(const char *path);
extern DECLSPEC void * SDLCALL SDL_GL_GetProcAddress(const char* proc);
extern DECLSPEC int SDLCALL SDL_GL_SetAttribute(SDL_GLattr attr, int value);
extern DECLSPEC int SDLCALL SDL_GL_GetAttribute(SDL_GLattr attr, int* value);
extern DECLSPEC void SDLCALL SDL_GL_SwapBuffers(void);
extern DECLSPEC void SDLCALL SDL_GL_UpdateRects(int numrects, SDL_Rect* rects);
extern DECLSPEC void SDLCALL SDL_GL_Lock(void);
extern DECLSPEC void SDLCALL SDL_GL_Unlock(void);
extern DECLSPEC void SDLCALL SDL_WM_SetCaption(const char *title, const char *icon);
extern DECLSPEC void SDLCALL SDL_WM_GetCaption(char **title, char **icon);
extern DECLSPEC void SDLCALL SDL_WM_SetIcon(SDL_Surface *icon, Uint8 *mask);
extern DECLSPEC int SDLCALL SDL_WM_IconifyWindow(void);
extern DECLSPEC int SDLCALL SDL_WM_ToggleFullScreen(SDL_Surface *surface);
extern DECLSPEC SDL_GrabMode SDLCALL SDL_WM_GrabInput(SDL_GrabMode mode);
extern DECLSPEC int SDLCALL SDL_SoftStretch(SDL_Surface *src, SDL_Rect *srcrect,
extern "C" {
extern DECLSPEC int SDLCALL SDL_AudioInit(const char *driver_name);
extern DECLSPEC void SDLCALL SDL_AudioQuit(void);
extern DECLSPEC char * SDLCALL SDL_AudioDriverName(char *namebuf, int maxlen);
extern DECLSPEC int SDLCALL SDL_OpenAudio(SDL_AudioSpec *desired, SDL_AudioSpec *obtained);
extern DECLSPEC SDL_audiostatus SDLCALL SDL_GetAudioStatus(void);
extern DECLSPEC void SDLCALL SDL_PauseAudio(int pause_on);
extern DECLSPEC SDL_AudioSpec * SDLCALL SDL_LoadWAV_RW(SDL_RWops *src, int freesrc, SDL_AudioSpec *spec, Uint8 **audio_buf, Uint32 *audio_len);
extern DECLSPEC void SDLCALL SDL_FreeWAV(Uint8 *audio_buf);
extern DECLSPEC int SDLCALL SDL_BuildAudioCVT(SDL_AudioCVT *cvt,
extern DECLSPEC int SDLCALL SDL_ConvertAudio(SDL_AudioCVT *cvt);
extern DECLSPEC void SDLCALL SDL_MixAudio(Uint8 *dst, const Uint8 *src, Uint32 len, int volume);
extern DECLSPEC void SDLCALL SDL_LockAudio(void);
extern DECLSPEC void SDLCALL SDL_UnlockAudio(void);
extern DECLSPEC void SDLCALL SDL_CloseAudio(void);
extern "C" {
extern DECLSPEC SDL_bool SDLCALL SDL_HasRDTSC(void);
extern DECLSPEC SDL_bool SDLCALL SDL_HasMMX(void);
extern DECLSPEC SDL_bool SDLCALL SDL_HasMMXExt(void);
extern DECLSPEC SDL_bool SDLCALL SDL_Has3DNow(void);
extern DECLSPEC SDL_bool SDLCALL SDL_Has3DNowExt(void);
extern DECLSPEC SDL_bool SDLCALL SDL_HasSSE(void);
extern DECLSPEC SDL_bool SDLCALL SDL_HasSSE2(void);
extern DECLSPEC SDL_bool SDLCALL SDL_HasAltiVec(void);
extern "C" {
extern DECLSPEC SDL_RWops * SDLCALL SDL_RWFromFile(const char *file, const char *mode);
extern DECLSPEC SDL_RWops * SDLCALL SDL_RWFromFP(FILE *fp, int autoclose);
extern DECLSPEC SDL_RWops * SDLCALL SDL_RWFromMem(void *mem, int size);
extern DECLSPEC SDL_RWops * SDLCALL SDL_RWFromConstMem(const void *mem, int size);
extern DECLSPEC SDL_RWops * SDLCALL SDL_AllocRW(void);
extern DECLSPEC void SDLCALL SDL_FreeRW(SDL_RWops *area);
extern DECLSPEC Uint16 SDLCALL SDL_ReadLE16(SDL_RWops *src);
extern DECLSPEC Uint16 SDLCALL SDL_ReadBE16(SDL_RWops *src);
extern DECLSPEC Uint32 SDLCALL SDL_ReadLE32(SDL_RWops *src);
extern DECLSPEC Uint32 SDLCALL SDL_ReadBE32(SDL_RWops *src);
extern DECLSPEC Uint64 SDLCALL SDL_ReadLE64(SDL_RWops *src);
extern DECLSPEC Uint64 SDLCALL SDL_ReadBE64(SDL_RWops *src);
extern DECLSPEC int SDLCALL SDL_WriteLE16(SDL_RWops *dst, Uint16 value);
extern DECLSPEC int SDLCALL SDL_WriteBE16(SDL_RWops *dst, Uint16 value);
extern DECLSPEC int SDLCALL SDL_WriteLE32(SDL_RWops *dst, Uint32 value);
extern DECLSPEC int SDLCALL SDL_WriteBE32(SDL_RWops *dst, Uint32 value);
extern DECLSPEC int SDLCALL SDL_WriteLE64(SDL_RWops *dst, Uint64 value);
extern DECLSPEC int SDLCALL SDL_WriteBE64(SDL_RWops *dst, Uint64 value);
extern "C" {
extern DECLSPEC SDL_Thread * SDLCALL SDL_CreateThread(int (SDLCALL *fn)(void *), void *data, pfnSDL_CurrentBeginThread pfnBeginThread, pfnSDL_CurrentEndThread pfnEndThread);
extern DECLSPEC SDL_Thread * SDLCALL SDL_CreateThread(int (SDLCALL *fn)(void *), void *data);
extern DECLSPEC Uint32 SDLCALL SDL_ThreadID(void);
extern DECLSPEC Uint32 SDLCALL SDL_GetThreadID(SDL_Thread *thread);
extern DECLSPEC void SDLCALL SDL_WaitThread(SDL_Thread *thread, int *status);
extern DECLSPEC void SDLCALL SDL_KillThread(SDL_Thread *thread);
extern "C" {
extern DECLSPEC int SDLCALL SDL_EnableUNICODE(int enable);
extern DECLSPEC int SDLCALL SDL_EnableKeyRepeat(int delay, int interval);
extern DECLSPEC void SDLCALL SDL_GetKeyRepeat(int *delay, int *interval);
extern DECLSPEC Uint8 * SDLCALL SDL_GetKeyState(int *numkeys);
extern DECLSPEC SDLMod SDLCALL SDL_GetModState(void);
extern DECLSPEC void SDLCALL SDL_SetModState(SDLMod modstate);
extern DECLSPEC char * SDLCALL SDL_GetKeyName(SDLKey key);
extern "C" {
extern "C" {
extern DECLSPEC void * SDLCALL SDL_malloc(size_t size);
extern DECLSPEC void * SDLCALL SDL_calloc(size_t nmemb, size_t size);
extern DECLSPEC void * SDLCALL SDL_realloc(void *mem, size_t size);
extern DECLSPEC void SDLCALL SDL_free(void *mem);
extern DECLSPEC char * SDLCALL SDL_getenv(const char *name);
extern DECLSPEC int SDLCALL SDL_putenv(const char *variable);
extern DECLSPEC void SDLCALL SDL_qsort(void *base, size_t nmemb, size_t size,
extern DECLSPEC void * SDLCALL SDL_memset(void *dst, int c, size_t len);
extern DECLSPEC void * SDLCALL SDL_memcpy(void *dst, const void *src, size_t len);
extern DECLSPEC void * SDLCALL SDL_revcpy(void *dst, const void *src, size_t len);
extern DECLSPEC int SDLCALL SDL_memcmp(const void *s1, const void *s2, size_t len);
extern DECLSPEC size_t SDLCALL SDL_strlen(const char *string);
extern DECLSPEC size_t SDLCALL SDL_strlcpy(char *dst, const char *src, size_t maxlen);
extern DECLSPEC size_t SDLCALL SDL_strlcat(char *dst, const char *src, size_t maxlen);
extern DECLSPEC char * SDLCALL SDL_strdup(const char *string);
extern DECLSPEC char * SDLCALL SDL_strrev(char *string);
extern DECLSPEC char * SDLCALL SDL_strupr(char *string);
extern DECLSPEC char * SDLCALL SDL_strlwr(char *string);
extern DECLSPEC char * SDLCALL SDL_strchr(const char *string, int c);
extern DECLSPEC char * SDLCALL SDL_strrchr(const char *string, int c);
extern DECLSPEC char * SDLCALL SDL_strstr(const char *haystack, const char *needle);
extern DECLSPEC char * SDLCALL SDL_ltoa(long value, char *string, int radix);
extern DECLSPEC char * SDLCALL SDL_ultoa(unsigned long value, char *string, int radix);
extern DECLSPEC long SDLCALL SDL_strtol(const char *string, char **endp, int base);
extern DECLSPEC unsigned long SDLCALL SDL_strtoul(const char *string, char **endp, int base);
extern DECLSPEC char* SDLCALL SDL_lltoa(Sint64 value, char *string, int radix);
extern DECLSPEC char* SDLCALL SDL_ulltoa(Uint64 value, char *string, int radix);
extern DECLSPEC Sint64 SDLCALL SDL_strtoll(const char *string, char **endp, int base);
extern DECLSPEC Uint64 SDLCALL SDL_strtoull(const char *string, char **endp, int base);
extern DECLSPEC double SDLCALL SDL_strtod(const char *string, char **endp);
extern DECLSPEC int SDLCALL SDL_strcmp(const char *str1, const char *str2);
extern DECLSPEC int SDLCALL SDL_strncmp(const char *str1, const char *str2, size_t maxlen);
extern DECLSPEC int SDLCALL SDL_strcasecmp(const char *str1, const char *str2);
extern DECLSPEC int SDLCALL SDL_strncasecmp(const char *str1, const char *str2, size_t maxlen);
extern DECLSPEC int SDLCALL SDL_sscanf(const char *text, const char *fmt, ...);
extern DECLSPEC int SDLCALL SDL_snprintf(char *text, size_t maxlen, const char *fmt, ...);
extern DECLSPEC int SDLCALL SDL_vsnprintf(char *text, size_t maxlen, const char *fmt, va_list ap);
extern DECLSPEC SDL_iconv_t SDLCALL SDL_iconv_open(const char *tocode, const char *fromcode);
extern DECLSPEC int SDLCALL SDL_iconv_close(SDL_iconv_t cd);
extern DECLSPEC size_t SDLCALL SDL_iconv(SDL_iconv_t cd, const char **inbuf, size_t *inbytesleft, char **outbuf, size_t *outbytesleft);
extern DECLSPEC char * SDLCALL SDL_iconv_string(const char *tocode, const char *fromcode, const char *inbuf, size_t inbytesleft);
extern "C" {
extern DECLSPEC int SDLCALL SDL_NumJoysticks(void);
extern DECLSPEC const char * SDLCALL SDL_JoystickName(int device_index);
extern DECLSPEC SDL_Joystick * SDLCALL SDL_JoystickOpen(int device_index);
extern DECLSPEC int SDLCALL SDL_JoystickOpened(int device_index);
extern DECLSPEC int SDLCALL SDL_JoystickIndex(SDL_Joystick *joystick);
extern DECLSPEC int SDLCALL SDL_JoystickNumAxes(SDL_Joystick *joystick);
extern DECLSPEC int SDLCALL SDL_JoystickNumBalls(SDL_Joystick *joystick);
extern DECLSPEC int SDLCALL SDL_JoystickNumHats(SDL_Joystick *joystick);
extern DECLSPEC int SDLCALL SDL_JoystickNumButtons(SDL_Joystick *joystick);
extern DECLSPEC void SDLCALL SDL_JoystickUpdate(void);
extern DECLSPEC int SDLCALL SDL_JoystickEventState(int state);
extern DECLSPEC Sint16 SDLCALL SDL_JoystickGetAxis(SDL_Joystick *joystick, int axis);
extern DECLSPEC Uint8 SDLCALL SDL_JoystickGetHat(SDL_Joystick *joystick, int hat);
extern DECLSPEC int SDLCALL SDL_JoystickGetBall(SDL_Joystick *joystick, int ball, int *dx, int *dy);
extern DECLSPEC Uint8 SDLCALL SDL_JoystickGetButton(SDL_Joystick *joystick, int button);
extern DECLSPEC void SDLCALL SDL_JoystickClose(SDL_Joystick *joystick);
extern "C" {
extern DECLSPEC const SDL_version * SDLCALL SDL_Linked_Version(void);
extern "C" {
extern DECLSPEC void SDLCALL SDL_PumpEvents(void);
extern DECLSPEC int SDLCALL SDL_PeepEvents(SDL_Event *events, int numevents,
extern DECLSPEC int SDLCALL SDL_PollEvent(SDL_Event *event);
extern DECLSPEC int SDLCALL SDL_WaitEvent(SDL_Event *event);
extern DECLSPEC int SDLCALL SDL_PushEvent(SDL_Event *event);
extern DECLSPEC void SDLCALL SDL_SetEventFilter(SDL_EventFilter filter);
extern DECLSPEC SDL_EventFilter SDLCALL SDL_GetEventFilter(void);
extern DECLSPEC Uint8 SDLCALL SDL_EventState(Uint8 type, int state);
extern "C" {
extern DECLSPEC int SDLCALL SDL_CDNumDrives(void);
extern DECLSPEC const char * SDLCALL SDL_CDName(int drive);
extern DECLSPEC SDL_CD * SDLCALL SDL_CDOpen(int drive);
extern DECLSPEC CDstatus SDLCALL SDL_CDStatus(SDL_CD *cdrom);
extern DECLSPEC int SDLCALL SDL_CDPlayTracks(SDL_CD *cdrom,
extern DECLSPEC int SDLCALL SDL_CDPlay(SDL_CD *cdrom, int start, int length);
extern DECLSPEC int SDLCALL SDL_CDPause(SDL_CD *cdrom);
extern DECLSPEC int SDLCALL SDL_CDResume(SDL_CD *cdrom);
extern DECLSPEC int SDLCALL SDL_CDStop(SDL_CD *cdrom);
extern DECLSPEC int SDLCALL SDL_CDEject(SDL_CD *cdrom);
extern DECLSPEC void SDLCALL SDL_CDClose(SDL_CD *cdrom);
extern "C" {
extern DECLSPEC const SDL_version * SDLCALL TTF_Linked_Version(void);
extern DECLSPEC void SDLCALL TTF_ByteSwappedUNICODE(int swapped);
extern DECLSPEC int SDLCALL TTF_Init(void);
extern DECLSPEC TTF_Font * SDLCALL TTF_OpenFont(const char *file, int ptsize);
extern DECLSPEC TTF_Font * SDLCALL TTF_OpenFontIndex(const char *file, int ptsize, long index);
extern DECLSPEC TTF_Font * SDLCALL TTF_OpenFontRW(SDL_RWops *src, int freesrc, int ptsize);
extern DECLSPEC TTF_Font * SDLCALL TTF_OpenFontIndexRW(SDL_RWops *src, int freesrc, int ptsize, long index);
extern DECLSPEC int SDLCALL TTF_GetFontStyle(const TTF_Font *font);
extern DECLSPEC void SDLCALL TTF_SetFontStyle(TTF_Font *font, int style);
extern DECLSPEC int SDLCALL TTF_GetFontOutline(const TTF_Font *font);
extern DECLSPEC void SDLCALL TTF_SetFontOutline(TTF_Font *font, int outline);
extern DECLSPEC int SDLCALL TTF_GetFontHinting(const TTF_Font *font);
extern DECLSPEC void SDLCALL TTF_SetFontHinting(TTF_Font *font, int hinting);
extern DECLSPEC int SDLCALL TTF_FontHeight(const TTF_Font *font);
extern DECLSPEC int SDLCALL TTF_FontAscent(const TTF_Font *font);
extern DECLSPEC int SDLCALL TTF_FontDescent(const TTF_Font *font);
extern DECLSPEC int SDLCALL TTF_FontLineSkip(const TTF_Font *font);
extern DECLSPEC int SDLCALL TTF_GetFontKerning(const TTF_Font *font);
extern DECLSPEC void SDLCALL TTF_SetFontKerning(TTF_Font *font, int allowed);
extern DECLSPEC long SDLCALL TTF_FontFaces(const TTF_Font *font);
extern DECLSPEC int SDLCALL TTF_FontFaceIsFixedWidth(const TTF_Font *font);
extern DECLSPEC char * SDLCALL TTF_FontFaceFamilyName(const TTF_Font *font);
extern DECLSPEC char * SDLCALL TTF_FontFaceStyleName(const TTF_Font *font);
extern DECLSPEC int SDLCALL TTF_GlyphIsProvided(const TTF_Font *font, Uint16 ch);
extern DECLSPEC int SDLCALL TTF_GlyphMetrics(TTF_Font *font, Uint16 ch,
extern DECLSPEC int SDLCALL TTF_SizeText(TTF_Font *font, const char *text, int *w, int *h);
extern DECLSPEC int SDLCALL TTF_SizeUTF8(TTF_Font *font, const char *text, int *w, int *h);
extern DECLSPEC int SDLCALL TTF_SizeUNICODE(TTF_Font *font, const Uint16 *text, int *w, int *h);
extern DECLSPEC SDL_Surface * SDLCALL TTF_RenderText_Solid(TTF_Font *font,
extern DECLSPEC SDL_Surface * SDLCALL TTF_RenderUTF8_Solid(TTF_Font *font,
extern DECLSPEC SDL_Surface * SDLCALL TTF_RenderUNICODE_Solid(TTF_Font *font,
extern DECLSPEC SDL_Surface * SDLCALL TTF_RenderGlyph_Solid(TTF_Font *font,
extern DECLSPEC SDL_Surface * SDLCALL TTF_RenderText_Shaded(TTF_Font *font,
extern DECLSPEC SDL_Surface * SDLCALL TTF_RenderUTF8_Shaded(TTF_Font *font,
extern DECLSPEC SDL_Surface * SDLCALL TTF_RenderUNICODE_Shaded(TTF_Font *font,
extern DECLSPEC SDL_Surface * SDLCALL TTF_RenderGlyph_Shaded(TTF_Font *font,
extern DECLSPEC SDL_Surface * SDLCALL TTF_RenderText_Blended(TTF_Font *font,
extern DECLSPEC SDL_Surface * SDLCALL TTF_RenderUTF8_Blended(TTF_Font *font,
extern DECLSPEC SDL_Surface * SDLCALL TTF_RenderUNICODE_Blended(TTF_Font *font,
extern DECLSPEC SDL_Surface * SDLCALL TTF_RenderGlyph_Blended(TTF_Font *font,
extern DECLSPEC void SDLCALL TTF_CloseFont(TTF_Font *font);
extern DECLSPEC void SDLCALL TTF_Quit(void);
extern DECLSPEC int SDLCALL TTF_WasInit(void);
extern DECLSPEC int TTF_GetFontKerningSize(TTF_Font *font, int prev_index, int index);
extern C_LINKAGE int SDL_main(int argc, char *argv[]);
extern "C" {
extern DECLSPEC void SDLCALL SDL_SetModuleHandle(void *hInst);
extern DECLSPEC int SDLCALL SDL_RegisterApp(char *name, Uint32 style, void *hInst);
extern DECLSPEC void SDLCALL SDL_UnregisterApp(void);
extern "C" {
extern DECLSPEC void SDLCALL SDL_InitQuickDraw(struct QDGlobals *the_qd);
extern "C" {
extern DECLSPEC void SDLCALL SDL_SetError(const char *fmt, ...);
extern DECLSPEC char * SDLCALL SDL_GetError(void);
extern DECLSPEC void SDLCALL SDL_ClearError(void);
extern DECLSPEC void SDLCALL SDL_Error(SDL_errorcode code);
extern "C" {
extern DECLSPEC int SDLCALL SDL_Init(Uint32 flags);
extern DECLSPEC int SDLCALL SDL_InitSubSystem(Uint32 flags);
extern DECLSPEC void SDLCALL SDL_QuitSubSystem(Uint32 flags);
extern DECLSPEC Uint32 SDLCALL SDL_WasInit(Uint32 flags);
extern DECLSPEC void SDLCALL SDL_Quit(void);
extern "C" {
extern DECLSPEC int SDLCALL SDL_GetWMInfo(SDL_SysWMinfo *info);
extern "C" {
extern DECLSPEC Uint32 SDLCALL SDL_GetTicks(void);
extern DECLSPEC void SDLCALL SDL_Delay(Uint32 ms);
extern DECLSPEC int SDLCALL SDL_SetTimer(Uint32 interval, SDL_TimerCallback callback);
extern DECLSPEC SDL_TimerID SDLCALL SDL_AddTimer(Uint32 interval, SDL_NewTimerCallback callback, void *param);
extern DECLSPEC SDL_bool SDLCALL SDL_RemoveTimer(SDL_TimerID t);
extern "C" {
extern DECLSPEC Uint8 SDLCALL SDL_GetAppState(void);
extern char *nl_langinfo (nl_item __item) __THROW;
extern char *nl_langinfo_l (nl_item __item, __locale_t __l);
extern void setsgent (void);
extern void endsgent (void);
extern struct sgrp *getsgent (void);
extern struct sgrp *getsgnam (const char *__name);
extern struct sgrp *sgetsgent (const char *__string);
extern struct sgrp *fgetsgent (FILE *__stream);
extern int putsgent (const struct sgrp *__g, FILE *__stream);
extern int getsgent_r (struct sgrp *__result_buf, char *__buffer,
extern int getsgnam_r (const char *__name, struct sgrp *__result_buf,
extern int sgetsgent_r (const char *__string, struct sgrp *__result_buf,
extern int fgetsgent_r (FILE *__stream, struct sgrp *__result_buf,
extern "C" {
extern TSAPI int (*ts_error_fn)(const char *fmt, va_list ap);
extern void *dlopen (const char *__file, int __mode) __THROWNL;
extern int dlclose (void *__handle) __THROWNL __nonnull ((1));
extern void *dlsym (void *__restrict __handle,
extern void *dlmopen (Lmid_t __nsid, const char *__file, int __mode) __THROWNL;
extern void *dlvsym (void *__restrict __handle,
extern char *dlerror (void) __THROW;
extern int dladdr (const void *__address, Dl_info *__info)
extern int dladdr1 (const void *__address, Dl_info *__info,
extern int dlinfo (void *__restrict __handle,
extern "C" {
extern error_t argp_parse (const struct argp *__restrict __argp,
extern error_t __argp_parse (const struct argp *__restrict __argp,
extern const char *argp_program_version;
extern void (*argp_program_version_hook) (FILE *__restrict __stream,
extern const char *argp_program_bug_address;
extern error_t argp_err_exit_status;
extern void argp_help (const struct argp *__restrict __argp,
extern void __argp_help (const struct argp *__restrict __argp,
extern void argp_state_help (const struct argp_state *__restrict __state,
extern void __argp_state_help (const struct argp_state *__restrict __state,
extern void argp_usage (const struct argp_state *__state);
extern void __argp_usage (const struct argp_state *__state);
extern void argp_error (const struct argp_state *__restrict __state,
extern void __argp_error (const struct argp_state *__restrict __state,
extern void argp_failure (const struct argp_state *__restrict __state,
extern void __argp_failure (const struct argp_state *__restrict __state,
extern int _option_is_short (const struct argp_option *__opt) __THROW;
extern int __option_is_short (const struct argp_option *__opt) __THROW;
extern int _option_is_end (const struct argp_option *__opt) __THROW;
extern int __option_is_end (const struct argp_option *__opt) __THROW;
extern void *_argp_input (const struct argp *__restrict __argp,
extern void *__argp_input (const struct argp *__restrict __argp,
extern "C" {
extern PNG_EXPORT(png_uint_32,png_access_version_number) PNGARG((void));
extern PNG_EXPORT(void,png_set_sig_bytes) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(int,png_sig_cmp) PNGARG((png_bytep sig, png_size_t start,
extern PNG_EXPORT(int,png_check_sig) PNGARG((png_bytep sig, int num)) PNG_DEPRECATED;
extern PNG_EXPORT(png_structp,png_create_read_struct)
extern PNG_EXPORT(png_structp,png_create_write_struct)
extern PNG_EXPORT(png_uint_32,png_get_compression_buffer_size)
extern PNG_EXPORT(void,png_set_compression_buffer_size)
extern PNG_EXPORT(int,png_reset_zstream) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(png_structp,png_create_read_struct_2)
extern PNG_EXPORT(png_structp,png_create_write_struct_2)
extern PNG_EXPORT(void,png_write_chunk) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_write_chunk_start) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_write_chunk_data) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_write_chunk_end) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(png_infop,png_create_info_struct)
extern PNG_EXPORT(void,png_info_init) PNGARG((png_infop info_ptr))
extern PNG_EXPORT(void,png_info_init_3) PNGARG((png_infopp info_ptr,
extern PNG_EXPORT(void,png_write_info_before_PLTE) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_write_info) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_read_info) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_charp,png_convert_to_rfc1123)
extern PNG_EXPORT(void,png_convert_from_struct_tm) PNGARG((png_timep ptime,
extern PNG_EXPORT(void,png_convert_from_time_t) PNGARG((png_timep ptime,
extern PNG_EXPORT(void,png_set_expand) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_expand_gray_1_2_4_to_8) PNGARG((png_structp
extern PNG_EXPORT(void,png_set_palette_to_rgb) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_tRNS_to_alpha) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_gray_1_2_4_to_8) PNGARG((png_structp
extern PNG_EXPORT(void,png_set_bgr) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_gray_to_rgb) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_rgb_to_gray) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_rgb_to_gray_fixed) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_byte,png_get_rgb_to_gray_status) PNGARG((png_structp
extern PNG_EXPORT(void,png_build_grayscale_palette) PNGARG((int bit_depth,
extern PNG_EXPORT(void,png_set_strip_alpha) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_swap_alpha) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_invert_alpha) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_filler) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_add_alpha) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_swap) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_packing) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_packswap) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_shift) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(int,png_set_interlace_handling) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_invert_mono) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_background) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_strip_16) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_dither) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_gamma) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_permit_empty_plte) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_flush) PNGARG((png_structp png_ptr, int nrows));
extern PNG_EXPORT(void,png_write_flush) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_start_read_image) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_read_update_info) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_read_rows) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_read_row) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_read_image) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_write_row) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_write_rows) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_write_image) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_write_end) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_read_end) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_destroy_info_struct) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_destroy_read_struct) PNGARG((png_structpp
extern PNG_EXPORT(void,png_read_destroy) PNGARG((png_structp png_ptr, png_infop info_ptr,
extern PNG_EXPORT(void,png_destroy_write_struct)
extern PNG_EXPORT(void,png_write_destroy) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_crc_action) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_filter) PNGARG((png_structp png_ptr, int method,
extern PNG_EXPORT(void,png_set_filter_heuristics) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_compression_level) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_compression_mem_level)
extern PNG_EXPORT(void,png_set_compression_strategy)
extern PNG_EXPORT(void,png_set_compression_window_bits)
extern PNG_EXPORT(void,png_set_compression_method) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_init_io) PNGARG((png_structp png_ptr, png_FILE_p fp));
extern PNG_EXPORT(void,png_set_error_fn) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_voidp,png_get_error_ptr) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_write_fn) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_read_fn) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_voidp,png_get_io_ptr) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_read_status_fn) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_write_status_fn) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_mem_fn) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_voidp,png_get_mem_ptr) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_read_user_transform_fn) PNGARG((png_structp
extern PNG_EXPORT(void,png_set_write_user_transform_fn) PNGARG((png_structp
extern PNG_EXPORT(void,png_set_user_transform_info) PNGARG((png_structp
extern PNG_EXPORT(png_voidp,png_get_user_transform_ptr)
extern PNG_EXPORT(void,png_set_read_user_chunk_fn) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_voidp,png_get_user_chunk_ptr) PNGARG((png_structp
extern PNG_EXPORT(void,png_set_progressive_read_fn) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_voidp,png_get_progressive_ptr)
extern PNG_EXPORT(void,png_process_data) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_progressive_combine_row) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_voidp,png_malloc) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_voidp,png_malloc_warn) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_free) PNGARG((png_structp png_ptr, png_voidp ptr));
extern PNG_EXPORT(voidpf,png_zalloc) PNGARG((voidpf png_ptr, uInt items,
extern PNG_EXPORT(void,png_zfree) PNGARG((voidpf png_ptr, voidpf ptr));
extern PNG_EXPORT(void,png_free_data) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_data_freer) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_voidp,png_malloc_default) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_free_default) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_voidp,png_memcpy_check) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_voidp,png_memset_check) PNGARG((png_structp png_ptr,
extern void *png_far_to_near PNGARG((png_structp png_ptr,png_voidp ptr,
extern PNG_EXPORT(void,png_error) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_chunk_error) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_err) PNGARG((png_structp png_ptr)) PNG_NORETURN;
extern PNG_EXPORT(void,png_warning) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_chunk_warning) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_valid) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_rowbytes) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_bytepp,png_get_rows) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_rows) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_byte,png_get_channels) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32, png_get_image_width) PNGARG((png_structp
extern PNG_EXPORT(png_uint_32, png_get_image_height) PNGARG((png_structp
extern PNG_EXPORT(png_byte, png_get_bit_depth) PNGARG((png_structp
extern PNG_EXPORT(png_byte, png_get_color_type) PNGARG((png_structp
extern PNG_EXPORT(png_byte, png_get_filter_type) PNGARG((png_structp
extern PNG_EXPORT(png_byte, png_get_interlace_type) PNGARG((png_structp
extern PNG_EXPORT(png_byte, png_get_compression_type) PNGARG((png_structp
extern PNG_EXPORT(png_uint_32, png_get_pixels_per_meter) PNGARG((png_structp
extern PNG_EXPORT(png_uint_32, png_get_x_pixels_per_meter) PNGARG((png_structp
extern PNG_EXPORT(png_uint_32, png_get_y_pixels_per_meter) PNGARG((png_structp
extern PNG_EXPORT(float, png_get_pixel_aspect_ratio) PNGARG((png_structp
extern PNG_EXPORT(png_int_32, png_get_x_offset_pixels) PNGARG((png_structp
extern PNG_EXPORT(png_int_32, png_get_y_offset_pixels) PNGARG((png_structp
extern PNG_EXPORT(png_int_32, png_get_x_offset_microns) PNGARG((png_structp
extern PNG_EXPORT(png_int_32, png_get_y_offset_microns) PNGARG((png_structp
extern PNG_EXPORT(png_bytep,png_get_signature) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_bKGD) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_bKGD) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_cHRM) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_cHRM_fixed) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_cHRM) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_cHRM_fixed) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_gAMA) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_gAMA_fixed) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_gAMA) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_gAMA_fixed) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_hIST) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_hIST) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_IHDR) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_IHDR) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_oFFs) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_oFFs) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_pCAL) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_pCAL) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_pHYs) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_pHYs) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_PLTE) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_PLTE) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_sBIT) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_sBIT) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_sRGB) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_sRGB) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_sRGB_gAMA_and_cHRM) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_iCCP) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_iCCP) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_sPLT) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_sPLT) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_text) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_text) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_tIME) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_tIME) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_tRNS) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_tRNS) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_sCAL) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_sCAL_s) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_sCAL) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_sCAL_s) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void, png_set_keep_unknown_chunks) PNGARG((png_structp
extern PNG_EXPORT(void, png_set_unknown_chunks) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void, png_set_unknown_chunk_location)
extern PNG_EXPORT(png_uint_32,png_get_unknown_chunks) PNGARG((png_structp
extern PNG_EXPORT(void, png_set_invalid) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void, png_read_png) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void, png_write_png) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_charp,png_get_copyright) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(png_charp,png_get_header_ver) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(png_charp,png_get_header_version) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(png_charp,png_get_libpng_ver) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(png_uint_32,png_permit_mng_features) PNGARG((png_structp
extern PNG_EXPORT(png_uint_32,png_get_mmx_flagmask)
extern PNG_EXPORT(png_uint_32,png_get_asm_flagmask)
extern PNG_EXPORT(png_uint_32,png_get_asm_flags)
extern PNG_EXPORT(png_byte,png_get_mmx_bitdepth_threshold)
extern PNG_EXPORT(png_uint_32,png_get_mmx_rowbytes_threshold)
extern PNG_EXPORT(void,png_set_asm_flags)
extern PNG_EXPORT(void,png_set_mmx_thresholds)
extern PNG_EXPORT(int,png_mmx_support) PNGARG((void));
extern PNG_EXPORT(void,png_set_strip_error_numbers) PNGARG((png_structp
extern PNG_EXPORT(void,png_set_user_limits) PNGARG((png_structp
extern PNG_EXPORT(png_uint_32,png_get_user_width_max) PNGARG((png_structp
extern PNG_EXPORT(png_uint_32,png_get_user_height_max) PNGARG((png_structp
extern PNG_EXPORT(png_uint_32,png_get_uint_32) PNGARG((png_bytep buf));
extern PNG_EXPORT(png_uint_16,png_get_uint_16) PNGARG((png_bytep buf));
extern PNG_EXPORT(png_int_32,png_get_int_32) PNGARG((png_bytep buf));
extern PNG_EXPORT(png_uint_32,png_get_uint_31)
extern PNG_EXPORT(void,png_save_uint_32)
extern PNG_EXPORT(void,png_save_int_32)
extern PNG_EXPORT(void,png_save_uint_16)
extern PNG_EXPORT(void,png_read_init) PNGARG((png_structp png_ptr))
extern PNG_EXPORT(void,png_read_init_3) PNGARG((png_structpp ptr_ptr,
extern PNG_EXPORT(void,png_read_init_2) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_write_init) PNGARG((png_structp png_ptr))
extern PNG_EXPORT(void,png_write_init_3) PNGARG((png_structpp ptr_ptr,
extern PNG_EXPORT(void,png_write_init_2) PNGARG((png_structp png_ptr,
extern void png_handle_iCCP PNGARG((png_structp png_ptr, png_infop info_ptr,
extern void png_handle_sPLT PNGARG((png_structp png_ptr, png_infop info_ptr,
extern void setutxent (void);
extern void endutxent (void);
extern struct utmpx *getutxent (void);
extern struct utmpx *getutxid (const struct utmpx *__id);
extern struct utmpx *getutxline (const struct utmpx *__line);
extern struct utmpx *pututxline (const struct utmpx *__utmpx);
extern int utmpxname (const char *__file);
extern void updwtmpx (const char *__wtmpx_file,
extern void getutmp (const struct utmpx *__utmpx,
extern void getutmpx (const struct utmp *__utmp, struct utmpx *__utmpx);
extern "C" {
extern int clone (int (*__fn) (void *__arg), void *__child_stack,
extern int unshare (int __flags) __THROW;
extern int sched_getcpu (void) __THROW;
extern int setns (int __fd, int __nstype) __THROW;
extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
extern cpu_set_t *__sched_cpualloc (size_t __count) __THROW __wur;
extern void __sched_cpufree (cpu_set_t *__set) __THROW;
extern double __REDIRECT_NTH (acos, (double), __acos_finite);
extern float __REDIRECT_NTH (acosf, (float), __acosf_finite);
extern long double __REDIRECT_NTH (acosl, (long double), __acos_finite);
extern long double __REDIRECT_NTH (acosl, (long double), __acosl_finite);
extern double __REDIRECT_NTH (acosh, (double), __acosh_finite);
extern float __REDIRECT_NTH (acoshf, (float), __acoshf_finite);
extern long double __REDIRECT_NTH (acoshl, (long double), __acosh_finite);
extern long double __REDIRECT_NTH (acoshl, (long double), __acoshl_finite);
extern double __REDIRECT_NTH (asin, (double), __asin_finite);
extern float __REDIRECT_NTH (asinf, (float), __asinf_finite);
extern long double __REDIRECT_NTH (asinl, (long double), __asin_finite);
extern long double __REDIRECT_NTH (asinl, (long double), __asinl_finite);
extern double __REDIRECT_NTH (atan2, (double, double), __atan2_finite);
extern float __REDIRECT_NTH (atan2f, (float, float), __atan2f_finite);
extern long double __REDIRECT_NTH (atan2l, (long double, long double),
extern long double __REDIRECT_NTH (atan2l, (long double, long double),
extern double __REDIRECT_NTH (atanh, (double), __atanh_finite);
extern float __REDIRECT_NTH (atanhf, (float), __atanhf_finite);
extern long double __REDIRECT_NTH (atanhl, (long double), __atanh_finite);
extern long double __REDIRECT_NTH (atanhl, (long double), __atanhl_finite);
extern double __REDIRECT_NTH (cosh, (double), __cosh_finite);
extern float __REDIRECT_NTH (coshf, (float), __coshf_finite);
extern long double __REDIRECT_NTH (coshl, (long double), __cosh_finite);
extern long double __REDIRECT_NTH (coshl, (long double), __coshl_finite);
extern double __REDIRECT_NTH (exp, (double), __exp_finite);
extern float __REDIRECT_NTH (expf, (float), __expf_finite);
extern long double __REDIRECT_NTH (expl, (long double), __exp_finite);
extern long double __REDIRECT_NTH (expl, (long double), __expl_finite);
extern double __REDIRECT_NTH (exp10, (double), __exp10_finite);
extern float __REDIRECT_NTH (exp10f, (float), __exp10f_finite);
extern long double __REDIRECT_NTH (exp10l, (long double), __exp10_finite);
extern long double __REDIRECT_NTH (exp10l, (long double), __exp10l_finite);
extern double __REDIRECT_NTH (pow10, (double), __exp10_finite);
extern float __REDIRECT_NTH (pow10f, (float), __exp10f_finite);
extern long double __REDIRECT_NTH (pow10l, (long double), __exp10_finite);
extern long double __REDIRECT_NTH (pow10l, (long double), __exp10l_finite);
extern double __REDIRECT_NTH (exp2, (double), __exp2_finite);
extern float __REDIRECT_NTH (exp2f, (float), __exp2f_finite);
extern long double __REDIRECT_NTH (exp2l, (long double), __exp2_finite);
extern long double __REDIRECT_NTH (exp2l, (long double), __exp2l_finite);
extern double __REDIRECT_NTH (fmod, (double, double), __fmod_finite);
extern float __REDIRECT_NTH (fmodf, (float, float), __fmodf_finite);
extern long double __REDIRECT_NTH (fmodl, (long double, long double),
extern long double __REDIRECT_NTH (fmodl, (long double, long double),
extern double __REDIRECT_NTH (hypot, (double, double), __hypot_finite);
extern float __REDIRECT_NTH (hypotf, (float, float), __hypotf_finite);
extern long double __REDIRECT_NTH (hypotl, (long double, long double),
extern long double __REDIRECT_NTH (hypotl, (long double, long double),
extern double __REDIRECT_NTH (j0, (double), __j0_finite);
extern float __REDIRECT_NTH (j0f, (float), __j0f_finite);
extern long double __REDIRECT_NTH (j0l, (long double), __j0_finite);
extern long double __REDIRECT_NTH (j0l, (long double), __j0l_finite);
extern double __REDIRECT_NTH (y0, (double), __y0_finite);
extern float __REDIRECT_NTH (y0f, (float), __y0f_finite);
extern long double __REDIRECT_NTH (y0l, (long double), __y0_finite);
extern long double __REDIRECT_NTH (y0l, (long double), __y0l_finite);
extern double __REDIRECT_NTH (j1, (double), __j1_finite);
extern float __REDIRECT_NTH (j1f, (float), __j1f_finite);
extern long double __REDIRECT_NTH (j1l, (long double), __j1_finite);
extern long double __REDIRECT_NTH (j1l, (long double), __j1l_finite);
extern double __REDIRECT_NTH (y1, (double), __y1_finite);
extern float __REDIRECT_NTH (y1f, (float), __y1f_finite);
extern long double __REDIRECT_NTH (y1l, (long double), __y1_finite);
extern long double __REDIRECT_NTH (y1l, (long double), __y1l_finite);
extern double __REDIRECT_NTH (jn, (int, double), __jn_finite);
extern float __REDIRECT_NTH (jnf, (int, float), __jnf_finite);
extern long double __REDIRECT_NTH (jnl, (int, long double), __jn_finite);
extern long double __REDIRECT_NTH (jnl, (int, long double), __jnl_finite);
extern double __REDIRECT_NTH (yn, (int, double), __yn_finite);
extern float __REDIRECT_NTH (ynf, (int, float), __ynf_finite);
extern long double __REDIRECT_NTH (ynl, (int, long double), __yn_finite);
extern long double __REDIRECT_NTH (ynl, (int, long double), __ynl_finite);
extern double __REDIRECT_NTH (lgamma_r, (double, int *), __lgamma_r_finite);
extern float __REDIRECT_NTH (lgammaf_r, (float, int *), __lgammaf_r_finite);
extern long double __REDIRECT_NTH (lgammal_r, (long double, int *),
extern long double __REDIRECT_NTH (lgammal_r, (long double, int *),
extern double __REDIRECT_NTH (log, (double), __log_finite);
extern float __REDIRECT_NTH (logf, (float), __logf_finite);
extern long double __REDIRECT_NTH (logl, (long double), __log_finite);
extern long double __REDIRECT_NTH (logl, (long double), __logl_finite);
extern double __REDIRECT_NTH (log10, (double), __log10_finite);
extern float __REDIRECT_NTH (log10f, (float), __log10f_finite);
extern long double __REDIRECT_NTH (log10l, (long double), __log10_finite);
extern long double __REDIRECT_NTH (log10l, (long double), __log10l_finite);
extern double __REDIRECT_NTH (log2, (double), __log2_finite);
extern float __REDIRECT_NTH (log2f, (float), __log2f_finite);
extern long double __REDIRECT_NTH (log2l, (long double), __log2_finite);
extern long double __REDIRECT_NTH (log2l, (long double), __log2l_finite);
extern double __REDIRECT_NTH (ldexp, (double, int), scalbn);
extern float __REDIRECT_NTH (ldexpf, (float, int), scalbnf);
extern long double __REDIRECT_NTH (ldexpl, (long double, int), scalbnl);
extern double __REDIRECT_NTH (pow, (double, double), __pow_finite);
extern float __REDIRECT_NTH (powf, (float, float), __powf_finite);
extern long double __REDIRECT_NTH (powl, (long double, long double),
extern long double __REDIRECT_NTH (powl, (long double, long double),
extern double __REDIRECT_NTH (remainder, (double, double), __remainder_finite);
extern float __REDIRECT_NTH (remainderf, (float, float), __remainderf_finite);
extern long double __REDIRECT_NTH (remainderl, (long double, long double),
extern long double __REDIRECT_NTH (remainderl, (long double, long double),
extern double __REDIRECT_NTH (scalb, (double, double), __scalb_finite);
extern float __REDIRECT_NTH (scalbf, (float, float), __scalbf_finite);
extern long double __REDIRECT_NTH (scalbl, (long double, long double),
extern long double __REDIRECT_NTH (scalbl, (long double, long double),
extern double __REDIRECT_NTH (sinh, (double), __sinh_finite);
extern float __REDIRECT_NTH (sinhf, (float), __sinhf_finite);
extern long double __REDIRECT_NTH (sinhl, (long double), __sinh_finite);
extern long double __REDIRECT_NTH (sinhl, (long double), __sinhl_finite);
extern double __REDIRECT_NTH (sqrt, (double), __sqrt_finite);
extern float __REDIRECT_NTH (sqrtf, (float), __sqrtf_finite);
extern long double __REDIRECT_NTH (sqrtl, (long double), __sqrt_finite);
extern long double __REDIRECT_NTH (sqrtl, (long double), __sqrtl_finite);
extern double __gamma_r_finite (double, int *);
extern float __gammaf_r_finite (float, int *);
extern long double __gammal_r_finite (long double, int *);
extern ssize_t __read_chk (int __fd, void *__buf, size_t __nbytes,
extern ssize_t __REDIRECT (__read_alias, (int __fd, void *__buf,
extern ssize_t __REDIRECT (__read_chk_warn,
extern ssize_t __pread_chk (int __fd, void *__buf, size_t __nbytes,
extern ssize_t __pread64_chk (int __fd, void *__buf, size_t __nbytes,
extern ssize_t __REDIRECT (__pread_alias,
extern ssize_t __REDIRECT (__pread64_alias,
extern ssize_t __REDIRECT (__pread_chk_warn,
extern ssize_t __REDIRECT (__pread64_chk_warn,
extern ssize_t __readlink_chk (const char *__restrict __path,
extern ssize_t __REDIRECT_NTH (__readlink_alias,
extern ssize_t __REDIRECT_NTH (__readlink_chk_warn,
extern ssize_t __readlinkat_chk (int __fd, const char *__restrict __path,
extern ssize_t __REDIRECT_NTH (__readlinkat_alias,
extern ssize_t __REDIRECT_NTH (__readlinkat_chk_warn,
extern char *__getcwd_chk (char *__buf, size_t __size, size_t __buflen)
extern char *__REDIRECT_NTH (__getcwd_alias,
extern char *__REDIRECT_NTH (__getcwd_chk_warn,
extern char *__getwd_chk (char *__buf, size_t buflen)
extern char *__REDIRECT_NTH (__getwd_warn, (char *__buf), getwd)
extern size_t __confstr_chk (int __name, char *__buf, size_t __len,
extern size_t __REDIRECT_NTH (__confstr_alias, (int __name, char *__buf,
extern size_t __REDIRECT_NTH (__confstr_chk_warn,
extern int __getgroups_chk (int __size, __gid_t __list[], size_t __listlen)
extern int __REDIRECT_NTH (__getgroups_alias, (int __size, __gid_t __list[]),
extern int __REDIRECT_NTH (__getgroups_chk_warn,
extern int __ttyname_r_chk (int __fd, char *__buf, size_t __buflen,
extern int __REDIRECT_NTH (__ttyname_r_alias, (int __fd, char *__buf,
extern int __REDIRECT_NTH (__ttyname_r_chk_warn,
extern int __getlogin_r_chk (char *__buf, size_t __buflen, size_t __nreal)
extern int __REDIRECT (__getlogin_r_alias, (char *__buf, size_t __buflen),
extern int __REDIRECT (__getlogin_r_chk_warn,
extern int __gethostname_chk (char *__buf, size_t __buflen, size_t __nreal)
extern int __REDIRECT_NTH (__gethostname_alias, (char *__buf, size_t __buflen),
extern int __REDIRECT_NTH (__gethostname_chk_warn,
extern int __getdomainname_chk (char *__buf, size_t __buflen, size_t __nreal)
extern int __REDIRECT_NTH (__getdomainname_alias, (char *__buf,
extern int __REDIRECT_NTH (__getdomainname_chk_warn,
extern mqd_t mq_open (const char *__name, int __oflag, ...)
extern mqd_t __mq_open_2 (const char *__name, int __oflag)
extern mqd_t __REDIRECT_NTH (__mq_open_alias, (const char *__name,
extern void *__rawmemchr (const void *__s, int __c);
extern char *__strsep_g (char **__stringp, const char *__delim);
extern char *__strdup (const char *__string) __THROW __attribute_malloc__;
extern char *__strndup (const char *__string, size_t __n)
extern int prlimit (__pid_t __pid, enum __rlimit_resource __resource,
extern int __REDIRECT_NTH (prlimit, (__pid_t __pid,
extern int prlimit64 (__pid_t __pid, enum __rlimit_resource __resource,
extern int __REDIRECT (__poll_alias, (struct pollfd *__fds, nfds_t __nfds,
extern int __poll_chk (struct pollfd *__fds, nfds_t __nfds, int __timeout,
extern int __REDIRECT (__poll_chk_warn, (struct pollfd *__fds, nfds_t __nfds,
extern int __REDIRECT (__ppoll_alias, (struct pollfd *__fds, nfds_t __nfds,
extern int __ppoll_chk (struct pollfd *__fds, nfds_t __nfds,
extern int __REDIRECT (__ppoll_chk_warn, (struct pollfd *__fds, nfds_t __nfds,
extern void __REDIRECT_NTHNL (longjmp,
extern void __REDIRECT_NTHNL (_longjmp,
extern void __REDIRECT_NTHNL (siglongjmp,
extern void __longjmp_chk (struct __jmp_buf_tag __env[1], int __val),
extern long int __fdelt_chk (long int __d);
extern long int __fdelt_warn (long int __d)
extern int __REDIRECT_NTH (__feraiseexcept_renamed, (int), feraiseexcept);
extern void __REDIRECT (__error_alias, (int __status, int __errnum,
extern void __REDIRECT (__error_noreturn, (int __status, int __errnum,
extern void __REDIRECT (__error_at_line_alias, (int __status, int __errnum,
extern void __REDIRECT (__error_at_line_noreturn, (int __status, int __errnum,
extern int *__errno_location (void) __THROW __attribute__ ((__const__));
extern ssize_t process_vm_readv (pid_t __pid, const struct iovec *__lvec,
extern ssize_t process_vm_writev (pid_t __pid, const struct iovec *__lvec,
extern int __sigismember (const __sigset_t *, int);
extern int __sigaddset (__sigset_t *, int);
extern int __sigdelset (__sigset_t *, int);
extern char *__realpath_chk (const char *__restrict __name,
extern char *__REDIRECT_NTH (__realpath_alias,
extern char *__REDIRECT_NTH (__realpath_chk_warn,
extern int __ptsname_r_chk (int __fd, char *__buf, size_t __buflen,
extern int __REDIRECT_NTH (__ptsname_r_alias, (int __fd, char *__buf,
extern int __REDIRECT_NTH (__ptsname_r_chk_warn,
extern int __wctomb_chk (char *__s, wchar_t __wchar, size_t __buflen)
extern int __REDIRECT_NTH (__wctomb_alias, (char *__s, wchar_t __wchar),
extern size_t __mbstowcs_chk (wchar_t *__restrict __dst,
extern size_t __REDIRECT_NTH (__mbstowcs_alias,
extern size_t __REDIRECT_NTH (__mbstowcs_chk_warn,
extern size_t __wcstombs_chk (char *__restrict __dst,
extern size_t __REDIRECT_NTH (__wcstombs_alias,
extern size_t __REDIRECT_NTH (__wcstombs_chk_warn,
extern Elf32_Addr la_i86_gnu_pltenter (Elf32_Sym *__sym, unsigned int __ndx,
extern unsigned int la_i86_gnu_pltexit (Elf32_Sym *__sym, unsigned int __ndx,
extern Elf64_Addr la_x86_64_gnu_pltenter (Elf64_Sym *__sym,
extern unsigned int la_x86_64_gnu_pltexit (Elf64_Sym *__sym,
extern Elf32_Addr la_x32_gnu_pltenter (Elf32_Sym *__sym,
extern unsigned int la_x32_gnu_pltexit (Elf32_Sym *__sym,
extern ssize_t __recv_chk (int __fd, void *__buf, size_t __n, size_t __buflen,
extern ssize_t __REDIRECT (__recv_alias, (int __fd, void *__buf, size_t __n,
extern ssize_t __REDIRECT (__recv_chk_warn,
extern ssize_t __recvfrom_chk (int __fd, void *__restrict __buf, size_t __n,
extern ssize_t __REDIRECT (__recvfrom_alias,
extern ssize_t __REDIRECT (__recvfrom_chk_warn,
extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
extern int __printf_chk (int __flag, const char *__restrict __format, ...);
extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
extern int __vprintf_chk (int __flag, const char *__restrict __format,
extern int __dprintf_chk (int __fd, int __flag, const char *__restrict __fmt,
extern int __vdprintf_chk (int __fd, int __flag,
extern int __asprintf_chk (char **__restrict __ptr, int __flag,
extern int __vasprintf_chk (char **__restrict __ptr, int __flag,
extern int __obstack_printf_chk (struct obstack *__restrict __obstack,
extern int __obstack_vprintf_chk (struct obstack *__restrict __obstack,
extern char *__gets_chk (char *__str, size_t) __wur;
extern char *__REDIRECT (__gets_warn, (char *__str), gets)
extern char *__fgets_chk (char *__restrict __s, size_t __size, int __n,
extern char *__REDIRECT (__fgets_alias,
extern char *__REDIRECT (__fgets_chk_warn,
extern size_t __fread_chk (void *__restrict __ptr, size_t __ptrlen,
extern size_t __REDIRECT (__fread_alias,
extern size_t __REDIRECT (__fread_chk_warn,
extern char *__fgets_unlocked_chk (char *__restrict __s, size_t __size,
extern char *__REDIRECT (__fgets_unlocked_alias,
extern char *__REDIRECT (__fgets_unlocked_chk_warn,
extern size_t __fread_unlocked_chk (void *__restrict __ptr, size_t __ptrlen,
extern size_t __REDIRECT (__fread_unlocked_alias,
extern size_t __REDIRECT (__fread_unlocked_chk_warn,
extern struct cmsghdr *__cmsg_nxthdr (struct msghdr *__mhdr,
extern void _dl_mcount_wrapper_check (void *__selfpc) __THROW;
extern wchar_t *__wmemcpy_chk (wchar_t *__restrict __s1,
extern wchar_t *__REDIRECT_NTH (__wmemcpy_alias,
extern wchar_t *__REDIRECT_NTH (__wmemcpy_chk_warn,
extern wchar_t *__wmemmove_chk (wchar_t *__s1, const wchar_t *__s2,
extern wchar_t *__REDIRECT_NTH (__wmemmove_alias, (wchar_t *__s1,
extern wchar_t *__REDIRECT_NTH (__wmemmove_chk_warn,
extern wchar_t *__wmempcpy_chk (wchar_t *__restrict __s1,
extern wchar_t *__REDIRECT_NTH (__wmempcpy_alias,
extern wchar_t *__REDIRECT_NTH (__wmempcpy_chk_warn,
extern wchar_t *__wmemset_chk (wchar_t *__s, wchar_t __c, size_t __n,
extern wchar_t *__REDIRECT_NTH (__wmemset_alias, (wchar_t *__s, wchar_t __c,
extern wchar_t *__REDIRECT_NTH (__wmemset_chk_warn,
extern wchar_t *__wcscpy_chk (wchar_t *__restrict __dest,
extern wchar_t *__REDIRECT_NTH (__wcscpy_alias,
extern wchar_t *__wcpcpy_chk (wchar_t *__restrict __dest,
extern wchar_t *__REDIRECT_NTH (__wcpcpy_alias,
extern wchar_t *__wcsncpy_chk (wchar_t *__restrict __dest,
extern wchar_t *__REDIRECT_NTH (__wcsncpy_alias,
extern wchar_t *__REDIRECT_NTH (__wcsncpy_chk_warn,
extern wchar_t *__wcpncpy_chk (wchar_t *__restrict __dest,
extern wchar_t *__REDIRECT_NTH (__wcpncpy_alias,
extern wchar_t *__REDIRECT_NTH (__wcpncpy_chk_warn,
extern wchar_t *__wcscat_chk (wchar_t *__restrict __dest,
extern wchar_t *__REDIRECT_NTH (__wcscat_alias,
extern wchar_t *__wcsncat_chk (wchar_t *__restrict __dest,
extern wchar_t *__REDIRECT_NTH (__wcsncat_alias,
extern int __swprintf_chk (wchar_t *__restrict __s, size_t __n,
extern int __REDIRECT_NTH_LDBL (__swprintf_alias,
extern int __vswprintf_chk (wchar_t *__restrict __s, size_t __n,
extern int __REDIRECT_NTH_LDBL (__vswprintf_alias,
extern int __fwprintf_chk (__FILE *__restrict __stream, int __flag,
extern int __wprintf_chk (int __flag, const wchar_t *__restrict __format,
extern int __vfwprintf_chk (__FILE *__restrict __stream, int __flag,
extern int __vwprintf_chk (int __flag, const wchar_t *__restrict __format,
extern wchar_t *__fgetws_chk (wchar_t *__restrict __s, size_t __size, int __n,
extern wchar_t *__REDIRECT (__fgetws_alias,
extern wchar_t *__REDIRECT (__fgetws_chk_warn,
extern wchar_t *__fgetws_unlocked_chk (wchar_t *__restrict __s, size_t __size,
extern wchar_t *__REDIRECT (__fgetws_unlocked_alias,
extern wchar_t *__REDIRECT (__fgetws_unlocked_chk_warn,
extern size_t __wcrtomb_chk (char *__restrict __s, wchar_t __wchar,
extern size_t __REDIRECT_NTH (__wcrtomb_alias,
extern size_t __mbsrtowcs_chk (wchar_t *__restrict __dst,
extern size_t __REDIRECT_NTH (__mbsrtowcs_alias,
extern size_t __REDIRECT_NTH (__mbsrtowcs_chk_warn,
extern size_t __wcsrtombs_chk (char *__restrict __dst,
extern size_t __REDIRECT_NTH (__wcsrtombs_alias,
extern size_t __REDIRECT_NTH (__wcsrtombs_chk_warn,
extern size_t __mbsnrtowcs_chk (wchar_t *__restrict __dst,
extern size_t __REDIRECT_NTH (__mbsnrtowcs_alias,
extern size_t __REDIRECT_NTH (__mbsnrtowcs_chk_warn,
extern size_t __wcsnrtombs_chk (char *__restrict __dst,
extern size_t __REDIRECT_NTH (__wcsnrtombs_alias,
extern size_t __REDIRECT_NTH (__wcsnrtombs_chk_warn,
extern char *__stpncpy_chk (char *__dest, const char *__src, size_t __n,
extern char *__REDIRECT_NTH (__stpncpy_alias, (char *__dest, const char *__src,
extern int sys_nerr;
extern const char *const sys_errlist[];
extern int _sys_nerr;
extern const char *const _sys_errlist[];
extern int __open_2 (const char *__path, int __oflag) __nonnull ((1));
extern int __REDIRECT (__open_alias, (const char *__path, int __oflag, ...),
extern int __REDIRECT (__open_2, (const char *__path, int __oflag),
extern int __REDIRECT (__open_alias, (const char *__path, int __oflag, ...),
extern int __open64_2 (const char *__path, int __oflag) __nonnull ((1));
extern int __REDIRECT (__open64_alias, (const char *__path, int __oflag,
extern int __openat_2 (int __fd, const char *__path, int __oflag)
extern int __REDIRECT (__openat_alias, (int __fd, const char *__path,
extern int __REDIRECT (__openat_2, (int __fd, const char *__path,
extern int __REDIRECT (__openat_alias, (int __fd, const char *__path,
extern int __openat64_2 (int __fd, const char *__path, int __oflag)
extern int __REDIRECT (__openat64_alias, (int __fd, const char *__path,
extern void __syslog_chk (int __pri, int __flag, const char *__fmt, ...)
extern void __vsyslog_chk (int __pri, int __flag, const char *__fmt,
extern int pthread_sigmask (int __how,
extern int pthread_kill (pthread_t __threadid, int __signo) __THROW;
extern int pthread_sigqueue (pthread_t __threadid, int __signo,
extern int __getpagesize (void) __THROW __attribute__ ((__const__));
extern ssize_t readahead (int __fd, __off64_t __offset, size_t __count)
extern int sync_file_range (int __fd, __off64_t __offset, __off64_t __count,
extern ssize_t vmsplice (int __fdout, const struct iovec *__iov,
extern ssize_t splice (int __fdin, __off64_t *__offin, int __fdout,
extern ssize_t tee (int __fdin, int __fdout, size_t __len,
extern int fallocate (int __fd, int __mode, __off_t __offset, __off_t __len);
extern int __REDIRECT (fallocate, (int __fd, int __mode, __off64_t __offset,
extern int fallocate64 (int __fd, int __mode, __off64_t __offset,
extern int name_to_handle_at (int __dfd, const char *__name,
extern int open_by_handle_at (int __mountdirfd, struct file_handle *__handle,
extern void __libc_lock_lock_recursive_fn (__libc_lock_recursive_t *);
extern int __libc_lock_trylock_recursive_fn (__libc_lock_recursive_t *);
extern void __libc_lock_unlock_recursive_fn (__libc_lock_recursive_t *);
extern void _pthread_cleanup_push_defer (struct _pthread_cleanup_buffer *buffer,
extern void _pthread_cleanup_pop_restore (struct _pthread_cleanup_buffer *buffer,
extern long int __sysconf (int);
extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) __THROW;
extern int poll (struct pollfd *__fds, nfds_t __nfds, int __timeout);
extern int ppoll (struct pollfd *__fds, nfds_t __nfds,
extern int statfs (const char *__file, struct statfs *__buf)
extern int __REDIRECT_NTH (statfs,
extern int statfs64 (const char *__file, struct statfs64 *__buf)
extern int fstatfs (int __fildes, struct statfs *__buf)
extern int __REDIRECT_NTH (fstatfs, (int __fildes, struct statfs *__buf),
extern int fstatfs64 (int __fildes, struct statfs64 *__buf)
extern int setxattr (const char *__path, const char *__name,
extern int lsetxattr (const char *__path, const char *__name,
extern int fsetxattr (int __fd, const char *__name, const void *__value,
extern ssize_t getxattr (const char *__path, const char *__name,
extern ssize_t lgetxattr (const char *__path, const char *__name,
extern ssize_t fgetxattr (int __fd, const char *__name, void *__value,
extern ssize_t listxattr (const char *__path, char *__list, size_t __size)
extern ssize_t llistxattr (const char *__path, char *__list, size_t __size)
extern ssize_t flistxattr (int __fd, char *__list, size_t __size)
extern int removexattr (const char *__path, const char *__name) __THROW;
extern int lremovexattr (const char *__path, const char *__name) __THROW;
extern int fremovexattr (int __fd, const char *__name) __THROW;
extern int acct (const char *__filename) __THROW;
extern int ioperm (unsigned long int __from, unsigned long int __num,
extern int iopl (int __level) __THROW;
extern int ustat (__dev_t __dev, struct ustat *__ubuf) __THROW;
extern clock_t times (struct tms *__buffer) __THROW;
extern int vtimes (struct vtimes * __current, struct vtimes * __child) __THROW;
extern long int ptrace (enum __ptrace_request __request, ...) __THROW;
extern int timerfd_create (clockid_t __clock_id, int __flags) __THROW;
extern int timerfd_settime (int __ufd, int __flags,
extern int timerfd_gettime (int __ufd, struct itimerspec *__otmr) __THROW;
extern int mount (const char *__special_file, const char *__dir,
extern int umount (const char *__special_file) __THROW;
extern int umount2 (const char *__special_file, int __flags) __THROW;
extern int getrlimit (__rlimit_resource_t __resource,
extern int __REDIRECT_NTH (getrlimit, (__rlimit_resource_t __resource,
extern int getrlimit64 (__rlimit_resource_t __resource,
extern int setrlimit (__rlimit_resource_t __resource,
extern int __REDIRECT_NTH (setrlimit, (__rlimit_resource_t __resource,
extern int setrlimit64 (__rlimit_resource_t __resource,
extern int getrusage (__rusage_who_t __who, struct rusage *__usage) __THROW;
extern int getpriority (__priority_which_t __which, id_t __who) __THROW;
extern int setpriority (__priority_which_t __which, id_t __who, int __prio)
extern int swapon (const char *__path, int __flags) __THROW;
extern int swapoff (const char *__path) __THROW;
extern int ftime (struct timeb *__timebuf);
extern int statvfs (const char *__restrict __file,
extern int __REDIRECT_NTH (statvfs,
extern int statvfs64 (const char *__restrict __file,
extern int fstatvfs (int __fildes, struct statvfs *__buf)
extern int __REDIRECT_NTH (fstatvfs, (int __fildes, struct statvfs *__buf),
extern int fstatvfs64 (int __fildes, struct statvfs64 *__buf)
extern int setfsuid (__uid_t __uid) __THROW;
extern int setfsgid (__gid_t __gid) __THROW;
extern int semctl (int __semid, int __semnum, int __cmd, ...) __THROW;
extern int semget (key_t __key, int __nsems, int __semflg) __THROW;
extern int semop (int __semid, struct sembuf *__sops, size_t __nsops) __THROW;
extern int semtimedop (int __semid, struct sembuf *__sops, size_t __nsops,
extern int ioctl (int __fd, unsigned long int __request, ...) __THROW;
extern int epoll_create (int __size) __THROW;
extern int epoll_create1 (int __flags) __THROW;
extern int epoll_ctl (int __epfd, int __op, int __fd,
extern int epoll_wait (int __epfd, struct epoll_event *__events,
extern int epoll_pwait (int __epfd, struct epoll_event *__events,
extern ssize_t readv (int __fd, const struct iovec *__iovec, int __count)
extern ssize_t writev (int __fd, const struct iovec *__iovec, int __count)
extern ssize_t preadv (int __fd, const struct iovec *__iovec, int __count,
extern ssize_t pwritev (int __fd, const struct iovec *__iovec, int __count,
extern ssize_t __REDIRECT (preadv, (int __fd, const struct iovec *__iovec,
extern ssize_t __REDIRECT (pwritev, (int __fd, const struct iovec *__iovec,
extern ssize_t preadv64 (int __fd, const struct iovec *__iovec, int __count,
extern ssize_t pwritev64 (int __fd, const struct iovec *__iovec, int __count,
extern int sysinfo (struct sysinfo *__info) __THROW;
extern int get_nprocs_conf (void) __THROW;
extern int get_nprocs (void) __THROW;
extern long int get_phys_pages (void) __THROW;
extern long int get_avphys_pages (void) __THROW;
extern int __adjtimex (struct timex *__ntx) __THROW;
extern int adjtimex (struct timex *__ntx) __THROW;
extern int __REDIRECT_NTH (ntp_gettime, (struct ntptimeval *__ntv),
extern int ntp_gettimex (struct ntptimeval *__ntv) __THROW;
extern int ntp_adjtime (struct timex *__tntx) __THROW;
extern unsigned long int getauxval (unsigned long int __type)
extern __pid_t wait (__WAIT_STATUS __stat_loc);
extern __pid_t waitpid (__pid_t __pid, int *__stat_loc, int __options);
extern int waitid (idtype_t __idtype, __id_t __id, siginfo_t *__infop,
extern __pid_t wait3 (__WAIT_STATUS __stat_loc, int __options,
extern __pid_t wait4 (__pid_t __pid, __WAIT_STATUS __stat_loc, int __options,
extern unsigned int gnu_dev_major (unsigned long long int __dev)
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
extern int vlimit (enum __vlimit_resource __resource, int __value) __THROW;
extern int inotify_init (void) __THROW;
extern int inotify_init1 (int __flags) __THROW;
extern int inotify_add_watch (int __fd, const char *__name, uint32_t __mask)
extern int inotify_rm_watch (int __fd, int __wd) __THROW;
extern int fanotify_init (unsigned int __flags, unsigned int __event_f_flags)
extern int fanotify_mark (int __fanotify_fd, unsigned int __flags,
extern void *mmap (void *__addr, size_t __len, int __prot,
extern void * __REDIRECT_NTH (mmap,
extern void *mmap64 (void *__addr, size_t __len, int __prot,
extern int munmap (void *__addr, size_t __len) __THROW;
extern int mprotect (void *__addr, size_t __len, int __prot) __THROW;
extern int msync (void *__addr, size_t __len, int __flags);
extern int madvise (void *__addr, size_t __len, int __advice) __THROW;
extern int posix_madvise (void *__addr, size_t __len, int __advice) __THROW;
extern int mlock (const void *__addr, size_t __len) __THROW;
extern int munlock (const void *__addr, size_t __len) __THROW;
extern int mlockall (int __flags) __THROW;
extern int munlockall (void) __THROW;
extern int mincore (void *__start, size_t __len, unsigned char *__vec)
extern void *mremap (void *__addr, size_t __old_len, size_t __new_len,
extern int remap_file_pages (void *__start, size_t __size, int __prot,
extern int shm_open (const char *__name, int __oflag, mode_t __mode);
extern int shm_unlink (const char *__name);
extern int socket (int __domain, int __type, int __protocol) __THROW;
extern int socketpair (int __domain, int __type, int __protocol,
extern int bind (int __fd, __CONST_SOCKADDR_ARG __addr, socklen_t __len)
extern int getsockname (int __fd, __SOCKADDR_ARG __addr,
extern int connect (int __fd, __CONST_SOCKADDR_ARG __addr, socklen_t __len);
extern int getpeername (int __fd, __SOCKADDR_ARG __addr,
extern ssize_t send (int __fd, const void *__buf, size_t __n, int __flags);
extern ssize_t recv (int __fd, void *__buf, size_t __n, int __flags);
extern ssize_t sendto (int __fd, const void *__buf, size_t __n,
extern ssize_t recvfrom (int __fd, void *__restrict __buf, size_t __n,
extern ssize_t sendmsg (int __fd, const struct msghdr *__message,
extern int sendmmsg (int __fd, struct mmsghdr *__vmessages,
extern ssize_t recvmsg (int __fd, struct msghdr *__message, int __flags);
extern int recvmmsg (int __fd, struct mmsghdr *__vmessages,
extern int getsockopt (int __fd, int __level, int __optname,
extern int setsockopt (int __fd, int __level, int __optname,
extern int listen (int __fd, int __n) __THROW;
extern int accept (int __fd, __SOCKADDR_ARG __addr,
extern int accept4 (int __fd, __SOCKADDR_ARG __addr,
extern int shutdown (int __fd, int __how) __THROW;
extern int sockatmark (int __fd) __THROW;
extern int isfdtype (int __fd, int __fdtype) __THROW;
extern int eventfd (int __count, int __flags) __THROW;
extern int eventfd_read (int __fd, eventfd_t *__value);
extern int eventfd_write (int __fd, eventfd_t __value);
extern int bdflush (int __func, long int __data) __THROW;
extern int msgctl (int __msqid, int __cmd, struct msqid_ds *__buf) __THROW;
extern int msgget (key_t __key, int __msgflg) __THROW;
extern ssize_t msgrcv (int __msqid, void *__msgp, size_t __msgsz,
extern int msgsnd (int __msqid, const void *__msgp, size_t __msgsz,
extern int signalfd (int __fd, const sigset_t *__mask, int __flags)
extern int prctl (int __option, ...) __THROW;
extern int quotactl (int __cmd, const char *__special, int __id,
extern int klogctl (int __type, char *__bufp, int __len) __THROW;
extern int reboot (int __howto) __THROW;
extern int flock (int __fd, int __operation) __THROW;
extern int sprofil (struct prof *__profp, int __profcnt,
extern void closelog (void);
extern void openlog (const char *__ident, int __option, int __facility);
extern int setlogmask (int __mask) __THROW;
extern void syslog (int __pri, const char *__fmt, ...)
extern void vsyslog (int __pri, const char *__fmt, __gnuc_va_list __ap)
extern struct __bb *__bb_head;
extern void __monstartup (u_long __lowpc, u_long __highpc) __THROW;
extern void monstartup (u_long __lowpc, u_long __highpc) __THROW;
extern void _mcleanup (void) __THROW;
extern int uname (struct utsname *__name) __THROW;
extern int vm86 (unsigned long int __subfunction,
extern ssize_t sendfile (int __out_fd, int __in_fd, off_t *__offset,
extern ssize_t __REDIRECT_NTH (sendfile,
extern ssize_t sendfile64 (int __out_fd, int __in_fd, __off64_t *__offset,
extern int shmctl (int __shmid, int __cmd, struct shmid_ds *__buf) __THROW;
extern int shmget (key_t __key, size_t __size, int __shmflg) __THROW;
extern void *shmat (int __shmid, const void *__shmaddr, int __shmflg)
extern int shmdt (const void *__shmaddr) __THROW;
extern key_t ftok (const char *__pathname, int __proj_id) __THROW;
extern int stat (const char *__restrict __file,
extern int fstat (int __fd, struct stat *__buf) __THROW __nonnull ((2));
extern int __REDIRECT_NTH (stat, (const char *__restrict __file,
extern int __REDIRECT_NTH (fstat, (int __fd, struct stat *__buf), fstat64)
extern int stat64 (const char *__restrict __file,
extern int fstat64 (int __fd, struct stat64 *__buf) __THROW __nonnull ((2));
extern int fstatat (int __fd, const char *__restrict __file,
extern int __REDIRECT_NTH (fstatat, (int __fd, const char *__restrict __file,
extern int fstatat64 (int __fd, const char *__restrict __file,
extern int lstat (const char *__restrict __file,
extern int __REDIRECT_NTH (lstat,
extern int lstat64 (const char *__restrict __file,
extern int chmod (const char *__file, __mode_t __mode)
extern int lchmod (const char *__file, __mode_t __mode)
extern int fchmod (int __fd, __mode_t __mode) __THROW;
extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
extern __mode_t umask (__mode_t __mask) __THROW;
extern __mode_t getumask (void) __THROW;
extern int mkdir (const char *__path, __mode_t __mode)
extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
extern int mknodat (int __fd, const char *__path, __mode_t __mode,
extern int mkfifo (const char *__path, __mode_t __mode)
extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
extern int utimensat (int __fd, const char *__path,
extern int futimens (int __fd, const struct timespec __times[2]) __THROW;
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
extern int __xstat (int __ver, const char *__filename,
extern int __lxstat (int __ver, const char *__filename,
extern int __fxstatat (int __ver, int __fildes, const char *__filename,
extern int __REDIRECT_NTH (__fxstat, (int __ver, int __fildes,
extern int __REDIRECT_NTH (__xstat, (int __ver, const char *__filename,
extern int __REDIRECT_NTH (__lxstat, (int __ver, const char *__filename,
extern int __REDIRECT_NTH (__fxstatat, (int __ver, int __fildes,
extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
extern int __xstat64 (int __ver, const char *__filename,
extern int __lxstat64 (int __ver, const char *__filename,
extern int __fxstatat64 (int __ver, int __fildes, const char *__filename,
extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
extern int __xmknodat (int __ver, int __fd, const char *__path,
extern int sysctl (int *__name, int __nlen, void *__oldval,
extern int ioperm (unsigned long int __from, unsigned long int __num,
extern int iopl (int __level) __THROW;
extern int personality (unsigned long int __persona) __THROW;
extern int gettimeofday (struct timeval *__restrict __tv,
extern int settimeofday (const struct timeval *__tv,
extern int adjtime (const struct timeval *__delta,
extern int getitimer (__itimer_which_t __which,
extern int setitimer (__itimer_which_t __which,
extern int utimes (const char *__file, const struct timeval __tvp[2])
extern int lutimes (const char *__file, const struct timeval __tvp[2])
extern int futimes (int __fd, const struct timeval __tvp[2]) __THROW;
extern int futimesat (int __fd, const char *__file,
extern int select (int __nfds, fd_set *__restrict __readfds,
extern int pselect (int __nfds, fd_set *__restrict __readfds,
extern const char *gnu_get_libc_release (void) __THROW;
extern const char *gnu_get_libc_version (void) __THROW;
extern fpu_control_t __fpu_control;
extern "C" {
extern const struct wl_interface wl_display_interface;
extern const struct wl_interface wl_registry_interface;
extern const struct wl_interface wl_callback_interface;
extern const struct wl_interface wl_compositor_interface;
extern const struct wl_interface wl_shm_pool_interface;
extern const struct wl_interface wl_shm_interface;
extern const struct wl_interface wl_buffer_interface;
extern const struct wl_interface wl_data_offer_interface;
extern const struct wl_interface wl_data_source_interface;
extern const struct wl_interface wl_data_device_interface;
extern const struct wl_interface wl_data_device_manager_interface;
extern const struct wl_interface wl_shell_interface;
extern const struct wl_interface wl_shell_surface_interface;
extern const struct wl_interface wl_surface_interface;
extern const struct wl_interface wl_seat_interface;
extern const struct wl_interface wl_pointer_interface;
extern const struct wl_interface wl_keyboard_interface;
extern const struct wl_interface wl_touch_interface;
extern const struct wl_interface wl_output_interface;
extern const struct wl_interface wl_region_interface;
extern const struct wl_interface wl_subcompositor_interface;
extern const struct wl_interface wl_subsurface_interface;
extern void aio_init (const struct aioinit *__init) __THROW __nonnull ((1));
extern int aio_read (struct aiocb *__aiocbp) __THROW __nonnull ((1));
extern int aio_write (struct aiocb *__aiocbp) __THROW __nonnull ((1));
extern int lio_listio (int __mode,
extern int aio_error (const struct aiocb *__aiocbp) __THROW __nonnull ((1));
extern __ssize_t aio_return (struct aiocb *__aiocbp) __THROW __nonnull ((1));
extern int aio_cancel (int __fildes, struct aiocb *__aiocbp) __THROW;
extern int aio_suspend (const struct aiocb *const __list[], int __nent,
extern int aio_fsync (int __operation, struct aiocb *__aiocbp)
extern int __REDIRECT_NTH (aio_read, (struct aiocb *__aiocbp), aio_read64)
extern int __REDIRECT_NTH (aio_write, (struct aiocb *__aiocbp), aio_write64)
extern int __REDIRECT_NTH (lio_listio,
extern int __REDIRECT_NTH (aio_error, (const struct aiocb *__aiocbp),
extern __ssize_t __REDIRECT_NTH (aio_return, (struct aiocb *__aiocbp),
extern int __REDIRECT_NTH (aio_cancel,
extern int __REDIRECT_NTH (aio_suspend,
extern int __REDIRECT_NTH (aio_fsync,
extern int aio_read64 (struct aiocb64 *__aiocbp) __THROW __nonnull ((1));
extern int aio_write64 (struct aiocb64 *__aiocbp) __THROW __nonnull ((1));
extern int lio_listio64 (int __mode,
extern int aio_error64 (const struct aiocb64 *__aiocbp)
extern __ssize_t aio_return64 (struct aiocb64 *__aiocbp)
extern int aio_cancel64 (int __fildes, struct aiocb64 *__aiocbp) __THROW;
extern int aio_suspend64 (const struct aiocb64 *const __list[], int __nent,
extern int aio_fsync64 (int __operation, struct aiocb64 *__aiocbp)
extern "C" {
extern speed_t cfgetospeed (const struct termios *__termios_p) __THROW;
extern speed_t cfgetispeed (const struct termios *__termios_p) __THROW;
extern int cfsetospeed (struct termios *__termios_p, speed_t __speed) __THROW;
extern int cfsetispeed (struct termios *__termios_p, speed_t __speed) __THROW;
extern int cfsetspeed (struct termios *__termios_p, speed_t __speed) __THROW;
extern int tcgetattr (int __fd, struct termios *__termios_p) __THROW;
extern int tcsetattr (int __fd, int __optional_actions,
extern void cfmakeraw (struct termios *__termios_p) __THROW;
extern int tcsendbreak (int __fd, int __duration) __THROW;
extern int tcdrain (int __fd);
extern int tcflush (int __fd, int __queue_selector) __THROW;
extern int tcflow (int __fd, int __action) __THROW;
extern __pid_t tcgetsid (int __fd) __THROW;
extern size_t mbrtoc16 (char16_t *__restrict __pc16,
extern size_t c16rtomb (char *__restrict __s, char16_t __c16,
extern size_t mbrtoc32 (char32_t *__restrict __pc32,
extern size_t c32rtomb (char *__restrict __s, char32_t __c32,
extern "C" {
extern void drmModeFreeModeInfo( drmModeModeInfoPtr ptr );
extern void drmModeFreeResources( drmModeResPtr ptr );
extern void drmModeFreeFB( drmModeFBPtr ptr );
extern void drmModeFreeCrtc( drmModeCrtcPtr ptr );
extern void drmModeFreeConnector( drmModeConnectorPtr ptr );
extern void drmModeFreeEncoder( drmModeEncoderPtr ptr );
extern void drmModeFreePlane( drmModePlanePtr ptr );
extern void drmModeFreePlaneResources(drmModePlaneResPtr ptr);
extern drmModeResPtr drmModeGetResources(int fd);
extern drmModeFBPtr drmModeGetFB(int fd, uint32_t bufferId);
extern int drmModeAddFB(int fd, uint32_t width, uint32_t height, uint8_t depth,
extern int drmModeAddFB2(int fd, uint32_t width, uint32_t height,
extern int drmModeRmFB(int fd, uint32_t bufferId);
extern int drmModeDirtyFB(int fd, uint32_t bufferId,
extern drmModeCrtcPtr drmModeGetCrtc(int fd, uint32_t crtcId);
extern drmModeConnectorPtr drmModeGetConnector(int fd,
extern int drmModeAttachMode(int fd, uint32_t connectorId, drmModeModeInfoPtr mode_info);
extern int drmModeDetachMode(int fd, uint32_t connectorId, drmModeModeInfoPtr mode_info);
extern drmModePropertyPtr drmModeGetProperty(int fd, uint32_t propertyId);
extern void drmModeFreeProperty(drmModePropertyPtr ptr);
extern drmModePropertyBlobPtr drmModeGetPropertyBlob(int fd, uint32_t blob_id);
extern void drmModeFreePropertyBlob(drmModePropertyBlobPtr ptr);
extern int drmModeConnectorSetProperty(int fd, uint32_t connector_id, uint32_t property_id,
extern int drmCheckModesettingSupported(const char *busid);
extern int drmModeCrtcSetGamma(int fd, uint32_t crtc_id, uint32_t size,
extern int drmModeCrtcGetGamma(int fd, uint32_t crtc_id, uint32_t size,
extern int drmModePageFlip(int fd, uint32_t crtc_id, uint32_t fb_id,
extern drmModePlaneResPtr drmModeGetPlaneResources(int fd);
extern drmModePlanePtr drmModeGetPlane(int fd, uint32_t plane_id);
extern int drmModeSetPlane(int fd, uint32_t plane_id, uint32_t crtc_id,
extern drmModeObjectPropertiesPtr drmModeObjectGetProperties(int fd,
extern void drmModeFreeObjectProperties(drmModeObjectPropertiesPtr ptr);
extern int drmModeObjectSetProperty(int fd, uint32_t object_id,
extern struct fstab *getfsent (void) __THROW;
extern struct fstab *getfsspec (const char *__name) __THROW;
extern struct fstab *getfsfile (const char *__name) __THROW;
extern int setfsent (void) __THROW;
extern void endfsent (void) __THROW;
extern "C" {
extern "C" {
extern "C" {
extern int fmtmsg (long int __classification, const char *__label,
extern int addseverity (int __severity, const char *__string) __THROW;
extern "C" {
extern "C" NCURSES_IMPEXP int NCURSES_API clearok(WINDOW*, bool);
extern "C" NCURSES_IMPEXP int NCURSES_API leaveok(WINDOW* win, bool bf);
extern "C" NCURSES_IMPEXP int NCURSES_API scrollok(WINDOW*, bool);
extern "C" NCURSES_IMPEXP int NCURSES_API scrollok(WINDOW*, char);
extern "C" int     _nc_ripoffline(int, int (*init)(WINDOW*, int));
extern "C" int     _nc_xx_ripoff_init(WINDOW *, int);
extern "C" int     _nc_has_mouse(void);
extern void __assert_fail (const char *__assertion, const char *__file,
extern void __assert_perror_fail (int __errnum, const char *__file,
extern void __assert (const char *__assertion, const char *__file, int __line)
extern "C" {
extern DECLSPEC SDL_mutex *SDLCALL SDL_CreateMutex(void);
extern DECLSPEC int SDLCALL SDL_LockMutex(SDL_mutex * mutex);
extern DECLSPEC int SDLCALL SDL_TryLockMutex(SDL_mutex * mutex);
extern DECLSPEC int SDLCALL SDL_UnlockMutex(SDL_mutex * mutex);
extern DECLSPEC void SDLCALL SDL_DestroyMutex(SDL_mutex * mutex);
extern DECLSPEC SDL_sem *SDLCALL SDL_CreateSemaphore(Uint32 initial_value);
extern DECLSPEC void SDLCALL SDL_DestroySemaphore(SDL_sem * sem);
extern DECLSPEC int SDLCALL SDL_SemWait(SDL_sem * sem);
extern DECLSPEC int SDLCALL SDL_SemTryWait(SDL_sem * sem);
extern DECLSPEC int SDLCALL SDL_SemWaitTimeout(SDL_sem * sem, Uint32 ms);
extern DECLSPEC int SDLCALL SDL_SemPost(SDL_sem * sem);
extern DECLSPEC Uint32 SDLCALL SDL_SemValue(SDL_sem * sem);
extern DECLSPEC SDL_cond *SDLCALL SDL_CreateCond(void);
extern DECLSPEC void SDLCALL SDL_DestroyCond(SDL_cond * cond);
extern DECLSPEC int SDLCALL SDL_CondSignal(SDL_cond * cond);
extern DECLSPEC int SDLCALL SDL_CondBroadcast(SDL_cond * cond);
extern DECLSPEC int SDLCALL SDL_CondWait(SDL_cond * cond, SDL_mutex * mutex);
extern DECLSPEC int SDLCALL SDL_CondWaitTimeout(SDL_cond * cond,
extern "C" {
extern DECLSPEC SDL_Window * SDLCALL SDL_GetMouseFocus(void);
extern DECLSPEC Uint32 SDLCALL SDL_GetMouseState(int *x, int *y);
extern DECLSPEC Uint32 SDLCALL SDL_GetRelativeMouseState(int *x, int *y);
extern DECLSPEC void SDLCALL SDL_WarpMouseInWindow(SDL_Window * window,
extern DECLSPEC int SDLCALL SDL_SetRelativeMouseMode(SDL_bool enabled);
extern DECLSPEC SDL_bool SDLCALL SDL_GetRelativeMouseMode(void);
extern DECLSPEC SDL_Cursor *SDLCALL SDL_CreateCursor(const Uint8 * data,
extern DECLSPEC SDL_Cursor *SDLCALL SDL_CreateColorCursor(SDL_Surface *surface,
extern DECLSPEC SDL_Cursor *SDLCALL SDL_CreateSystemCursor(SDL_SystemCursor id);
extern DECLSPEC void SDLCALL SDL_SetCursor(SDL_Cursor * cursor);
extern DECLSPEC SDL_Cursor *SDLCALL SDL_GetCursor(void);
extern DECLSPEC SDL_Cursor *SDLCALL SDL_GetDefaultCursor(void);
extern DECLSPEC void SDLCALL SDL_FreeCursor(SDL_Cursor * cursor);
extern DECLSPEC int SDLCALL SDL_ShowCursor(int toggle);
extern "C" {
extern DECLSPEC SDL_bool SDLCALL SDL_SetHintWithPriority(const char *name,
extern DECLSPEC SDL_bool SDLCALL SDL_SetHint(const char *name,
extern DECLSPEC const char * SDLCALL SDL_GetHint(const char *name);
extern DECLSPEC void SDLCALL SDL_AddHintCallback(const char *name,
extern DECLSPEC void SDLCALL SDL_DelHintCallback(const char *name,
extern DECLSPEC void SDLCALL SDL_ClearHints(void);
extern "C" {
extern DECLSPEC int SDLCALL SDL_GetNumRenderDrivers(void);
extern DECLSPEC int SDLCALL SDL_GetRenderDriverInfo(int index,
extern DECLSPEC int SDLCALL SDL_CreateWindowAndRenderer(
extern DECLSPEC SDL_Renderer * SDLCALL SDL_CreateRenderer(SDL_Window * window,
extern DECLSPEC SDL_Renderer * SDLCALL SDL_CreateSoftwareRenderer(SDL_Surface * surface);
extern DECLSPEC SDL_Renderer * SDLCALL SDL_GetRenderer(SDL_Window * window);
extern DECLSPEC int SDLCALL SDL_GetRendererInfo(SDL_Renderer * renderer,
extern DECLSPEC int SDLCALL SDL_GetRendererOutputSize(SDL_Renderer * renderer,
extern DECLSPEC SDL_Texture * SDLCALL SDL_CreateTexture(SDL_Renderer * renderer,
extern DECLSPEC SDL_Texture * SDLCALL SDL_CreateTextureFromSurface(SDL_Renderer * renderer, SDL_Surface * surface);
extern DECLSPEC int SDLCALL SDL_QueryTexture(SDL_Texture * texture,
extern DECLSPEC int SDLCALL SDL_SetTextureColorMod(SDL_Texture * texture,
extern DECLSPEC int SDLCALL SDL_GetTextureColorMod(SDL_Texture * texture,
extern DECLSPEC int SDLCALL SDL_SetTextureAlphaMod(SDL_Texture * texture,
extern DECLSPEC int SDLCALL SDL_GetTextureAlphaMod(SDL_Texture * texture,
extern DECLSPEC int SDLCALL SDL_SetTextureBlendMode(SDL_Texture * texture,
extern DECLSPEC int SDLCALL SDL_GetTextureBlendMode(SDL_Texture * texture,
extern DECLSPEC int SDLCALL SDL_UpdateTexture(SDL_Texture * texture,
extern DECLSPEC int SDLCALL SDL_UpdateYUVTexture(SDL_Texture * texture,
extern DECLSPEC int SDLCALL SDL_LockTexture(SDL_Texture * texture,
extern DECLSPEC void SDLCALL SDL_UnlockTexture(SDL_Texture * texture);
extern DECLSPEC SDL_bool SDLCALL SDL_RenderTargetSupported(SDL_Renderer *renderer);
extern DECLSPEC int SDLCALL SDL_SetRenderTarget(SDL_Renderer *renderer,
extern DECLSPEC SDL_Texture * SDLCALL SDL_GetRenderTarget(SDL_Renderer *renderer);
extern DECLSPEC int SDLCALL SDL_RenderSetLogicalSize(SDL_Renderer * renderer, int w, int h);
extern DECLSPEC void SDLCALL SDL_RenderGetLogicalSize(SDL_Renderer * renderer, int *w, int *h);
extern DECLSPEC int SDLCALL SDL_RenderSetViewport(SDL_Renderer * renderer,
extern DECLSPEC void SDLCALL SDL_RenderGetViewport(SDL_Renderer * renderer,
extern DECLSPEC int SDLCALL SDL_RenderSetClipRect(SDL_Renderer * renderer,
extern DECLSPEC void SDLCALL SDL_RenderGetClipRect(SDL_Renderer * renderer,
extern DECLSPEC int SDLCALL SDL_RenderSetScale(SDL_Renderer * renderer,
extern DECLSPEC void SDLCALL SDL_RenderGetScale(SDL_Renderer * renderer,
extern DECLSPEC int SDLCALL SDL_SetRenderDrawColor(SDL_Renderer * renderer,
extern DECLSPEC int SDLCALL SDL_GetRenderDrawColor(SDL_Renderer * renderer,
extern DECLSPEC int SDLCALL SDL_SetRenderDrawBlendMode(SDL_Renderer * renderer,
extern DECLSPEC int SDLCALL SDL_GetRenderDrawBlendMode(SDL_Renderer * renderer,
extern DECLSPEC int SDLCALL SDL_RenderClear(SDL_Renderer * renderer);
extern DECLSPEC int SDLCALL SDL_RenderDrawPoint(SDL_Renderer * renderer,
extern DECLSPEC int SDLCALL SDL_RenderDrawPoints(SDL_Renderer * renderer,
extern DECLSPEC int SDLCALL SDL_RenderDrawLine(SDL_Renderer * renderer,
extern DECLSPEC int SDLCALL SDL_RenderDrawLines(SDL_Renderer * renderer,
extern DECLSPEC int SDLCALL SDL_RenderDrawRect(SDL_Renderer * renderer,
extern DECLSPEC int SDLCALL SDL_RenderDrawRects(SDL_Renderer * renderer,
extern DECLSPEC int SDLCALL SDL_RenderFillRect(SDL_Renderer * renderer,
extern DECLSPEC int SDLCALL SDL_RenderFillRects(SDL_Renderer * renderer,
extern DECLSPEC int SDLCALL SDL_RenderCopy(SDL_Renderer * renderer,
extern DECLSPEC int SDLCALL SDL_RenderCopyEx(SDL_Renderer * renderer,
extern DECLSPEC int SDLCALL SDL_RenderReadPixels(SDL_Renderer * renderer,
extern DECLSPEC void SDLCALL SDL_RenderPresent(SDL_Renderer * renderer);
extern DECLSPEC void SDLCALL SDL_DestroyTexture(SDL_Texture * texture);
extern DECLSPEC void SDLCALL SDL_DestroyRenderer(SDL_Renderer * renderer);
extern DECLSPEC int SDLCALL SDL_GL_BindTexture(SDL_Texture *texture, float *texw, float *texh);
extern DECLSPEC int SDLCALL SDL_GL_UnbindTexture(SDL_Texture *texture);
extern "C" {
extern "C" {
extern DECLSPEC const char * SDLCALL SDL_GetPlatform (void);
extern "C" {
extern "C" {
extern "C" {
extern DECLSPEC void *SDLCALL SDL_LoadObject(const char *sofile);
extern DECLSPEC void *SDLCALL SDL_LoadFunction(void *handle,
extern DECLSPEC void SDLCALL SDL_UnloadObject(void *handle);
extern "C" {
extern DECLSPEC int SDLCALL SDL_GetNumVideoDrivers(void);
extern DECLSPEC const char *SDLCALL SDL_GetVideoDriver(int index);
extern DECLSPEC int SDLCALL SDL_VideoInit(const char *driver_name);
extern DECLSPEC void SDLCALL SDL_VideoQuit(void);
extern DECLSPEC const char *SDLCALL SDL_GetCurrentVideoDriver(void);
extern DECLSPEC int SDLCALL SDL_GetNumVideoDisplays(void);
extern DECLSPEC const char * SDLCALL SDL_GetDisplayName(int displayIndex);
extern DECLSPEC int SDLCALL SDL_GetDisplayBounds(int displayIndex, SDL_Rect * rect);
extern DECLSPEC int SDLCALL SDL_GetNumDisplayModes(int displayIndex);
extern DECLSPEC int SDLCALL SDL_GetDisplayMode(int displayIndex, int modeIndex,
extern DECLSPEC int SDLCALL SDL_GetDesktopDisplayMode(int displayIndex, SDL_DisplayMode * mode);
extern DECLSPEC int SDLCALL SDL_GetCurrentDisplayMode(int displayIndex, SDL_DisplayMode * mode);
extern DECLSPEC SDL_DisplayMode * SDLCALL SDL_GetClosestDisplayMode(int displayIndex, const SDL_DisplayMode * mode, SDL_DisplayMode * closest);
extern DECLSPEC int SDLCALL SDL_GetWindowDisplayIndex(SDL_Window * window);
extern DECLSPEC int SDLCALL SDL_SetWindowDisplayMode(SDL_Window * window,
extern DECLSPEC int SDLCALL SDL_GetWindowDisplayMode(SDL_Window * window,
extern DECLSPEC Uint32 SDLCALL SDL_GetWindowPixelFormat(SDL_Window * window);
extern DECLSPEC SDL_Window * SDLCALL SDL_CreateWindow(const char *title,
extern DECLSPEC SDL_Window * SDLCALL SDL_CreateWindowFrom(const void *data);
extern DECLSPEC Uint32 SDLCALL SDL_GetWindowID(SDL_Window * window);
extern DECLSPEC SDL_Window * SDLCALL SDL_GetWindowFromID(Uint32 id);
extern DECLSPEC Uint32 SDLCALL SDL_GetWindowFlags(SDL_Window * window);
extern DECLSPEC void SDLCALL SDL_SetWindowTitle(SDL_Window * window,
extern DECLSPEC const char *SDLCALL SDL_GetWindowTitle(SDL_Window * window);
extern DECLSPEC void SDLCALL SDL_SetWindowIcon(SDL_Window * window,
extern DECLSPEC void* SDLCALL SDL_SetWindowData(SDL_Window * window,
extern DECLSPEC void *SDLCALL SDL_GetWindowData(SDL_Window * window,
extern DECLSPEC void SDLCALL SDL_SetWindowPosition(SDL_Window * window,
extern DECLSPEC void SDLCALL SDL_GetWindowPosition(SDL_Window * window,
extern DECLSPEC void SDLCALL SDL_SetWindowSize(SDL_Window * window, int w,
extern DECLSPEC void SDLCALL SDL_GetWindowSize(SDL_Window * window, int *w,
extern DECLSPEC void SDLCALL SDL_SetWindowMinimumSize(SDL_Window * window,
extern DECLSPEC void SDLCALL SDL_GetWindowMinimumSize(SDL_Window * window,
extern DECLSPEC void SDLCALL SDL_SetWindowMaximumSize(SDL_Window * window,
extern DECLSPEC void SDLCALL SDL_GetWindowMaximumSize(SDL_Window * window,
extern DECLSPEC void SDLCALL SDL_SetWindowBordered(SDL_Window * window,
extern DECLSPEC void SDLCALL SDL_ShowWindow(SDL_Window * window);
extern DECLSPEC void SDLCALL SDL_HideWindow(SDL_Window * window);
extern DECLSPEC void SDLCALL SDL_RaiseWindow(SDL_Window * window);
extern DECLSPEC void SDLCALL SDL_MaximizeWindow(SDL_Window * window);
extern DECLSPEC void SDLCALL SDL_MinimizeWindow(SDL_Window * window);
extern DECLSPEC void SDLCALL SDL_RestoreWindow(SDL_Window * window);
extern DECLSPEC int SDLCALL SDL_SetWindowFullscreen(SDL_Window * window,
extern DECLSPEC SDL_Surface * SDLCALL SDL_GetWindowSurface(SDL_Window * window);
extern DECLSPEC int SDLCALL SDL_UpdateWindowSurface(SDL_Window * window);
extern DECLSPEC int SDLCALL SDL_UpdateWindowSurfaceRects(SDL_Window * window,
extern DECLSPEC void SDLCALL SDL_SetWindowGrab(SDL_Window * window,
extern DECLSPEC SDL_bool SDLCALL SDL_GetWindowGrab(SDL_Window * window);
extern DECLSPEC int SDLCALL SDL_SetWindowBrightness(SDL_Window * window, float brightness);
extern DECLSPEC float SDLCALL SDL_GetWindowBrightness(SDL_Window * window);
extern DECLSPEC int SDLCALL SDL_SetWindowGammaRamp(SDL_Window * window,
extern DECLSPEC int SDLCALL SDL_GetWindowGammaRamp(SDL_Window * window,
extern DECLSPEC void SDLCALL SDL_DestroyWindow(SDL_Window * window);
extern DECLSPEC SDL_bool SDLCALL SDL_IsScreenSaverEnabled(void);
extern DECLSPEC void SDLCALL SDL_EnableScreenSaver(void);
extern DECLSPEC void SDLCALL SDL_DisableScreenSaver(void);
extern DECLSPEC int SDLCALL SDL_GL_LoadLibrary(const char *path);
extern DECLSPEC void *SDLCALL SDL_GL_GetProcAddress(const char *proc);
extern DECLSPEC void SDLCALL SDL_GL_UnloadLibrary(void);
extern DECLSPEC SDL_bool SDLCALL SDL_GL_ExtensionSupported(const char
extern DECLSPEC void SDLCALL SDL_GL_ResetAttributes(void);
extern DECLSPEC int SDLCALL SDL_GL_SetAttribute(SDL_GLattr attr, int value);
extern DECLSPEC int SDLCALL SDL_GL_GetAttribute(SDL_GLattr attr, int *value);
extern DECLSPEC SDL_GLContext SDLCALL SDL_GL_CreateContext(SDL_Window *
extern DECLSPEC int SDLCALL SDL_GL_MakeCurrent(SDL_Window * window,
extern DECLSPEC SDL_Window* SDLCALL SDL_GL_GetCurrentWindow(void);
extern DECLSPEC SDL_GLContext SDLCALL SDL_GL_GetCurrentContext(void);
extern DECLSPEC void SDLCALL SDL_GL_GetDrawableSize(SDL_Window * window, int *w,
extern DECLSPEC int SDLCALL SDL_GL_SetSwapInterval(int interval);
extern DECLSPEC int SDLCALL SDL_GL_GetSwapInterval(void);
extern DECLSPEC void SDLCALL SDL_GL_SwapWindow(SDL_Window * window);
extern DECLSPEC void SDLCALL SDL_GL_DeleteContext(SDL_GLContext context);
extern "C" {
extern DECLSPEC int SDLCALL SDL_GetNumTouchDevices(void);
extern DECLSPEC SDL_TouchID SDLCALL SDL_GetTouchDevice(int index);
extern DECLSPEC int SDLCALL SDL_GetNumTouchFingers(SDL_TouchID touchID);
extern DECLSPEC SDL_Finger * SDLCALL SDL_GetTouchFinger(SDL_TouchID touchID, int index);
extern "C" {
extern DECLSPEC SDL_Surface *SDLCALL SDL_CreateRGBSurface
extern DECLSPEC SDL_Surface *SDLCALL SDL_CreateRGBSurfaceFrom(void *pixels,
extern DECLSPEC void SDLCALL SDL_FreeSurface(SDL_Surface * surface);
extern DECLSPEC int SDLCALL SDL_SetSurfacePalette(SDL_Surface * surface,
extern DECLSPEC int SDLCALL SDL_LockSurface(SDL_Surface * surface);
extern DECLSPEC void SDLCALL SDL_UnlockSurface(SDL_Surface * surface);
extern DECLSPEC SDL_Surface *SDLCALL SDL_LoadBMP_RW(SDL_RWops * src,
extern DECLSPEC int SDLCALL SDL_SaveBMP_RW
extern DECLSPEC int SDLCALL SDL_SetSurfaceRLE(SDL_Surface * surface,
extern DECLSPEC int SDLCALL SDL_SetColorKey(SDL_Surface * surface,
extern DECLSPEC int SDLCALL SDL_GetColorKey(SDL_Surface * surface,
extern DECLSPEC int SDLCALL SDL_SetSurfaceColorMod(SDL_Surface * surface,
extern DECLSPEC int SDLCALL SDL_GetSurfaceColorMod(SDL_Surface * surface,
extern DECLSPEC int SDLCALL SDL_SetSurfaceAlphaMod(SDL_Surface * surface,
extern DECLSPEC int SDLCALL SDL_GetSurfaceAlphaMod(SDL_Surface * surface,
extern DECLSPEC int SDLCALL SDL_SetSurfaceBlendMode(SDL_Surface * surface,
extern DECLSPEC int SDLCALL SDL_GetSurfaceBlendMode(SDL_Surface * surface,
extern DECLSPEC SDL_bool SDLCALL SDL_SetClipRect(SDL_Surface * surface,
extern DECLSPEC void SDLCALL SDL_GetClipRect(SDL_Surface * surface,
extern DECLSPEC SDL_Surface *SDLCALL SDL_ConvertSurface
extern DECLSPEC SDL_Surface *SDLCALL SDL_ConvertSurfaceFormat
extern DECLSPEC int SDLCALL SDL_ConvertPixels(int width, int height,
extern DECLSPEC int SDLCALL SDL_FillRect
extern DECLSPEC int SDLCALL SDL_FillRects
extern DECLSPEC int SDLCALL SDL_UpperBlit
extern DECLSPEC int SDLCALL SDL_LowerBlit
extern DECLSPEC int SDLCALL SDL_SoftStretch(SDL_Surface * src,
extern DECLSPEC int SDLCALL SDL_UpperBlitScaled
extern DECLSPEC int SDLCALL SDL_LowerBlitScaled
extern "C" {
extern DECLSPEC SDL_bool SDLCALL SDL_HasIntersection(const SDL_Rect * A,
extern DECLSPEC SDL_bool SDLCALL SDL_IntersectRect(const SDL_Rect * A,
extern DECLSPEC void SDLCALL SDL_UnionRect(const SDL_Rect * A,
extern DECLSPEC SDL_bool SDLCALL SDL_EnclosePoints(const SDL_Point * points,
extern DECLSPEC SDL_bool SDLCALL SDL_IntersectRectAndLine(const SDL_Rect *
extern "C" {
extern DECLSPEC int SDLCALL SDL_GetNumAudioDrivers(void);
extern DECLSPEC const char *SDLCALL SDL_GetAudioDriver(int index);
extern DECLSPEC int SDLCALL SDL_AudioInit(const char *driver_name);
extern DECLSPEC void SDLCALL SDL_AudioQuit(void);
extern DECLSPEC const char *SDLCALL SDL_GetCurrentAudioDriver(void);
extern DECLSPEC int SDLCALL SDL_OpenAudio(SDL_AudioSpec * desired,
extern DECLSPEC int SDLCALL SDL_GetNumAudioDevices(int iscapture);
extern DECLSPEC const char *SDLCALL SDL_GetAudioDeviceName(int index,
extern DECLSPEC SDL_AudioDeviceID SDLCALL SDL_OpenAudioDevice(const char
extern DECLSPEC SDL_AudioStatus SDLCALL SDL_GetAudioStatus(void);
extern DECLSPEC SDL_AudioStatus SDLCALL
extern DECLSPEC void SDLCALL SDL_PauseAudio(int pause_on);
extern DECLSPEC void SDLCALL SDL_PauseAudioDevice(SDL_AudioDeviceID dev,
extern DECLSPEC SDL_AudioSpec *SDLCALL SDL_LoadWAV_RW(SDL_RWops * src,
extern DECLSPEC void SDLCALL SDL_FreeWAV(Uint8 * audio_buf);
extern DECLSPEC int SDLCALL SDL_BuildAudioCVT(SDL_AudioCVT * cvt,
extern DECLSPEC int SDLCALL SDL_ConvertAudio(SDL_AudioCVT * cvt);
extern DECLSPEC void SDLCALL SDL_MixAudio(Uint8 * dst, const Uint8 * src,
extern DECLSPEC void SDLCALL SDL_MixAudioFormat(Uint8 * dst,
extern DECLSPEC void SDLCALL SDL_LockAudio(void);
extern DECLSPEC void SDLCALL SDL_LockAudioDevice(SDL_AudioDeviceID dev);
extern DECLSPEC void SDLCALL SDL_UnlockAudio(void);
extern DECLSPEC void SDLCALL SDL_UnlockAudioDevice(SDL_AudioDeviceID dev);
extern DECLSPEC void SDLCALL SDL_CloseAudio(void);
extern DECLSPEC void SDLCALL SDL_CloseAudioDevice(SDL_AudioDeviceID dev);
extern "C" {
extern DECLSPEC void SDLCALL SDL_LogSetAllPriority(SDL_LogPriority priority);
extern DECLSPEC void SDLCALL SDL_LogSetPriority(int category,
extern DECLSPEC SDL_LogPriority SDLCALL SDL_LogGetPriority(int category);
extern DECLSPEC void SDLCALL SDL_LogResetPriorities(void);
extern DECLSPEC void SDLCALL SDL_Log(const char *fmt, ...);
extern DECLSPEC void SDLCALL SDL_LogVerbose(int category, const char *fmt, ...);
extern DECLSPEC void SDLCALL SDL_LogDebug(int category, const char *fmt, ...);
extern DECLSPEC void SDLCALL SDL_LogInfo(int category, const char *fmt, ...);
extern DECLSPEC void SDLCALL SDL_LogWarn(int category, const char *fmt, ...);
extern DECLSPEC void SDLCALL SDL_LogError(int category, const char *fmt, ...);
extern DECLSPEC void SDLCALL SDL_LogCritical(int category, const char *fmt, ...);
extern DECLSPEC void SDLCALL SDL_LogMessage(int category,
extern DECLSPEC void SDLCALL SDL_LogMessageV(int category,
extern DECLSPEC void SDLCALL SDL_LogGetOutputFunction(SDL_LogOutputFunction *callback, void **userdata);
extern DECLSPEC void SDLCALL SDL_LogSetOutputFunction(SDL_LogOutputFunction callback, void *userdata);
extern "C" {
extern DECLSPEC int SDLCALL SDL_GetCPUCount(void);
extern DECLSPEC int SDLCALL SDL_GetCPUCacheLineSize(void);
extern DECLSPEC SDL_bool SDLCALL SDL_HasRDTSC(void);
extern DECLSPEC SDL_bool SDLCALL SDL_HasAltiVec(void);
extern DECLSPEC SDL_bool SDLCALL SDL_HasMMX(void);
extern DECLSPEC SDL_bool SDLCALL SDL_Has3DNow(void);
extern DECLSPEC SDL_bool SDLCALL SDL_HasSSE(void);
extern DECLSPEC SDL_bool SDLCALL SDL_HasSSE2(void);
extern DECLSPEC SDL_bool SDLCALL SDL_HasSSE3(void);
extern DECLSPEC SDL_bool SDLCALL SDL_HasSSE41(void);
extern DECLSPEC SDL_bool SDLCALL SDL_HasSSE42(void);
extern DECLSPEC SDL_bool SDLCALL SDL_HasAVX(void);
extern DECLSPEC int SDLCALL SDL_GetSystemRAM(void);
extern "C" {
extern "C" {
extern DECLSPEC int SDLCALL SDL_SetClipboardText(const char *text);
extern DECLSPEC char * SDLCALL SDL_GetClipboardText(void);
extern DECLSPEC SDL_bool SDLCALL SDL_HasClipboardText(void);
extern "C" {
extern DECLSPEC SDL_RWops *SDLCALL SDL_RWFromFile(const char *file,
extern DECLSPEC SDL_RWops *SDLCALL SDL_RWFromFP(FILE * fp,
extern DECLSPEC SDL_RWops *SDLCALL SDL_RWFromFP(void * fp,
extern DECLSPEC SDL_RWops *SDLCALL SDL_RWFromMem(void *mem, int size);
extern DECLSPEC SDL_RWops *SDLCALL SDL_RWFromConstMem(const void *mem,
extern DECLSPEC SDL_RWops *SDLCALL SDL_AllocRW(void);
extern DECLSPEC void SDLCALL SDL_FreeRW(SDL_RWops * area);
extern DECLSPEC Uint8 SDLCALL SDL_ReadU8(SDL_RWops * src);
extern DECLSPEC Uint16 SDLCALL SDL_ReadLE16(SDL_RWops * src);
extern DECLSPEC Uint16 SDLCALL SDL_ReadBE16(SDL_RWops * src);
extern DECLSPEC Uint32 SDLCALL SDL_ReadLE32(SDL_RWops * src);
extern DECLSPEC Uint32 SDLCALL SDL_ReadBE32(SDL_RWops * src);
extern DECLSPEC Uint64 SDLCALL SDL_ReadLE64(SDL_RWops * src);
extern DECLSPEC Uint64 SDLCALL SDL_ReadBE64(SDL_RWops * src);
extern DECLSPEC size_t SDLCALL SDL_WriteU8(SDL_RWops * dst, Uint8 value);
extern DECLSPEC size_t SDLCALL SDL_WriteLE16(SDL_RWops * dst, Uint16 value);
extern DECLSPEC size_t SDLCALL SDL_WriteBE16(SDL_RWops * dst, Uint16 value);
extern DECLSPEC size_t SDLCALL SDL_WriteLE32(SDL_RWops * dst, Uint32 value);
extern DECLSPEC size_t SDLCALL SDL_WriteBE32(SDL_RWops * dst, Uint32 value);
extern DECLSPEC size_t SDLCALL SDL_WriteLE64(SDL_RWops * dst, Uint64 value);
extern DECLSPEC size_t SDLCALL SDL_WriteBE64(SDL_RWops * dst, Uint64 value);
extern "C" {
extern "C" {
extern DECLSPEC SDL_bool SDLCALL SDL_AtomicTryLock(SDL_SpinLock *lock);
extern DECLSPEC void SDLCALL SDL_AtomicLock(SDL_SpinLock *lock);
extern DECLSPEC void SDLCALL SDL_AtomicUnlock(SDL_SpinLock *lock);
extern DECLSPEC void SDLCALL SDL_MemoryBarrierRelease();
extern DECLSPEC void SDLCALL SDL_MemoryBarrierAcquire();
extern DECLSPEC SDL_bool SDLCALL SDL_AtomicCAS(SDL_atomic_t *a, int oldval, int newval);
extern DECLSPEC int SDLCALL SDL_AtomicSet(SDL_atomic_t *a, int v);
extern DECLSPEC int SDLCALL SDL_AtomicGet(SDL_atomic_t *a);
extern DECLSPEC int SDLCALL SDL_AtomicAdd(SDL_atomic_t *a, int v);
extern DECLSPEC SDL_bool SDLCALL SDL_AtomicCASPtr(void **a, void *oldval, void *newval);
extern DECLSPEC void* SDLCALL SDL_AtomicSetPtr(void **a, void* v);
extern DECLSPEC void* SDLCALL SDL_AtomicGetPtr(void **a);
extern "C" {
extern "C" {
extern DECLSPEC SDL_Thread *SDLCALL
extern DECLSPEC SDL_Thread *SDLCALL
extern DECLSPEC const char *SDLCALL SDL_GetThreadName(SDL_Thread *thread);
extern DECLSPEC SDL_threadID SDLCALL SDL_ThreadID(void);
extern DECLSPEC SDL_threadID SDLCALL SDL_GetThreadID(SDL_Thread * thread);
extern DECLSPEC int SDLCALL SDL_SetThreadPriority(SDL_ThreadPriority priority);
extern DECLSPEC void SDLCALL SDL_WaitThread(SDL_Thread * thread, int *status);
extern DECLSPEC void SDLCALL SDL_DetachThread(SDL_Thread * thread);
extern DECLSPEC SDL_TLSID SDLCALL SDL_TLSCreate(void);
extern DECLSPEC void * SDLCALL SDL_TLSGet(SDL_TLSID id);
extern DECLSPEC int SDLCALL SDL_TLSSet(SDL_TLSID id, const void *value, void (*destructor)(void*));
extern "C" {
extern DECLSPEC SDL_Window * SDLCALL SDL_GetKeyboardFocus(void);
extern DECLSPEC const Uint8 *SDLCALL SDL_GetKeyboardState(int *numkeys);
extern DECLSPEC SDL_Keymod SDLCALL SDL_GetModState(void);
extern DECLSPEC void SDLCALL SDL_SetModState(SDL_Keymod modstate);
extern DECLSPEC SDL_Keycode SDLCALL SDL_GetKeyFromScancode(SDL_Scancode scancode);
extern DECLSPEC SDL_Scancode SDLCALL SDL_GetScancodeFromKey(SDL_Keycode key);
extern DECLSPEC const char *SDLCALL SDL_GetScancodeName(SDL_Scancode scancode);
extern DECLSPEC SDL_Scancode SDLCALL SDL_GetScancodeFromName(const char *name);
extern DECLSPEC const char *SDLCALL SDL_GetKeyName(SDL_Keycode key);
extern DECLSPEC SDL_Keycode SDLCALL SDL_GetKeyFromName(const char *name);
extern DECLSPEC void SDLCALL SDL_StartTextInput(void);
extern DECLSPEC SDL_bool SDLCALL SDL_IsTextInputActive(void);
extern DECLSPEC void SDLCALL SDL_StopTextInput(void);
extern DECLSPEC void SDLCALL SDL_SetTextInputRect(SDL_Rect *rect);
extern DECLSPEC SDL_bool SDLCALL SDL_HasScreenKeyboardSupport(void);
extern DECLSPEC SDL_bool SDLCALL SDL_IsScreenKeyboardShown(SDL_Window *window);
extern "C" {
extern "C" {
extern DECLSPEC int SDLCALL SDL_RecordGesture(SDL_TouchID touchId);
extern DECLSPEC int SDLCALL SDL_SaveAllDollarTemplates(SDL_RWops *dst);
extern DECLSPEC int SDLCALL SDL_SaveDollarTemplate(SDL_GestureID gestureId,SDL_RWops *dst);
extern DECLSPEC int SDLCALL SDL_LoadDollarTemplates(SDL_TouchID touchId, SDL_RWops *src);
extern "C" {
extern DECLSPEC int SDLCALL SDL_GameControllerAddMappingsFromRW( SDL_RWops * rw, int freerw );
extern DECLSPEC int SDLCALL SDL_GameControllerAddMapping( const char* mappingString );
extern DECLSPEC char * SDLCALL SDL_GameControllerMappingForGUID( SDL_JoystickGUID guid );
extern DECLSPEC char * SDLCALL SDL_GameControllerMapping( SDL_GameController * gamecontroller );
extern DECLSPEC SDL_bool SDLCALL SDL_IsGameController(int joystick_index);
extern DECLSPEC const char *SDLCALL SDL_GameControllerNameForIndex(int joystick_index);
extern DECLSPEC SDL_GameController *SDLCALL SDL_GameControllerOpen(int joystick_index);
extern DECLSPEC const char *SDLCALL SDL_GameControllerName(SDL_GameController *gamecontroller);
extern DECLSPEC SDL_bool SDLCALL SDL_GameControllerGetAttached(SDL_GameController *gamecontroller);
extern DECLSPEC SDL_Joystick *SDLCALL SDL_GameControllerGetJoystick(SDL_GameController *gamecontroller);
extern DECLSPEC int SDLCALL SDL_GameControllerEventState(int state);
extern DECLSPEC void SDLCALL SDL_GameControllerUpdate(void);
extern DECLSPEC SDL_GameControllerAxis SDLCALL SDL_GameControllerGetAxisFromString(const char *pchString);
extern DECLSPEC const char* SDLCALL SDL_GameControllerGetStringForAxis(SDL_GameControllerAxis axis);
extern DECLSPEC SDL_GameControllerButtonBind SDLCALL
extern DECLSPEC Sint16 SDLCALL
extern DECLSPEC SDL_GameControllerButton SDLCALL SDL_GameControllerGetButtonFromString(const char *pchString);
extern DECLSPEC const char* SDLCALL SDL_GameControllerGetStringForButton(SDL_GameControllerButton button);
extern DECLSPEC SDL_GameControllerButtonBind SDLCALL
extern DECLSPEC Uint8 SDLCALL SDL_GameControllerGetButton(SDL_GameController *gamecontroller,
extern DECLSPEC void SDLCALL SDL_GameControllerClose(SDL_GameController *gamecontroller);
extern "C" {
extern "C" {
extern "C" {
extern DECLSPEC void *SDLCALL SDL_malloc(size_t size);
extern DECLSPEC void *SDLCALL SDL_calloc(size_t nmemb, size_t size);
extern DECLSPEC void *SDLCALL SDL_realloc(void *mem, size_t size);
extern DECLSPEC void SDLCALL SDL_free(void *mem);
extern DECLSPEC char *SDLCALL SDL_getenv(const char *name);
extern DECLSPEC int SDLCALL SDL_setenv(const char *name, const char *value, int overwrite);
extern DECLSPEC void SDLCALL SDL_qsort(void *base, size_t nmemb, size_t size, int (*compare) (const void *, const void *));
extern DECLSPEC int SDLCALL SDL_abs(int x);
extern DECLSPEC int SDLCALL SDL_isdigit(int x);
extern DECLSPEC int SDLCALL SDL_isspace(int x);
extern DECLSPEC int SDLCALL SDL_toupper(int x);
extern DECLSPEC int SDLCALL SDL_tolower(int x);
extern DECLSPEC void *SDLCALL SDL_memset(void *dst, int c, size_t len);
extern DECLSPEC void *SDLCALL SDL_memcpy(void *dst, const void *src, size_t len);
extern DECLSPEC void *SDLCALL SDL_memmove(void *dst, const void *src, size_t len);
extern DECLSPEC int SDLCALL SDL_memcmp(const void *s1, const void *s2, size_t len);
extern DECLSPEC size_t SDLCALL SDL_wcslen(const wchar_t *wstr);
extern DECLSPEC size_t SDLCALL SDL_wcslcpy(wchar_t *dst, const wchar_t *src, size_t maxlen);
extern DECLSPEC size_t SDLCALL SDL_wcslcat(wchar_t *dst, const wchar_t *src, size_t maxlen);
extern DECLSPEC size_t SDLCALL SDL_strlen(const char *str);
extern DECLSPEC size_t SDLCALL SDL_strlcpy(char *dst, const char *src, size_t maxlen);
extern DECLSPEC size_t SDLCALL SDL_utf8strlcpy(char *dst, const char *src, size_t dst_bytes);
extern DECLSPEC size_t SDLCALL SDL_strlcat(char *dst, const char *src, size_t maxlen);
extern DECLSPEC char *SDLCALL SDL_strdup(const char *str);
extern DECLSPEC char *SDLCALL SDL_strrev(char *str);
extern DECLSPEC char *SDLCALL SDL_strupr(char *str);
extern DECLSPEC char *SDLCALL SDL_strlwr(char *str);
extern DECLSPEC char *SDLCALL SDL_strchr(const char *str, int c);
extern DECLSPEC char *SDLCALL SDL_strrchr(const char *str, int c);
extern DECLSPEC char *SDLCALL SDL_strstr(const char *haystack, const char *needle);
extern DECLSPEC char *SDLCALL SDL_itoa(int value, char *str, int radix);
extern DECLSPEC char *SDLCALL SDL_uitoa(unsigned int value, char *str, int radix);
extern DECLSPEC char *SDLCALL SDL_ltoa(long value, char *str, int radix);
extern DECLSPEC char *SDLCALL SDL_ultoa(unsigned long value, char *str, int radix);
extern DECLSPEC char *SDLCALL SDL_lltoa(Sint64 value, char *str, int radix);
extern DECLSPEC char *SDLCALL SDL_ulltoa(Uint64 value, char *str, int radix);
extern DECLSPEC int SDLCALL SDL_atoi(const char *str);
extern DECLSPEC double SDLCALL SDL_atof(const char *str);
extern DECLSPEC long SDLCALL SDL_strtol(const char *str, char **endp, int base);
extern DECLSPEC unsigned long SDLCALL SDL_strtoul(const char *str, char **endp, int base);
extern DECLSPEC Sint64 SDLCALL SDL_strtoll(const char *str, char **endp, int base);
extern DECLSPEC Uint64 SDLCALL SDL_strtoull(const char *str, char **endp, int base);
extern DECLSPEC double SDLCALL SDL_strtod(const char *str, char **endp);
extern DECLSPEC int SDLCALL SDL_strcmp(const char *str1, const char *str2);
extern DECLSPEC int SDLCALL SDL_strncmp(const char *str1, const char *str2, size_t maxlen);
extern DECLSPEC int SDLCALL SDL_strcasecmp(const char *str1, const char *str2);
extern DECLSPEC int SDLCALL SDL_strncasecmp(const char *str1, const char *str2, size_t len);
extern DECLSPEC int SDLCALL SDL_sscanf(const char *text, const char *fmt, ...);
extern DECLSPEC int SDLCALL SDL_vsscanf(const char *text, const char *fmt, va_list ap);
extern DECLSPEC int SDLCALL SDL_snprintf(char *text, size_t maxlen, const char *fmt, ...);
extern DECLSPEC int SDLCALL SDL_vsnprintf(char *text, size_t maxlen, const char *fmt, va_list ap);
extern DECLSPEC double SDLCALL SDL_acos(double x);
extern DECLSPEC double SDLCALL SDL_asin(double x);
extern DECLSPEC double SDLCALL SDL_atan(double x);
extern DECLSPEC double SDLCALL SDL_atan2(double x, double y);
extern DECLSPEC double SDLCALL SDL_ceil(double x);
extern DECLSPEC double SDLCALL SDL_copysign(double x, double y);
extern DECLSPEC double SDLCALL SDL_cos(double x);
extern DECLSPEC float SDLCALL SDL_cosf(float x);
extern DECLSPEC double SDLCALL SDL_fabs(double x);
extern DECLSPEC double SDLCALL SDL_floor(double x);
extern DECLSPEC double SDLCALL SDL_log(double x);
extern DECLSPEC double SDLCALL SDL_pow(double x, double y);
extern DECLSPEC double SDLCALL SDL_scalbn(double x, int n);
extern DECLSPEC double SDLCALL SDL_sin(double x);
extern DECLSPEC float SDLCALL SDL_sinf(float x);
extern DECLSPEC double SDLCALL SDL_sqrt(double x);
extern DECLSPEC SDL_iconv_t SDLCALL SDL_iconv_open(const char *tocode,
extern DECLSPEC int SDLCALL SDL_iconv_close(SDL_iconv_t cd);
extern DECLSPEC size_t SDLCALL SDL_iconv(SDL_iconv_t cd, const char **inbuf,
extern DECLSPEC char *SDLCALL SDL_iconv_string(const char *tocode,
extern "C" {
extern DECLSPEC char *SDLCALL SDL_GetBasePath(void);
extern DECLSPEC char *SDLCALL SDL_GetPrefPath(const char *org, const char *app);
extern "C" {
extern DECLSPEC SDL_Window * SDLCALL SDL_CreateShapedWindow(const char *title,unsigned int x,unsigned int y,unsigned int w,unsigned int h,Uint32 flags);
extern DECLSPEC SDL_bool SDLCALL SDL_IsShapedWindow(const SDL_Window *window);
extern DECLSPEC int SDLCALL SDL_SetWindowShape(SDL_Window *window,SDL_Surface *shape,SDL_WindowShapeMode *shape_mode);
extern DECLSPEC int SDLCALL SDL_GetShapedWindowMode(SDL_Window *window,SDL_WindowShapeMode *shape_mode);
extern "C" {
extern DECLSPEC int SDLCALL SDL_NumJoysticks(void);
extern DECLSPEC const char *SDLCALL SDL_JoystickNameForIndex(int device_index);
extern DECLSPEC SDL_Joystick *SDLCALL SDL_JoystickOpen(int device_index);
extern DECLSPEC const char *SDLCALL SDL_JoystickName(SDL_Joystick * joystick);
extern DECLSPEC SDL_JoystickGUID SDLCALL SDL_JoystickGetDeviceGUID(int device_index);
extern DECLSPEC SDL_JoystickGUID SDLCALL SDL_JoystickGetGUID(SDL_Joystick * joystick);
extern DECLSPEC void SDLCALL SDL_JoystickGetGUIDString(SDL_JoystickGUID guid, char *pszGUID, int cbGUID);
extern DECLSPEC SDL_JoystickGUID SDLCALL SDL_JoystickGetGUIDFromString(const char *pchGUID);
extern DECLSPEC SDL_bool SDLCALL SDL_JoystickGetAttached(SDL_Joystick * joystick);
extern DECLSPEC SDL_JoystickID SDLCALL SDL_JoystickInstanceID(SDL_Joystick * joystick);
extern DECLSPEC int SDLCALL SDL_JoystickNumAxes(SDL_Joystick * joystick);
extern DECLSPEC int SDLCALL SDL_JoystickNumBalls(SDL_Joystick * joystick);
extern DECLSPEC int SDLCALL SDL_JoystickNumHats(SDL_Joystick * joystick);
extern DECLSPEC int SDLCALL SDL_JoystickNumButtons(SDL_Joystick * joystick);
extern DECLSPEC void SDLCALL SDL_JoystickUpdate(void);
extern DECLSPEC int SDLCALL SDL_JoystickEventState(int state);
extern DECLSPEC Sint16 SDLCALL SDL_JoystickGetAxis(SDL_Joystick * joystick,
extern DECLSPEC Uint8 SDLCALL SDL_JoystickGetHat(SDL_Joystick * joystick,
extern DECLSPEC int SDLCALL SDL_JoystickGetBall(SDL_Joystick * joystick,
extern DECLSPEC Uint8 SDLCALL SDL_JoystickGetButton(SDL_Joystick * joystick,
extern DECLSPEC void SDLCALL SDL_JoystickClose(SDL_Joystick * joystick);
extern "C" {
extern "C" {
extern DECLSPEC void SDLCALL SDL_GetVersion(SDL_version * ver);
extern DECLSPEC const char *SDLCALL SDL_GetRevision(void);
extern DECLSPEC int SDLCALL SDL_GetRevisionNumber(void);
extern "C" {
extern DECLSPEC int SDLCALL SDL_NumHaptics(void);
extern DECLSPEC const char *SDLCALL SDL_HapticName(int device_index);
extern DECLSPEC SDL_Haptic *SDLCALL SDL_HapticOpen(int device_index);
extern DECLSPEC int SDLCALL SDL_HapticOpened(int device_index);
extern DECLSPEC int SDLCALL SDL_HapticIndex(SDL_Haptic * haptic);
extern DECLSPEC int SDLCALL SDL_MouseIsHaptic(void);
extern DECLSPEC SDL_Haptic *SDLCALL SDL_HapticOpenFromMouse(void);
extern DECLSPEC int SDLCALL SDL_JoystickIsHaptic(SDL_Joystick * joystick);
extern DECLSPEC SDL_Haptic *SDLCALL SDL_HapticOpenFromJoystick(SDL_Joystick *
extern DECLSPEC void SDLCALL SDL_HapticClose(SDL_Haptic * haptic);
extern DECLSPEC int SDLCALL SDL_HapticNumEffects(SDL_Haptic * haptic);
extern DECLSPEC int SDLCALL SDL_HapticNumEffectsPlaying(SDL_Haptic * haptic);
extern DECLSPEC unsigned int SDLCALL SDL_HapticQuery(SDL_Haptic * haptic);
extern DECLSPEC int SDLCALL SDL_HapticNumAxes(SDL_Haptic * haptic);
extern DECLSPEC int SDLCALL SDL_HapticEffectSupported(SDL_Haptic * haptic,
extern DECLSPEC int SDLCALL SDL_HapticNewEffect(SDL_Haptic * haptic,
extern DECLSPEC int SDLCALL SDL_HapticUpdateEffect(SDL_Haptic * haptic,
extern DECLSPEC int SDLCALL SDL_HapticRunEffect(SDL_Haptic * haptic,
extern DECLSPEC int SDLCALL SDL_HapticStopEffect(SDL_Haptic * haptic,
extern DECLSPEC void SDLCALL SDL_HapticDestroyEffect(SDL_Haptic * haptic,
extern DECLSPEC int SDLCALL SDL_HapticGetEffectStatus(SDL_Haptic * haptic,
extern DECLSPEC int SDLCALL SDL_HapticSetGain(SDL_Haptic * haptic, int gain);
extern DECLSPEC int SDLCALL SDL_HapticSetAutocenter(SDL_Haptic * haptic,
extern DECLSPEC int SDLCALL SDL_HapticPause(SDL_Haptic * haptic);
extern DECLSPEC int SDLCALL SDL_HapticUnpause(SDL_Haptic * haptic);
extern DECLSPEC int SDLCALL SDL_HapticStopAll(SDL_Haptic * haptic);
extern DECLSPEC int SDLCALL SDL_HapticRumbleSupported(SDL_Haptic * haptic);
extern DECLSPEC int SDLCALL SDL_HapticRumbleInit(SDL_Haptic * haptic);
extern DECLSPEC int SDLCALL SDL_HapticRumblePlay(SDL_Haptic * haptic, float strength, Uint32 length );
extern DECLSPEC int SDLCALL SDL_HapticRumbleStop(SDL_Haptic * haptic);
extern "C" {
extern "C" {
extern DECLSPEC void SDLCALL SDL_PumpEvents(void);
extern DECLSPEC int SDLCALL SDL_PeepEvents(SDL_Event * events, int numevents,
extern DECLSPEC SDL_bool SDLCALL SDL_HasEvent(Uint32 type);
extern DECLSPEC SDL_bool SDLCALL SDL_HasEvents(Uint32 minType, Uint32 maxType);
extern DECLSPEC void SDLCALL SDL_FlushEvent(Uint32 type);
extern DECLSPEC void SDLCALL SDL_FlushEvents(Uint32 minType, Uint32 maxType);
extern DECLSPEC int SDLCALL SDL_PollEvent(SDL_Event * event);
extern DECLSPEC int SDLCALL SDL_WaitEvent(SDL_Event * event);
extern DECLSPEC int SDLCALL SDL_WaitEventTimeout(SDL_Event * event,
extern DECLSPEC int SDLCALL SDL_PushEvent(SDL_Event * event);
extern DECLSPEC void SDLCALL SDL_SetEventFilter(SDL_EventFilter filter,
extern DECLSPEC SDL_bool SDLCALL SDL_GetEventFilter(SDL_EventFilter * filter,
extern DECLSPEC void SDLCALL SDL_AddEventWatch(SDL_EventFilter filter,
extern DECLSPEC void SDLCALL SDL_DelEventWatch(SDL_EventFilter filter,
extern DECLSPEC void SDLCALL SDL_FilterEvents(SDL_EventFilter filter,
extern DECLSPEC Uint8 SDLCALL SDL_EventState(Uint32 type, int state);
extern DECLSPEC Uint32 SDLCALL SDL_RegisterEvents(int numevents);
extern "C" {
extern "C" {
extern DECLSPEC int SDLCALL SDL_Direct3D9GetAdapterIndex( int displayIndex );
extern DECLSPEC IDirect3DDevice9* SDLCALL SDL_RenderGetD3D9Device(SDL_Renderer * renderer);
extern DECLSPEC void SDLCALL SDL_DXGIGetOutputInfo( int displayIndex, int *adapterIndex, int *outputIndex );
extern DECLSPEC int SDLCALL SDL_iPhoneSetAnimationCallback(SDL_Window * window, int interval, void (*callback)(void*), void *callbackParam);
extern DECLSPEC void SDLCALL SDL_iPhoneSetEventPump(SDL_bool enabled);
extern DECLSPEC void * SDLCALL SDL_AndroidGetJNIEnv();
extern DECLSPEC void * SDLCALL SDL_AndroidGetActivity();
extern DECLSPEC const char * SDLCALL SDL_AndroidGetInternalStoragePath();
extern DECLSPEC int SDLCALL SDL_AndroidGetExternalStorageState();
extern DECLSPEC const char * SDLCALL SDL_AndroidGetExternalStoragePath();
extern "C" {
extern "C" {
extern DECLSPEC SDL_PowerState SDLCALL SDL_GetPowerInfo(int *secs, int *pct);
extern C_LINKAGE int SDL_main(int argc, char *argv[]);
extern "C" {
extern DECLSPEC void SDLCALL SDL_SetMainReady(void);
extern DECLSPEC int SDLCALL SDL_RegisterApp(char *name, Uint32 style,
extern DECLSPEC void SDLCALL SDL_UnregisterApp(void);
extern "C" {
extern DECLSPEC int SDLCALL SDL_SetError(const char *fmt, ...);
extern DECLSPEC const char *SDLCALL SDL_GetError(void);
extern DECLSPEC void SDLCALL SDL_ClearError(void);
extern DECLSPEC int SDLCALL SDL_Error(SDL_errorcode code);
extern "C" {
extern DECLSPEC int SDLCALL SDL_Init(Uint32 flags);
extern DECLSPEC int SDLCALL SDL_InitSubSystem(Uint32 flags);
extern DECLSPEC void SDLCALL SDL_QuitSubSystem(Uint32 flags);
extern DECLSPEC Uint32 SDLCALL SDL_WasInit(Uint32 flags);
extern DECLSPEC void SDLCALL SDL_Quit(void);
extern "C" {
extern DECLSPEC SDL_bool SDLCALL SDL_GetWindowWMInfo(SDL_Window * window,
extern "C" {
extern DECLSPEC SDL_assert_state SDLCALL SDL_ReportAssertion(SDL_assert_data *,
extern DECLSPEC void SDLCALL SDL_SetAssertionHandler(
extern DECLSPEC SDL_AssertionHandler SDLCALL SDL_GetDefaultAssertionHandler(void);
extern DECLSPEC SDL_AssertionHandler SDLCALL SDL_GetAssertionHandler(void **puserdata);
extern DECLSPEC const SDL_assert_data * SDLCALL SDL_GetAssertionReport(void);
extern DECLSPEC void SDLCALL SDL_ResetAssertionReport(void);
extern "C" {
extern "C" {
extern "C" {
extern DECLSPEC Uint32 SDLCALL SDL_GetTicks(void);
extern DECLSPEC Uint64 SDLCALL SDL_GetPerformanceCounter(void);
extern DECLSPEC Uint64 SDLCALL SDL_GetPerformanceFrequency(void);
extern DECLSPEC void SDLCALL SDL_Delay(Uint32 ms);
extern DECLSPEC SDL_TimerID SDLCALL SDL_AddTimer(Uint32 interval,
extern DECLSPEC SDL_bool SDLCALL SDL_RemoveTimer(SDL_TimerID id);
extern "C" {
extern "C" {
extern "C" {
extern "C" {
extern DECLSPEC int SDLCALL SDL_ShowMessageBox(const SDL_MessageBoxData *messageboxdata, int *buttonid);
extern DECLSPEC int SDLCALL SDL_ShowSimpleMessageBox(Uint32 flags, const char *title, const char *message, SDL_Window *window);
extern "C" {
extern DECLSPEC const char* SDLCALL SDL_GetPixelFormatName(Uint32 format);
extern DECLSPEC SDL_bool SDLCALL SDL_PixelFormatEnumToMasks(Uint32 format,
extern DECLSPEC Uint32 SDLCALL SDL_MasksToPixelFormatEnum(int bpp,
extern DECLSPEC SDL_PixelFormat * SDLCALL SDL_AllocFormat(Uint32 pixel_format);
extern DECLSPEC void SDLCALL SDL_FreeFormat(SDL_PixelFormat *format);
extern DECLSPEC SDL_Palette *SDLCALL SDL_AllocPalette(int ncolors);
extern DECLSPEC int SDLCALL SDL_SetPixelFormatPalette(SDL_PixelFormat * format,
extern DECLSPEC int SDLCALL SDL_SetPaletteColors(SDL_Palette * palette,
extern DECLSPEC void SDLCALL SDL_FreePalette(SDL_Palette * palette);
extern DECLSPEC Uint32 SDLCALL SDL_MapRGB(const SDL_PixelFormat * format,
extern DECLSPEC Uint32 SDLCALL SDL_MapRGBA(const SDL_PixelFormat * format,
extern DECLSPEC void SDLCALL SDL_GetRGB(Uint32 pixel,
extern DECLSPEC void SDLCALL SDL_GetRGBA(Uint32 pixel,
extern DECLSPEC void SDLCALL SDL_CalculateGammaRamp(float gamma, Uint16 * ramp);
extern "C" {
extern "C" {
extern "C" {
extern snd_config_t *snd_config;
extern "C" {
extern "C" {
extern "C" {
extern "C" {
extern "C" {
extern snd_lib_error_handler_t snd_lib_error;
extern int snd_lib_error_set_handler(snd_lib_error_handler_t handler);
extern "C" {
extern "C" {
extern "C" {
extern const unsigned int snd_seq_event_types[];
extern void atomic_clear_mask(unsigned long mask, unsigned long *addr);
extern void atomic_set_mask(unsigned long mask, unsigned long *addr);
extern __inline__ void atomic_add(int i, atomic_t * v)
extern __inline__ void atomic_sub(int i, atomic_t * v)
extern __inline__ int atomic_add_return(int i, atomic_t * v)
extern __inline__ int atomic_sub_return(int i, atomic_t * v)
extern "C" {
extern "C" {
extern "C" {
extern "C" {
extern "C" {
extern struct snd_dlsym_link *snd_dlsym_start;
extern "C" {
extern "C" {
extern "C" {
extern "C" {
extern "C" {
extern PNG_EXPORT(png_uint_32,png_access_version_number) PNGARG((void));
extern PNG_EXPORT(void,png_set_sig_bytes) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(int,png_sig_cmp) PNGARG((png_bytep sig, png_size_t start,
extern PNG_EXPORT(int,png_check_sig) PNGARG((png_bytep sig, int num)) PNG_DEPRECATED;
extern PNG_EXPORT(png_structp,png_create_read_struct)
extern PNG_EXPORT(png_structp,png_create_write_struct)
extern PNG_EXPORT(png_uint_32,png_get_compression_buffer_size)
extern PNG_EXPORT(void,png_set_compression_buffer_size)
extern PNG_EXPORT(int,png_reset_zstream) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(png_structp,png_create_read_struct_2)
extern PNG_EXPORT(png_structp,png_create_write_struct_2)
extern PNG_EXPORT(void,png_write_chunk) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_write_chunk_start) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_write_chunk_data) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_write_chunk_end) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(png_infop,png_create_info_struct)
extern PNG_EXPORT(void,png_info_init) PNGARG((png_infop info_ptr))
extern PNG_EXPORT(void,png_info_init_3) PNGARG((png_infopp info_ptr,
extern PNG_EXPORT(void,png_write_info_before_PLTE) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_write_info) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_read_info) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_charp,png_convert_to_rfc1123)
extern PNG_EXPORT(void,png_convert_from_struct_tm) PNGARG((png_timep ptime,
extern PNG_EXPORT(void,png_convert_from_time_t) PNGARG((png_timep ptime,
extern PNG_EXPORT(void,png_set_expand) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_expand_gray_1_2_4_to_8) PNGARG((png_structp
extern PNG_EXPORT(void,png_set_palette_to_rgb) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_tRNS_to_alpha) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_gray_1_2_4_to_8) PNGARG((png_structp
extern PNG_EXPORT(void,png_set_bgr) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_gray_to_rgb) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_rgb_to_gray) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_rgb_to_gray_fixed) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_byte,png_get_rgb_to_gray_status) PNGARG((png_structp
extern PNG_EXPORT(void,png_build_grayscale_palette) PNGARG((int bit_depth,
extern PNG_EXPORT(void,png_set_strip_alpha) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_swap_alpha) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_invert_alpha) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_filler) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_add_alpha) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_swap) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_packing) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_packswap) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_shift) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(int,png_set_interlace_handling) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_invert_mono) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_background) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_strip_16) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_dither) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_gamma) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_permit_empty_plte) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_flush) PNGARG((png_structp png_ptr, int nrows));
extern PNG_EXPORT(void,png_write_flush) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_start_read_image) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_read_update_info) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_read_rows) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_read_row) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_read_image) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_write_row) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_write_rows) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_write_image) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_write_end) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_read_end) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_destroy_info_struct) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_destroy_read_struct) PNGARG((png_structpp
extern PNG_EXPORT(void,png_read_destroy) PNGARG((png_structp png_ptr, png_infop info_ptr,
extern PNG_EXPORT(void,png_destroy_write_struct)
extern PNG_EXPORT(void,png_write_destroy) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_crc_action) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_filter) PNGARG((png_structp png_ptr, int method,
extern PNG_EXPORT(void,png_set_filter_heuristics) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_compression_level) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_compression_mem_level)
extern PNG_EXPORT(void,png_set_compression_strategy)
extern PNG_EXPORT(void,png_set_compression_window_bits)
extern PNG_EXPORT(void,png_set_compression_method) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_init_io) PNGARG((png_structp png_ptr, png_FILE_p fp));
extern PNG_EXPORT(void,png_set_error_fn) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_voidp,png_get_error_ptr) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_write_fn) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_read_fn) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_voidp,png_get_io_ptr) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_read_status_fn) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_write_status_fn) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_mem_fn) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_voidp,png_get_mem_ptr) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_read_user_transform_fn) PNGARG((png_structp
extern PNG_EXPORT(void,png_set_write_user_transform_fn) PNGARG((png_structp
extern PNG_EXPORT(void,png_set_user_transform_info) PNGARG((png_structp
extern PNG_EXPORT(png_voidp,png_get_user_transform_ptr)
extern PNG_EXPORT(void,png_set_read_user_chunk_fn) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_voidp,png_get_user_chunk_ptr) PNGARG((png_structp
extern PNG_EXPORT(void,png_set_progressive_read_fn) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_voidp,png_get_progressive_ptr)
extern PNG_EXPORT(void,png_process_data) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_progressive_combine_row) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_voidp,png_malloc) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_voidp,png_malloc_warn) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_free) PNGARG((png_structp png_ptr, png_voidp ptr));
extern PNG_EXPORT(voidpf,png_zalloc) PNGARG((voidpf png_ptr, uInt items,
extern PNG_EXPORT(void,png_zfree) PNGARG((voidpf png_ptr, voidpf ptr));
extern PNG_EXPORT(void,png_free_data) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_data_freer) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_voidp,png_malloc_default) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_free_default) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_voidp,png_memcpy_check) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_voidp,png_memset_check) PNGARG((png_structp png_ptr,
extern void *png_far_to_near PNGARG((png_structp png_ptr,png_voidp ptr,
extern PNG_EXPORT(void,png_error) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_chunk_error) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_err) PNGARG((png_structp png_ptr)) PNG_NORETURN;
extern PNG_EXPORT(void,png_warning) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_chunk_warning) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_valid) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_rowbytes) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_bytepp,png_get_rows) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_rows) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_byte,png_get_channels) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32, png_get_image_width) PNGARG((png_structp
extern PNG_EXPORT(png_uint_32, png_get_image_height) PNGARG((png_structp
extern PNG_EXPORT(png_byte, png_get_bit_depth) PNGARG((png_structp
extern PNG_EXPORT(png_byte, png_get_color_type) PNGARG((png_structp
extern PNG_EXPORT(png_byte, png_get_filter_type) PNGARG((png_structp
extern PNG_EXPORT(png_byte, png_get_interlace_type) PNGARG((png_structp
extern PNG_EXPORT(png_byte, png_get_compression_type) PNGARG((png_structp
extern PNG_EXPORT(png_uint_32, png_get_pixels_per_meter) PNGARG((png_structp
extern PNG_EXPORT(png_uint_32, png_get_x_pixels_per_meter) PNGARG((png_structp
extern PNG_EXPORT(png_uint_32, png_get_y_pixels_per_meter) PNGARG((png_structp
extern PNG_EXPORT(float, png_get_pixel_aspect_ratio) PNGARG((png_structp
extern PNG_EXPORT(png_int_32, png_get_x_offset_pixels) PNGARG((png_structp
extern PNG_EXPORT(png_int_32, png_get_y_offset_pixels) PNGARG((png_structp
extern PNG_EXPORT(png_int_32, png_get_x_offset_microns) PNGARG((png_structp
extern PNG_EXPORT(png_int_32, png_get_y_offset_microns) PNGARG((png_structp
extern PNG_EXPORT(png_bytep,png_get_signature) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_bKGD) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_bKGD) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_cHRM) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_cHRM_fixed) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_cHRM) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_cHRM_fixed) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_gAMA) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_gAMA_fixed) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_gAMA) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_gAMA_fixed) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_hIST) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_hIST) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_IHDR) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_IHDR) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_oFFs) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_oFFs) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_pCAL) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_pCAL) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_pHYs) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_pHYs) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_PLTE) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_PLTE) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_sBIT) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_sBIT) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_sRGB) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_sRGB) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_sRGB_gAMA_and_cHRM) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_iCCP) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_iCCP) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_sPLT) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_sPLT) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_text) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_text) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_tIME) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_tIME) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_tRNS) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_tRNS) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_sCAL) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_uint_32,png_get_sCAL_s) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_sCAL) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_set_sCAL_s) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void, png_set_keep_unknown_chunks) PNGARG((png_structp
extern PNG_EXPORT(void, png_set_unknown_chunks) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void, png_set_unknown_chunk_location)
extern PNG_EXPORT(png_uint_32,png_get_unknown_chunks) PNGARG((png_structp
extern PNG_EXPORT(void, png_set_invalid) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void, png_read_png) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void, png_write_png) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(png_charp,png_get_copyright) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(png_charp,png_get_header_ver) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(png_charp,png_get_header_version) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(png_charp,png_get_libpng_ver) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(png_uint_32,png_permit_mng_features) PNGARG((png_structp
extern PNG_EXPORT(png_uint_32,png_get_mmx_flagmask)
extern PNG_EXPORT(png_uint_32,png_get_asm_flagmask)
extern PNG_EXPORT(png_uint_32,png_get_asm_flags)
extern PNG_EXPORT(png_byte,png_get_mmx_bitdepth_threshold)
extern PNG_EXPORT(png_uint_32,png_get_mmx_rowbytes_threshold)
extern PNG_EXPORT(void,png_set_asm_flags)
extern PNG_EXPORT(void,png_set_mmx_thresholds)
extern PNG_EXPORT(int,png_mmx_support) PNGARG((void));
extern PNG_EXPORT(void,png_set_strip_error_numbers) PNGARG((png_structp
extern PNG_EXPORT(void,png_set_user_limits) PNGARG((png_structp
extern PNG_EXPORT(png_uint_32,png_get_user_width_max) PNGARG((png_structp
extern PNG_EXPORT(png_uint_32,png_get_user_height_max) PNGARG((png_structp
extern PNG_EXPORT(png_uint_32,png_get_uint_32) PNGARG((png_bytep buf));
extern PNG_EXPORT(png_uint_16,png_get_uint_16) PNGARG((png_bytep buf));
extern PNG_EXPORT(png_int_32,png_get_int_32) PNGARG((png_bytep buf));
extern PNG_EXPORT(png_uint_32,png_get_uint_31)
extern PNG_EXPORT(void,png_save_uint_32)
extern PNG_EXPORT(void,png_save_int_32)
extern PNG_EXPORT(void,png_save_uint_16)
extern PNG_EXPORT(void,png_read_init) PNGARG((png_structp png_ptr))
extern PNG_EXPORT(void,png_read_init_3) PNGARG((png_structpp ptr_ptr,
extern PNG_EXPORT(void,png_read_init_2) PNGARG((png_structp png_ptr,
extern PNG_EXPORT(void,png_write_init) PNGARG((png_structp png_ptr))
extern PNG_EXPORT(void,png_write_init_3) PNGARG((png_structpp ptr_ptr,
extern PNG_EXPORT(void,png_write_init_2) PNGARG((png_structp png_ptr,
extern void png_handle_iCCP PNGARG((png_structp png_ptr, png_infop info_ptr,
extern void png_handle_sPLT PNGARG((png_structp png_ptr, png_infop info_ptr,
extern "C" {
extern int bcmp (const void *__s1, const void *__s2, size_t __n)
extern void bcopy (const void *__src, void *__dest, size_t __n) __THROW;
extern void bzero (void *__s, size_t __n) __THROW;
extern "C++"
extern char *index (char *__s, int __c)
extern const char *index (const char *__s, int __c)
extern char *index (const char *__s, int __c)
extern "C++"
extern char *rindex (char *__s, int __c)
extern const char *rindex (const char *__s, int __c)
extern char *rindex (const char *__s, int __c)
extern int ffs (int __i) __THROW __attribute__ ((const));
extern int strcasecmp (const char *__s1, const char *__s2)
extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
extern int strcasecmp_l (const char *__s1, const char *__s2, __locale_t __loc)
extern int strncasecmp_l (const char *__s1, const char *__s2,
extern "C" {
extern int libgettextpo_version;
extern po_file_t po_file_create (void);
extern po_file_t po_file_read (const char *filename,
extern po_file_t po_file_write (po_file_t file, const char *filename,
extern void po_file_free (po_file_t file);
extern const char * const * po_file_domains (po_file_t file);
extern const char * po_file_domain_header (po_file_t file, const char *domain);
extern char * po_header_field (const char *header, const char *field);
extern char * po_header_set_field (const char *header, const char *field, const char *value);
extern po_message_iterator_t po_message_iterator (po_file_t file, const char *domain);
extern void po_message_iterator_free (po_message_iterator_t iterator);
extern po_message_t po_next_message (po_message_iterator_t iterator);
extern void po_message_insert (po_message_iterator_t iterator, po_message_t message);
extern po_message_t po_message_create (void);
extern const char * po_message_msgctxt (po_message_t message);
extern void po_message_set_msgctxt (po_message_t message, const char *msgctxt);
extern const char * po_message_msgid (po_message_t message);
extern void po_message_set_msgid (po_message_t message, const char *msgid);
extern const char * po_message_msgid_plural (po_message_t message);
extern void po_message_set_msgid_plural (po_message_t message, const char *msgid_plural);
extern const char * po_message_msgstr (po_message_t message);
extern void po_message_set_msgstr (po_message_t message, const char *msgstr);
extern const char * po_message_msgstr_plural (po_message_t message, int index);
extern void po_message_set_msgstr_plural (po_message_t message, int index, const char *msgstr);
extern const char * po_message_comments (po_message_t message);
extern void po_message_set_comments (po_message_t message, const char *comments);
extern const char * po_message_extracted_comments (po_message_t message);
extern void po_message_set_extracted_comments (po_message_t message, const char *comments);
extern po_filepos_t po_message_filepos (po_message_t message, int i);
extern void po_message_remove_filepos (po_message_t message, int i);
extern void po_message_add_filepos (po_message_t message, const char *file, size_t start_line);
extern const char * po_message_prev_msgctxt (po_message_t message);
extern void po_message_set_prev_msgctxt (po_message_t message, const char *prev_msgctxt);
extern const char * po_message_prev_msgid (po_message_t message);
extern void po_message_set_prev_msgid (po_message_t message, const char *prev_msgid);
extern const char * po_message_prev_msgid_plural (po_message_t message);
extern void po_message_set_prev_msgid_plural (po_message_t message, const char *prev_msgid_plural);
extern int po_message_is_obsolete (po_message_t message);
extern void po_message_set_obsolete (po_message_t message, int obsolete);
extern int po_message_is_fuzzy (po_message_t message);
extern void po_message_set_fuzzy (po_message_t message, int fuzzy);
extern int po_message_is_format (po_message_t message, const char *format_type);
extern void po_message_set_format (po_message_t message, const char *format_type, /*bool*/int value);
extern int po_message_is_range (po_message_t message, int *minp, int *maxp);
extern void po_message_set_range (po_message_t message, int min, int max);
extern const char * po_filepos_file (po_filepos_t filepos);
extern size_t po_filepos_start_line (po_filepos_t filepos);
extern const char * const * po_format_list (void);
extern const char * po_format_pretty_name (const char *format_type);
extern void po_file_check_all (po_file_t file, po_xerror_handler_t handler);
extern void po_message_check_all (po_message_t message, po_message_iterator_t iterator, po_xerror_handler_t handler);
extern void po_message_check_format (po_message_t message, po_xerror_handler_t handler);
extern "C" {
extern "C" {
extern const struct wl_interface wl_display_interface;
extern const struct wl_interface wl_registry_interface;
extern const struct wl_interface wl_callback_interface;
extern const struct wl_interface wl_compositor_interface;
extern const struct wl_interface wl_shm_pool_interface;
extern const struct wl_interface wl_shm_interface;
extern const struct wl_interface wl_buffer_interface;
extern const struct wl_interface wl_data_offer_interface;
extern const struct wl_interface wl_data_source_interface;
extern const struct wl_interface wl_data_device_interface;
extern const struct wl_interface wl_data_device_manager_interface;
extern const struct wl_interface wl_shell_interface;
extern const struct wl_interface wl_shell_surface_interface;
extern const struct wl_interface wl_surface_interface;
extern const struct wl_interface wl_seat_interface;
extern const struct wl_interface wl_pointer_interface;
extern const struct wl_interface wl_keyboard_interface;
extern const struct wl_interface wl_touch_interface;
extern const struct wl_interface wl_output_interface;
extern const struct wl_interface wl_region_interface;
extern const struct wl_interface wl_subcompositor_interface;
extern const struct wl_interface wl_subsurface_interface;
extern int register_printf_specifier (int __spec, printf_function __func,
extern int register_printf_function (int __spec, printf_function __func,
extern int register_printf_modifier (const wchar_t *__str) __wur __THROW;
extern int register_printf_type (printf_va_arg_function __fct) __wur __THROW;
extern size_t parse_printf_format (const char *__restrict __fmt, size_t __n,
extern int printf_size (FILE *__restrict __fp,
extern int printf_size_info (const struct printf_info *__restrict
extern struct __res_state *__res_state(void) __attribute__ ((__const__));
extern "C" {
extern void _obstack_newchunk (struct obstack *, int);
extern int _obstack_begin (struct obstack *, int, int,
extern int _obstack_begin_1 (struct obstack *, int, int,
extern int _obstack_memory_used (struct obstack *);
extern void (*obstack_alloc_failed_handler) (void);
extern int obstack_exit_failure;
extern int iswalnum (wint_t __wc) __THROW;
extern int iswalpha (wint_t __wc) __THROW;
extern int iswcntrl (wint_t __wc) __THROW;
extern int iswdigit (wint_t __wc) __THROW;
extern int iswgraph (wint_t __wc) __THROW;
extern int iswlower (wint_t __wc) __THROW;
extern int iswprint (wint_t __wc) __THROW;
extern int iswpunct (wint_t __wc) __THROW;
extern int iswspace (wint_t __wc) __THROW;
extern int iswupper (wint_t __wc) __THROW;
extern int iswxdigit (wint_t __wc) __THROW;
extern int iswblank (wint_t __wc) __THROW;
extern wctype_t wctype (const char *__property) __THROW;
extern int iswctype (wint_t __wc, wctype_t __desc) __THROW;
extern wint_t towlower (wint_t __wc) __THROW;
extern wint_t towupper (wint_t __wc) __THROW;
extern wctrans_t wctrans (const char *__property) __THROW;
extern wint_t towctrans (wint_t __wc, wctrans_t __desc) __THROW;
extern int iswalnum_l (wint_t __wc, __locale_t __locale) __THROW;
extern int iswalpha_l (wint_t __wc, __locale_t __locale) __THROW;
extern int iswcntrl_l (wint_t __wc, __locale_t __locale) __THROW;
extern int iswdigit_l (wint_t __wc, __locale_t __locale) __THROW;
extern int iswgraph_l (wint_t __wc, __locale_t __locale) __THROW;
extern int iswlower_l (wint_t __wc, __locale_t __locale) __THROW;
extern int iswprint_l (wint_t __wc, __locale_t __locale) __THROW;
extern int iswpunct_l (wint_t __wc, __locale_t __locale) __THROW;
extern int iswspace_l (wint_t __wc, __locale_t __locale) __THROW;
extern int iswupper_l (wint_t __wc, __locale_t __locale) __THROW;
extern int iswxdigit_l (wint_t __wc, __locale_t __locale) __THROW;
extern int iswblank_l (wint_t __wc, __locale_t __locale) __THROW;
extern wctype_t wctype_l (const char *__property, __locale_t __locale)
extern int iswctype_l (wint_t __wc, wctype_t __desc, __locale_t __locale)
extern wint_t towlower_l (wint_t __wc, __locale_t __locale) __THROW;
extern wint_t towupper_l (wint_t __wc, __locale_t __locale) __THROW;
extern wctrans_t wctrans_l (const char *__property, __locale_t __locale)
extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,
extern struct _IO_FILE *stdin;		/* Standard input stream.  */
extern struct _IO_FILE *stdout;		/* Standard output stream.  */
extern struct _IO_FILE *stderr;		/* Standard error output stream.  */
extern int remove (const char *__filename) __THROW;
extern int rename (const char *__old, const char *__new) __THROW;
extern int renameat (int __oldfd, const char *__old, int __newfd,
extern FILE *tmpfile (void) __wur;
extern FILE *__REDIRECT (tmpfile, (void), tmpfile64) __wur;
extern FILE *tmpfile64 (void) __wur;
extern char *tmpnam (char *__s) __THROW __wur;
extern char *tmpnam_r (char *__s) __THROW __wur;
extern char *tempnam (const char *__dir, const char *__pfx)
extern int fclose (FILE *__stream);
extern int fflush (FILE *__stream);
extern int fflush_unlocked (FILE *__stream);
extern int fcloseall (void);
extern FILE *fopen (const char *__restrict __filename,
extern FILE *freopen (const char *__restrict __filename,
extern FILE *__REDIRECT (fopen, (const char *__restrict __filename,
extern FILE *__REDIRECT (freopen, (const char *__restrict __filename,
extern FILE *fopen64 (const char *__restrict __filename,
extern FILE *freopen64 (const char *__restrict __filename,
extern FILE *fdopen (int __fd, const char *__modes) __THROW __wur;
extern FILE *fopencookie (void *__restrict __magic_cookie,
extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __THROW __wur;
extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __THROW;
extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
extern void setlinebuf (FILE *__stream) __THROW;
extern int fprintf (FILE *__restrict __stream,
extern int printf (const char *__restrict __format, ...);
extern int sprintf (char *__restrict __s,
extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
extern int vprintf (const char *__restrict __format, _G_va_list __arg);
extern int vsprintf (char *__restrict __s, const char *__restrict __format,
extern int snprintf (char *__restrict __s, size_t __maxlen,
extern int vsnprintf (char *__restrict __s, size_t __maxlen,
extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
extern int __asprintf (char **__restrict __ptr,
extern int asprintf (char **__restrict __ptr,
extern int vdprintf (int __fd, const char *__restrict __fmt,
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
extern int fscanf (FILE *__restrict __stream,
extern int scanf (const char *__restrict __format, ...) __wur;
extern int sscanf (const char *__restrict __s,
extern int __REDIRECT (fscanf, (FILE *__restrict __stream,
extern int __REDIRECT (scanf, (const char *__restrict __format, ...),
extern int __REDIRECT_NTH (sscanf, (const char *__restrict __s,
extern int __isoc99_fscanf (FILE *__restrict __stream,
extern int __isoc99_scanf (const char *__restrict __format, ...) __wur;
extern int __isoc99_sscanf (const char *__restrict __s,
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
extern int vscanf (const char *__restrict __format, _G_va_list __arg)
extern int vsscanf (const char *__restrict __s,
extern int __REDIRECT (vfscanf,
extern int __REDIRECT (vscanf, (const char *__restrict __format,
extern int __REDIRECT_NTH (vsscanf,
extern int __isoc99_vfscanf (FILE *__restrict __s,
extern int __isoc99_vscanf (const char *__restrict __format,
extern int __isoc99_vsscanf (const char *__restrict __s,
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);
extern int getchar (void);
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
extern int fgetc_unlocked (FILE *__stream);
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);
extern int putchar (int __c);
extern int fputc_unlocked (int __c, FILE *__stream);
extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);
extern int getw (FILE *__stream);
extern int putw (int __w, FILE *__stream);
extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
extern char *gets (char *__s) __wur __attribute_deprecated__;
extern char *fgets_unlocked (char *__restrict __s, int __n,
extern _IO_ssize_t __getdelim (char **__restrict __lineptr,
extern _IO_ssize_t getdelim (char **__restrict __lineptr,
extern _IO_ssize_t getline (char **__restrict __lineptr,
extern int fputs (const char *__restrict __s, FILE *__restrict __stream);
extern int puts (const char *__s);
extern int ungetc (int __c, FILE *__stream);
extern size_t fread (void *__restrict __ptr, size_t __size,
extern size_t fwrite (const void *__restrict __ptr, size_t __size,
extern int fputs_unlocked (const char *__restrict __s,
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
extern int fseek (FILE *__stream, long int __off, int __whence);
extern long int ftell (FILE *__stream) __wur;
extern void rewind (FILE *__stream);
extern int fseeko (FILE *__stream, __off_t __off, int __whence);
extern __off_t ftello (FILE *__stream) __wur;
extern int __REDIRECT (fseeko,
extern __off64_t __REDIRECT (ftello, (FILE *__stream), ftello64);
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);
extern int fsetpos (FILE *__stream, const fpos_t *__pos);
extern int __REDIRECT (fgetpos, (FILE *__restrict __stream,
extern int __REDIRECT (fsetpos,
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) __wur;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);
extern void clearerr (FILE *__stream) __THROW;
extern int feof (FILE *__stream) __THROW __wur;
extern int ferror (FILE *__stream) __THROW __wur;
extern void clearerr_unlocked (FILE *__stream) __THROW;
extern int feof_unlocked (FILE *__stream) __THROW __wur;
extern int ferror_unlocked (FILE *__stream) __THROW __wur;
extern void perror (const char *__s);
extern int fileno (FILE *__stream) __THROW __wur;
extern int fileno_unlocked (FILE *__stream) __THROW __wur;
extern FILE *popen (const char *__command, const char *__modes) __wur;
extern int pclose (FILE *__stream);
extern char *ctermid (char *__s) __THROW;
extern char *cuserid (char *__s);
extern int obstack_printf (struct obstack *__restrict __obstack,
extern int obstack_vprintf (struct obstack *__restrict __obstack,
extern void flockfile (FILE *__stream) __THROW;
extern int ftrylockfile (FILE *__stream) __THROW __wur;
extern void funlockfile (FILE *__stream) __THROW;
extern unsigned int if_nametoindex (const char *__ifname) __THROW;
extern char *if_indextoname (unsigned int __ifindex, char *__ifname) __THROW;
extern struct if_nameindex *if_nameindex (void) __THROW;
extern void if_freenameindex (struct if_nameindex *__ptr) __THROW;
extern "C" {
extern "C" {
extern "C" {
extern "C" {
extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
extern _IO_FILE *_IO_stdin attribute_hidden;
extern _IO_FILE *_IO_stdout attribute_hidden;
extern _IO_FILE *_IO_stderr attribute_hidden;
extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
extern "C" {
extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
extern _IO_wint_t __wunderflow (_IO_FILE *);
extern _IO_wint_t __wuflow (_IO_FILE *);
extern _IO_wint_t __woverflow (_IO_FILE *, _IO_wint_t);
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __THROW;
extern int _IO_ferror (_IO_FILE *__fp) __THROW;
extern int _IO_peekc_locked (_IO_FILE *__fp);
extern void _IO_flockfile (_IO_FILE *) __THROW;
extern void _IO_funlockfile (_IO_FILE *) __THROW;
extern int _IO_ftrylockfile (_IO_FILE *) __THROW;
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
extern _IO_ssize_t _IO_padn (_IO_FILE *, int, _IO_ssize_t);
extern _IO_size_t _IO_sgetn (_IO_FILE *, void *, _IO_size_t);
extern _IO_off64_t _IO_seekoff (_IO_FILE *, _IO_off64_t, int, int);
extern _IO_off64_t _IO_seekpos (_IO_FILE *, _IO_off64_t, int);
extern void _IO_free_backup_area (_IO_FILE *) __THROW;
extern _IO_wint_t _IO_getwc (_IO_FILE *__fp);
extern _IO_wint_t _IO_putwc (wchar_t __wc, _IO_FILE *__fp);
extern int _IO_fwide (_IO_FILE *__fp, int __mode) __THROW;
extern const int _IO_stdin_used;
extern int _IO_vfwscanf (_IO_FILE * __restrict, const wchar_t * __restrict,
extern int _IO_vfwprintf (_IO_FILE *__restrict, const wchar_t *__restrict,
extern _IO_ssize_t _IO_wpadn (_IO_FILE *, wint_t, _IO_ssize_t);
extern void _IO_free_wbackup_area (_IO_FILE *) __THROW;
extern wchar_t *wcscpy (wchar_t *__restrict __dest,
extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
extern wchar_t *wcscat (wchar_t *__restrict __dest,
extern wchar_t *wcsncat (wchar_t *__restrict __dest,
extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) __THROW;
extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) __THROW;
extern size_t wcsxfrm (wchar_t *__restrict __s1,
extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
extern wchar_t *wcsdup (const wchar_t *__s) __THROW __attribute_malloc__;
extern "C++" wchar_t *wcschr (wchar_t *__wcs, wchar_t __wc)
extern "C++" const wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
extern wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
extern "C++" wchar_t *wcsrchr (wchar_t *__wcs, wchar_t __wc)
extern "C++" const wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
extern wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
extern "C++" wchar_t *wcspbrk (wchar_t *__wcs, const wchar_t *__accept)
extern "C++" const wchar_t *wcspbrk (const wchar_t *__wcs,
extern wchar_t *wcspbrk (const wchar_t *__wcs, const wchar_t *__accept)
extern "C++" wchar_t *wcsstr (wchar_t *__haystack, const wchar_t *__needle)
extern "C++" const wchar_t *wcsstr (const wchar_t *__haystack,
extern wchar_t *wcsstr (const wchar_t *__haystack, const wchar_t *__needle)
extern wchar_t *wcstok (wchar_t *__restrict __s,
extern size_t wcslen (const wchar_t *__s) __THROW __attribute_pure__;
extern "C++" wchar_t *wcswcs (wchar_t *__haystack, const wchar_t *__needle)
extern "C++" const wchar_t *wcswcs (const wchar_t *__haystack,
extern wchar_t *wcswcs (const wchar_t *__haystack, const wchar_t *__needle)
extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
extern "C++" wchar_t *wmemchr (wchar_t *__s, wchar_t __c, size_t __n)
extern "C++" const wchar_t *wmemchr (const wchar_t *__s, wchar_t __c,
extern wchar_t *wmemchr (const wchar_t *__s, wchar_t __c, size_t __n)
extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) __THROW;
extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
extern wint_t btowc (int __c) __THROW;
extern int wctob (wint_t __c) __THROW;
extern int mbsinit (const mbstate_t *__ps) __THROW __attribute_pure__;
extern size_t mbrtowc (wchar_t *__restrict __pwc,
extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
extern size_t __mbrlen (const char *__restrict __s, size_t __n,
extern size_t mbrlen (const char *__restrict __s, size_t __n,
extern wint_t __btowc_alias (int __c) __asm ("btowc");
extern int __wctob_alias (wint_t __c) __asm ("wctob");
extern size_t mbsrtowcs (wchar_t *__restrict __dst,
extern size_t wcsrtombs (char *__restrict __dst,
extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
extern size_t wcsnrtombs (char *__restrict __dst,
extern int wcwidth (wchar_t __c) __THROW;
extern int wcswidth (const wchar_t *__s, size_t __n) __THROW;
extern double wcstod (const wchar_t *__restrict __nptr,
extern float wcstof (const wchar_t *__restrict __nptr,
extern long double wcstold (const wchar_t *__restrict __nptr,
extern long int wcstol (const wchar_t *__restrict __nptr,
extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
extern long long int wcstoll (const wchar_t *__restrict __nptr,
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,
extern long long int wcstoq (const wchar_t *__restrict __nptr,
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,
extern long int wcstol_l (const wchar_t *__restrict __nptr,
extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,
extern double wcstod_l (const wchar_t *__restrict __nptr,
extern float wcstof_l (const wchar_t *__restrict __nptr,
extern long double wcstold_l (const wchar_t *__restrict __nptr,
extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) __THROW;
extern int fwide (__FILE *__fp, int __mode) __THROW;
extern int fwprintf (__FILE *__restrict __stream,
extern int wprintf (const wchar_t *__restrict __format, ...)
extern int swprintf (wchar_t *__restrict __s, size_t __n,
extern int vfwprintf (__FILE *__restrict __s,
extern int vwprintf (const wchar_t *__restrict __format,
extern int vswprintf (wchar_t *__restrict __s, size_t __n,
extern int fwscanf (__FILE *__restrict __stream,
extern int wscanf (const wchar_t *__restrict __format, ...)
extern int swscanf (const wchar_t *__restrict __s,
extern int __REDIRECT (fwscanf, (__FILE *__restrict __stream,
extern int __REDIRECT (wscanf, (const wchar_t *__restrict __format, ...),
extern int __REDIRECT_NTH (swscanf, (const wchar_t *__restrict __s,
extern int __isoc99_fwscanf (__FILE *__restrict __stream,
extern int __isoc99_wscanf (const wchar_t *__restrict __format, ...);
extern int __isoc99_swscanf (const wchar_t *__restrict __s,
extern int vfwscanf (__FILE *__restrict __s,
extern int vwscanf (const wchar_t *__restrict __format,
extern int vswscanf (const wchar_t *__restrict __s,
extern int __REDIRECT (vfwscanf, (__FILE *__restrict __s,
extern int __REDIRECT (vwscanf, (const wchar_t *__restrict __format,
extern int __REDIRECT_NTH (vswscanf, (const wchar_t *__restrict __s,
extern int __isoc99_vfwscanf (__FILE *__restrict __s,
extern int __isoc99_vwscanf (const wchar_t *__restrict __format,
extern int __isoc99_vswscanf (const wchar_t *__restrict __s,
extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);
extern wint_t getwchar (void);
extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar (wchar_t __wc);
extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
extern int fputws (const wchar_t *__restrict __ws,
extern wint_t ungetwc (wint_t __wc, __FILE *__stream);
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);
extern wint_t fgetwc_unlocked (__FILE *__stream);
extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
extern int fputws_unlocked (const wchar_t *__restrict __ws,
extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
extern "C" {
extern "C" {
extern "C" {
extern "C" {
extern "C" {
extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
extern __sighandler_t signal (int __sig, __sighandler_t __handler)
extern __sighandler_t __REDIRECT_NTH (signal,
extern __sighandler_t bsd_signal (int __sig, __sighandler_t __handler)
extern int kill (__pid_t __pid, int __sig) __THROW;
extern int killpg (__pid_t __pgrp, int __sig) __THROW;
extern int raise (int __sig) __THROW;
extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
extern int gsignal (int __sig) __THROW;
extern void psignal (int __sig, const char *__s);
extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
extern int __sigpause (int __sig_or_mask, int __is_sig);
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
extern int sigblock (int __mask) __THROW __attribute_deprecated__;
extern int sigsetmask (int __mask) __THROW __attribute_deprecated__;
extern int siggetmask (void) __THROW __attribute_deprecated__;
extern int sigemptyset (sigset_t *__set) __THROW __nonnull ((1));
extern int sigfillset (sigset_t *__set) __THROW __nonnull ((1));
extern int sigaddset (sigset_t *__set, int __signo) __THROW __nonnull ((1));
extern int sigdelset (sigset_t *__set, int __signo) __THROW __nonnull ((1));
extern int sigismember (const sigset_t *__set, int __signo)
extern int sigisemptyset (const sigset_t *__set) __THROW __nonnull ((1));
extern int sigandset (sigset_t *__set, const sigset_t *__left,
extern int sigorset (sigset_t *__set, const sigset_t *__left,
extern int sigprocmask (int __how, const sigset_t *__restrict __set,
extern int sigsuspend (const sigset_t *__set) __nonnull ((1));
extern int sigaction (int __sig, const struct sigaction *__restrict __act,
extern int sigpending (sigset_t *__set) __THROW __nonnull ((1));
extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
extern int sigwaitinfo (const sigset_t *__restrict __set,
extern int sigtimedwait (const sigset_t *__restrict __set,
extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
extern const char *const _sys_siglist[_NSIG];
extern const char *const sys_siglist[_NSIG];
extern int sigvec (int __sig, const struct sigvec *__vec,
extern int sigreturn (struct sigcontext *__scp) __THROW;
extern int siginterrupt (int __sig, int __interrupt) __THROW;
extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
extern int sigaltstack (const struct sigaltstack *__restrict __ss,
extern int sighold (int __sig) __THROW;
extern int sigrelse (int __sig) __THROW;
extern int sigignore (int __sig) __THROW;
extern __sighandler_t sigset (int __sig, __sighandler_t __disp) __THROW;
extern int __libc_current_sigrtmin (void) __THROW;
extern int __libc_current_sigrtmax (void) __THROW;
extern int glob (const char *__restrict __pattern, int __flags,
extern void globfree (glob_t *__pglob) __THROW;
extern int __REDIRECT_NTH (glob, (const char *__restrict __pattern,
extern void __REDIRECT_NTH (globfree, (glob_t *__pglob), globfree64);
extern int glob64 (const char *__restrict __pattern, int __flags,
extern void globfree64 (glob64_t *__pglob) __THROW;
extern int glob_pattern_p (const char *__pattern, int __quote) __THROW;
extern "C" {
extern clock_t clock (void) __THROW;
extern time_t time (time_t *__timer) __THROW;
extern double difftime (time_t __time1, time_t __time0)
extern time_t mktime (struct tm *__tp) __THROW;
extern size_t strftime (char *__restrict __s, size_t __maxsize,
extern char *strptime (const char *__restrict __s,
extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
extern char *strptime_l (const char *__restrict __s,
extern struct tm *gmtime (const time_t *__timer) __THROW;
extern struct tm *localtime (const time_t *__timer) __THROW;
extern struct tm *gmtime_r (const time_t *__restrict __timer,
extern struct tm *localtime_r (const time_t *__restrict __timer,
extern char *asctime (const struct tm *__tp) __THROW;
extern char *ctime (const time_t *__timer) __THROW;
extern char *asctime_r (const struct tm *__restrict __tp,
extern char *ctime_r (const time_t *__restrict __timer,
extern char *__tzname[2];	/* Current timezone names.  */
extern int __daylight;		/* If daylight-saving time is ever in use.  */
extern long int __timezone;	/* Seconds west of UTC.  */
extern char *tzname[2];
extern void tzset (void) __THROW;
extern int daylight;
extern long int timezone;
extern int stime (const time_t *__when) __THROW;
extern time_t timegm (struct tm *__tp) __THROW;
extern time_t timelocal (struct tm *__tp) __THROW;
extern int dysize (int __year) __THROW  __attribute__ ((__const__));
extern int nanosleep (const struct timespec *__requested_time,
extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __THROW;
extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __THROW;
extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
extern int clock_nanosleep (clockid_t __clock_id, int __flags,
extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __THROW;
extern int timer_create (clockid_t __clock_id,
extern int timer_delete (timer_t __timerid) __THROW;
extern int timer_settime (timer_t __timerid, int __flags,
extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
extern int timer_getoverrun (timer_t __timerid) __THROW;
extern int timespec_get (struct timespec *__ts, int __base)
extern int getdate_err;
extern struct tm *getdate (const char *__string);
extern int getdate_r (const char *__restrict __string,
